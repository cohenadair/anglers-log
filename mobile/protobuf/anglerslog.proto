syntax = "proto3";
package anglerslog;

enum Direction {
  direction_none = 0;
  north = 1;
  north_east = 2;
  east = 3;
  south_east = 4;
  south = 5;
  south_west = 6;
  west = 7;
  north_west = 8;
}

enum MeasurementSystem {
  imperial_whole = 0;
  imperial_decimal = 1;
  metric = 2;
}

enum MoonPhase {
  moon_phase_none = 0;
  new = 1;
  waxing_crescent = 2;
  first_quarter = 3;
  waxing_gibbous = 4;
  full = 5;
  waning_gibbous = 6;
  last_quarter = 7;
  waning_crescent = 8;
}

enum NumberBoundary {
  number_boundary_any = 0;
  less_than = 1;
  less_than_or_equal_to = 2;
  equal_to = 3;
  greater_than = 4;
  greater_than_or_equal_to = 5;
  range = 6;
}

enum Period {
  period_all = 0;
  period_none = 1;
  dawn = 2;
  morning = 3;
  midday = 4;
  afternoon = 5;
  dusk = 6;
  night = 7;
}

enum Season {
  season_all = 0;
  season_none = 1;
  winter = 2;
  spring = 3;
  summer = 4;
  autumn = 5;
}

enum SkyCondition {
  sky_condition_none = 0;
  snow = 1;
  drizzle = 2;
  dust = 3;
  fog = 4;
  rain = 5;
  tornado = 6;
  hail = 7;
  ice = 8;
  storm = 9;
  mist = 10;
  smoke = 11;
  overcast = 12;
  cloudy = 13;
  clear = 14;
}

enum Unit {
  feet = 0;
  inches = 1;
  pounds = 2;
  ounces = 3;
  fahrenheit = 4;
  meters = 5;
  centimeters = 6;
  kilograms = 7;
  celsius = 8;
  miles_per_hour = 9;
  kilometers_per_hour = 10;
  millibars = 11;
  pounds_per_square_inch = 12;
  miles = 13;
  kilometers = 14;
}

// A unique ID. An Id is a wrapper for UUID string representation of protobuf bytes type that can
// be used as keys in a map. The Dart type for protobuf bytes is a List<int>, and [List==] does
// not do a deep comparison of its elements. An [Id] message wrapper here is purely for semantics
// to differentiate between a "string" and a "string that is an ID".
message Id {
  string uuid = 1;
}

message Atmosphere {
  Measurement temperature = 1;
  SkyCondition sky_condition = 2;
  Measurement wind_speed = 3;
  Direction wind_direction = 4;
  Measurement pressure = 5;
  uint32 humidity = 6;
  Measurement visibility = 7;
  MoonPhase moon_phase = 8;
  uint64 sunrise_timestamp = 9;
  uint64 sunset_timestamp = 10;
}

message CustomEntity {
  enum Type {
    boolean = 0;
    number = 1;
    text = 2;
  }

  Id id = 1;
  string name = 2;
  string description = 3;
  Type type = 4;
}

message CustomEntityValue {
  Id custom_entity_id = 1;
  string value = 2;
}

message Bait {
  Id id = 1;
  string name = 2;
  Id bait_category_id = 3;
  repeated CustomEntityValue custom_entity_values = 4;
}

message BaitCategory {
  Id id = 1;
  string name = 2;
}

message Catch {
  Id id = 1;
  uint64 timestamp = 2;
  Id bait_id = 3;
  Id fishing_spot_id = 4;
  Id species_id = 5;
  repeated string image_names = 6;
  repeated CustomEntityValue custom_entity_values = 7;
  Id angler_id = 8;
  repeated Id method_ids = 9;
  Period period = 10;
  bool is_favorite = 11;
  bool was_catch_and_release = 12;
  Season season = 13;
  Id water_clarity_id = 14;
  MultiMeasurement water_depth = 15;
  MultiMeasurement water_temperature = 16;
  MultiMeasurement length = 17;
  MultiMeasurement weight = 18;
  uint32 quantity = 19;
  string notes = 20;
  Atmosphere atmosphere = 21;
}

message DateRange {
  enum Period {
    allDates = 0;
    today = 1;
    yesterday = 2;
    thisWeek = 3;
    thisMonth = 4;
    thisYear = 5;
    lastWeek = 6;
    lastMonth = 7;
    lastYear = 8;
    last7Days = 9;
    last14Days = 10;
    last30Days = 11;
    last60Days = 12;
    last12Months = 13;
    custom = 14;
  }

  Period period = 1;

  // Should only be set for Period.custom.
  uint64 start_timestamp = 2;
  uint64 end_timestamp = 3;
}

message FishingSpot {
  Id id = 1;
  string name = 2;
  double lat = 3;
  double lng = 4;
}

message NumberFilter {
  NumberBoundary boundary = 1;
  MultiMeasurement from = 2;
  MultiMeasurement to = 3; // Only set for NumberBoundary.range.
}

message Species {
  Id id = 1;
  string name = 2;
}

message Report {
  enum Type {
    summary = 0;
    comparison = 1;
  }

  Id id = 1;
  string name = 2;
  string description = 3;
  Type type = 4;
  DateRange from_date_range = 5;
  DateRange to_date_range = 6;
  repeated Id bait_ids = 7;
  repeated Id fishing_spot_ids = 8;
  repeated Id species_ids = 9;
  repeated Id angler_ids = 10;
  repeated Id method_ids = 11;
  repeated Period periods = 12;
  bool is_favorites_only = 13;
  bool is_catch_and_release_only = 14;
  repeated Season seasons = 15;
  repeated Id water_clarity_ids = 16;
  NumberFilter water_depth_filter = 17;
  NumberFilter water_temperature_filter = 18;
  NumberFilter length_filter = 19;
  NumberFilter weight_filter = 20;
  NumberFilter quantity_filter = 21;
}

message Angler {
  Id id = 1;
  string name = 2;
}

message Method {
  Id id = 1;
  string name = 2;
}

message WaterClarity {
  Id id = 1;
  string name = 2;
}

message Measurement {
  Unit unit = 1;
  double value = 2;
}

// A more accurate version of Measurement to be used with fractional
// values allowed by the imperial measurement system, such as pounds
// (mainValue) and ounces (fractionValue).
message MultiMeasurement {
  MeasurementSystem system = 1;
  Measurement mainValue = 2;
  Measurement fractionValue = 3;
}