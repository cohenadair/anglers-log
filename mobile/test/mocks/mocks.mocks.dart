// ignore_for_file: directives_ordering,avoid_equals_and_hash_code_on_mutable_classes,lines_longer_than_80_chars,subtype_of_sealed_class,unnecessary_overrides,must_be_immutable,duplicate_ignore
// Mocks generated by Mockito 5.0.16 from annotations
// in mobile/test/mocks/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:convert' as _i64;
import 'dart:io' as _i49;
import 'dart:math' as _i51;
import 'dart:typed_data' as _i61;
import 'dart:ui' as _i67;

import 'package:cloud_firestore/cloud_firestore.dart' as _i47;
import 'package:file_picker/file_picker.dart' as _i63;
import 'package:firebase_auth/firebase_auth.dart' as _i45;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i74;
import 'package:firebase_storage/firebase_storage.dart' as _i46;
import 'package:flutter/foundation.dart' as _i65;
import 'package:flutter/gestures.dart' as _i66;
import 'package:flutter/material.dart' as _i44;
import 'package:flutter/services.dart' as _i54;
import 'package:http/http.dart' as _i48;
import 'package:mapbox_gl/mapbox_gl.dart' as _i50;
import 'package:mapbox_gl_platform_interface/mapbox_gl_platform_interface.dart'
    as _i59;
import 'package:mobile/angler_manager.dart' as _i11;
import 'package:mobile/app_manager.dart' as _i4;
import 'package:mobile/app_preference_manager.dart' as _i5;
import 'package:mobile/atmosphere_fetcher.dart' as _i60;
import 'package:mobile/auth_manager.dart' as _i6;
import 'package:mobile/bait_category_manager.dart' as _i12;
import 'package:mobile/bait_manager.dart' as _i13;
import 'package:mobile/body_of_water_manager.dart' as _i14;
import 'package:mobile/catch_manager.dart' as _i15;
import 'package:mobile/custom_entity_manager.dart' as _i16;
import 'package:mobile/database/legacy_importer.dart' as _i68;
import 'package:mobile/entity_manager.dart' as _i10;
import 'package:mobile/fishing_spot_manager.dart' as _i17;
import 'package:mobile/image_manager.dart' as _i18;
import 'package:mobile/local_database_manager.dart' as _i3;
import 'package:mobile/location_monitor.dart' as _i19;
import 'package:mobile/method_manager.dart' as _i20;
import 'package:mobile/model/gen/anglerslog.pb.dart' as _i8;
import 'package:mobile/pages/manageable_list_page.dart' as _i72;
import 'package:mobile/preference_manager.dart' as _i62;
import 'package:mobile/properties_manager.dart' as _i21;
import 'package:mobile/report_manager.dart' as _i22;
import 'package:mobile/species_manager.dart' as _i23;
import 'package:mobile/subscription_manager.dart' as _i7;
import 'package:mobile/time_manager.dart' as _i24;
import 'package:mobile/trip_manager.dart' as _i25;
import 'package:mobile/user_preference_manager.dart' as _i26;
import 'package:mobile/utils/validator.dart' as _i69;
import 'package:mobile/water_clarity_manager.dart' as _i27;
import 'package:mobile/widgets/input_controller.dart' as _i57;
import 'package:mobile/widgets/quantity_picker_input.dart' as _i71;
import 'package:mobile/wrappers/file_picker_wrapper.dart' as _i28;
import 'package:mobile/wrappers/firebase_auth_wrapper.dart' as _i29;
import 'package:mobile/wrappers/firebase_storage_wrapper.dart' as _i30;
import 'package:mobile/wrappers/firebase_wrapper.dart' as _i31;
import 'package:mobile/wrappers/firestore_wrapper.dart' as _i2;
import 'package:mobile/wrappers/http_wrapper.dart' as _i32;
import 'package:mobile/wrappers/image_compress_wrapper.dart' as _i33;
import 'package:mobile/wrappers/image_picker_wrapper.dart' as _i34;
import 'package:mobile/wrappers/io_wrapper.dart' as _i35;
import 'package:mobile/wrappers/package_info_wrapper.dart' as _i36;
import 'package:mobile/wrappers/path_provider_wrapper.dart' as _i37;
import 'package:mobile/wrappers/permission_handler_wrapper.dart' as _i38;
import 'package:mobile/wrappers/photo_manager_wrapper.dart' as _i39;
import 'package:mobile/wrappers/purchases_wrapper.dart' as _i40;
import 'package:mobile/wrappers/services_wrapper.dart' as _i41;
import 'package:mobile/wrappers/shared_preferences_wrapper.dart' as _i42;
import 'package:mobile/wrappers/url_launcher_wrapper.dart' as _i43;
import 'package:mockito/mockito.dart' as _i1;
import 'package:package_info_plus/package_info_plus.dart' as _i52;
import 'package:photo_manager/photo_manager.dart' as _i55;
import 'package:protobuf/protobuf.dart' as _i58;
import 'package:purchases_flutter/purchases_flutter.dart' as _i53;
import 'package:purchases_flutter/transaction.dart' as _i70;
import 'package:sqflite/sqflite.dart' as _i56;

import 'mocks.dart' as _i73;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFirestoreWrapper_0 extends _i1.Fake implements _i2.FirestoreWrapper {
}

class _FakeLocalDatabaseManager_1 extends _i1.Fake
    implements _i3.LocalDatabaseManager {}

class _FakeAppManager_2 extends _i1.Fake implements _i4.AppManager {}

class _FakeAppPreferenceManager_3 extends _i1.Fake
    implements _i5.AppPreferenceManager {}

class _FakeAuthManager_4 extends _i1.Fake implements _i6.AuthManager {}

class _FakeSubscriptionManager_5 extends _i1.Fake
    implements _i7.SubscriptionManager {}

class _FakeAngler_6 extends _i1.Fake implements _i8.Angler {}

class _FakeId_7 extends _i1.Fake implements _i8.Id {}

class _FakeStreamSubscription_8<T> extends _i1.Fake
    implements _i9.StreamSubscription<T> {}

class _FakeSimpleEntityListener_9<T> extends _i1.Fake
    implements _i10.SimpleEntityListener<T> {}

class _FakeAnglerManager_10 extends _i1.Fake implements _i11.AnglerManager {}

class _FakeBaitCategoryManager_11 extends _i1.Fake
    implements _i12.BaitCategoryManager {}

class _FakeBaitManager_12 extends _i1.Fake implements _i13.BaitManager {}

class _FakeBodyOfWaterManager_13 extends _i1.Fake
    implements _i14.BodyOfWaterManager {}

class _FakeCatchManager_14 extends _i1.Fake implements _i15.CatchManager {}

class _FakeCustomEntityManager_15 extends _i1.Fake
    implements _i16.CustomEntityManager {}

class _FakeFishingSpotManager_16 extends _i1.Fake
    implements _i17.FishingSpotManager {}

class _FakeImageManager_17 extends _i1.Fake implements _i18.ImageManager {}

class _FakeLocationMonitor_18 extends _i1.Fake implements _i19.LocationMonitor {
}

class _FakeMethodManager_19 extends _i1.Fake implements _i20.MethodManager {}

class _FakePropertiesManager_20 extends _i1.Fake
    implements _i21.PropertiesManager {}

class _FakeReportManager_21 extends _i1.Fake implements _i22.ReportManager {}

class _FakeSpeciesManager_22 extends _i1.Fake implements _i23.SpeciesManager {}

class _FakeTimeManager_23 extends _i1.Fake implements _i24.TimeManager {}

class _FakeTripManager_24 extends _i1.Fake implements _i25.TripManager {}

class _FakeUserPreferenceManager_25 extends _i1.Fake
    implements _i26.UserPreferenceManager {}

class _FakeWaterClarityManager_26 extends _i1.Fake
    implements _i27.WaterClarityManager {}

class _FakeFilePickerWrapper_27 extends _i1.Fake
    implements _i28.FilePickerWrapper {}

class _FakeFirebaseAuthWrapper_28 extends _i1.Fake
    implements _i29.FirebaseAuthWrapper {}

class _FakeFirebaseStorageWrapper_29 extends _i1.Fake
    implements _i30.FirebaseStorageWrapper {}

class _FakeFirebaseWrapper_30 extends _i1.Fake implements _i31.FirebaseWrapper {
}

class _FakeHttpWrapper_31 extends _i1.Fake implements _i32.HttpWrapper {}

class _FakeImageCompressWrapper_32 extends _i1.Fake
    implements _i33.ImageCompressWrapper {}

class _FakeImagePickerWrapper_33 extends _i1.Fake
    implements _i34.ImagePickerWrapper {}

class _FakeIoWrapper_34 extends _i1.Fake implements _i35.IoWrapper {}

class _FakePackageInfoWrapper_35 extends _i1.Fake
    implements _i36.PackageInfoWrapper {}

class _FakePathProviderWrapper_36 extends _i1.Fake
    implements _i37.PathProviderWrapper {}

class _FakePermissionHandlerWrapper_37 extends _i1.Fake
    implements _i38.PermissionHandlerWrapper {}

class _FakePhotoManagerWrapper_38 extends _i1.Fake
    implements _i39.PhotoManagerWrapper {}

class _FakePurchasesWrapper_39 extends _i1.Fake
    implements _i40.PurchasesWrapper {}

class _FakeServicesWrapper_40 extends _i1.Fake implements _i41.ServicesWrapper {
}

class _FakeSharedPreferencesWrapper_41 extends _i1.Fake
    implements _i42.SharedPreferencesWrapper {}

class _FakeUrlLauncherWrapper_42 extends _i1.Fake
    implements _i43.UrlLauncherWrapper {}

class _FakeBaitCategory_43 extends _i1.Fake implements _i8.BaitCategory {}

class _FakeBait_44 extends _i1.Fake implements _i8.Bait {}

class _FakeBodyOfWater_45 extends _i1.Fake implements _i8.BodyOfWater {}

class _FakeCatch_46 extends _i1.Fake implements _i8.Catch {}

class _FakeCustomEntity_47 extends _i1.Fake implements _i8.CustomEntity {}

class _FakeFishingSpot_48 extends _i1.Fake implements _i8.FishingSpot {}

class _FakeMethod_49 extends _i1.Fake implements _i8.Method {}

class _FakeReport_50 extends _i1.Fake implements _i8.Report {}

class _FakeSpecies_51 extends _i1.Fake implements _i8.Species {}

class _FakeDateTime_52 extends _i1.Fake implements DateTime {}

class _FakeTimeOfDay_53 extends _i1.Fake implements _i44.TimeOfDay {}

class _FakeTrip_54 extends _i1.Fake implements _i8.Trip {}

class _FakeWaterClarity_55 extends _i1.Fake implements _i8.WaterClarity {}

class _FakeUserCredential_56 extends _i1.Fake implements _i45.UserCredential {}

class _FakeReference_57 extends _i1.Fake implements _i46.Reference {}

class _FakeCollectionReference_58<T extends Object?> extends _i1.Fake
    implements _i47.CollectionReference<T> {}

class _FakeDocumentReference_59<T extends Object?> extends _i1.Fake
    implements _i47.DocumentReference<T> {}

class _FakeResponse_60 extends _i1.Fake implements _i48.Response {}

class _FakeDirectory_61 extends _i1.Fake implements _i49.Directory {}

class _FakeFile_62 extends _i1.Fake implements _i49.File {}

class _FakeArgumentCallbacks_63<T> extends _i1.Fake
    implements _i50.ArgumentCallbacks<T> {}

class _FakeWidget_64 extends _i1.Fake implements _i44.Widget {
  @override
  String toString(
          {_i44.DiagnosticLevel? minLevel = _i44.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeSymbol_65 extends _i1.Fake implements _i50.Symbol {}

class _FakeLatLng_66 extends _i1.Fake implements _i50.LatLng {}

class _FakeLine_67 extends _i1.Fake implements _i50.Line {}

class _FakeCircle_68 extends _i1.Fake implements _i50.Circle {}

class _FakeFill_69 extends _i1.Fake implements _i50.Fill {}

class _FakeLatLngBounds_70 extends _i1.Fake implements _i50.LatLngBounds {}

class _FakePoint_71<T extends num> extends _i1.Fake implements _i51.Point<T> {}

class _FakePackageInfo_72 extends _i1.Fake implements _i52.PackageInfo {}

class _FakeOfferings_73 extends _i1.Fake implements _i53.Offerings {}

class _FakePurchaserInfo_74 extends _i1.Fake implements _i53.PurchaserInfo {}

class _FakeLogInResult_75 extends _i1.Fake implements _i53.LogInResult {}

class _FakeMethodChannel_76 extends _i1.Fake implements _i54.MethodChannel {}

class _FakeFilterOptionGroup_77 extends _i1.Fake
    implements _i55.FilterOptionGroup {}

class _FakeRequestType_78 extends _i1.Fake implements _i55.RequestType {}

class _FakeFirebaseFirestore_79 extends _i1.Fake
    implements _i47.FirebaseFirestore {}

class _FakeQuery_80<T extends Object?> extends _i1.Fake
    implements _i47.Query<T> {}

class _FakeQuerySnapshot_81<T extends Object?> extends _i1.Fake
    implements _i47.QuerySnapshot<T> {}

class _FakeBatch_82 extends _i1.Fake implements _i56.Batch {}

class _FakeUri_83 extends _i1.Fake implements Uri {}

class _FakeFileStat_84 extends _i1.Fake implements _i49.FileStat {}

class _FakeFileSystemEntity_85 extends _i1.Fake
    implements _i49.FileSystemEntity {}

class _FakeDocumentSnapshot_86<T extends Object?> extends _i1.Fake
    implements _i47.DocumentSnapshot<T> {}

class _FakeSnapshotMetadata_87 extends _i1.Fake
    implements _i47.SnapshotMetadata {}

class _FakeFirebaseStorage_88 extends _i1.Fake implements _i46.FirebaseStorage {
}

class _FakeTaskSnapshot_89 extends _i1.Fake implements _i46.TaskSnapshot {}

class _FakeMethodCodec_90 extends _i1.Fake implements _i54.MethodCodec {}

class _FakeBinaryMessenger_91 extends _i1.Fake implements _i54.BinaryMessenger {
}

class _FakeProduct_92 extends _i1.Fake implements _i53.Product {}

class _FakeEntitlementInfos_93 extends _i1.Fake
    implements _i53.EntitlementInfos {}

class _FakeSetInputController_94<T> extends _i1.Fake
    implements _i57.SetInputController<T> {}

class _FakeFullMetadata_95 extends _i1.Fake implements _i46.FullMetadata {}

class _FakeListResult_96 extends _i1.Fake implements _i46.ListResult {}

class _FakeUploadTask_97 extends _i1.Fake implements _i46.UploadTask {}

class _FakeDownloadTask_98 extends _i1.Fake implements _i46.DownloadTask {}

class _FakeUserMetadata_99 extends _i1.Fake implements _i45.UserMetadata {}

class _FakeIdTokenResult_100 extends _i1.Fake implements _i45.IdTokenResult {}

class _FakeConfirmationResult_101 extends _i1.Fake
    implements _i45.ConfirmationResult {}

class _FakeUser_102 extends _i1.Fake implements _i45.User {}

/// A class which mocks [AnglerManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnglerManager extends _i1.Mock implements _i11.AnglerManager {
  MockAnglerManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.Angler, _i8.Angler) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Angler __p0, _i8.Angler __p1) => 0)
          as int Function(_i8.Angler, _i8.Angler));
  @override
  Map<_i8.Id, _i8.Angler> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Angler>{}) as Map<_i8.Id, _i8.Angler>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Angler entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeAngler_6()) as _i8.Angler);
  @override
  _i8.Id id(_i8.Angler? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Angler? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  int numberOfCatches(_i8.Id? anglerId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [anglerId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(_i44.BuildContext? context, _i8.Angler? angler) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, angler]),
          returnValue: '') as String);
  @override
  List<_i8.Angler> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Angler>[]) as List<_i8.Angler>);
  @override
  String displayName(_i44.BuildContext? context, _i8.Angler? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.Angler>? entities = const [], Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.Angler> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Angler>[]) as List<_i8.Angler>);
  @override
  List<_i8.Angler> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Angler>[]) as List<_i8.Angler>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Angler? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Angler>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Angler>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Angler? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Angler? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Angler? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Angler> addSimpleListener(
          {void Function(_i8.Angler)? onAdd,
          void Function(_i8.Angler)? onDelete,
          void Function(_i8.Angler)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Angler>())
          as _i10.SimpleEntityListener<_i8.Angler>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppManager extends _i1.Mock implements _i4.AppManager {
  MockAppManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.AnglerManager get anglerManager =>
      (super.noSuchMethod(Invocation.getter(#anglerManager),
          returnValue: _FakeAnglerManager_10()) as _i11.AnglerManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i12.BaitCategoryManager get baitCategoryManager => (super.noSuchMethod(
      Invocation.getter(#baitCategoryManager),
      returnValue: _FakeBaitCategoryManager_11()) as _i12.BaitCategoryManager);
  @override
  _i13.BaitManager get baitManager =>
      (super.noSuchMethod(Invocation.getter(#baitManager),
          returnValue: _FakeBaitManager_12()) as _i13.BaitManager);
  @override
  _i14.BodyOfWaterManager get bodyOfWaterManager => (super.noSuchMethod(
      Invocation.getter(#bodyOfWaterManager),
      returnValue: _FakeBodyOfWaterManager_13()) as _i14.BodyOfWaterManager);
  @override
  _i15.CatchManager get catchManager =>
      (super.noSuchMethod(Invocation.getter(#catchManager),
          returnValue: _FakeCatchManager_14()) as _i15.CatchManager);
  @override
  _i16.CustomEntityManager get customEntityManager => (super.noSuchMethod(
      Invocation.getter(#customEntityManager),
      returnValue: _FakeCustomEntityManager_15()) as _i16.CustomEntityManager);
  @override
  _i17.FishingSpotManager get fishingSpotManager => (super.noSuchMethod(
      Invocation.getter(#fishingSpotManager),
      returnValue: _FakeFishingSpotManager_16()) as _i17.FishingSpotManager);
  @override
  _i18.ImageManager get imageManager =>
      (super.noSuchMethod(Invocation.getter(#imageManager),
          returnValue: _FakeImageManager_17()) as _i18.ImageManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  _i19.LocationMonitor get locationMonitor =>
      (super.noSuchMethod(Invocation.getter(#locationMonitor),
          returnValue: _FakeLocationMonitor_18()) as _i19.LocationMonitor);
  @override
  _i20.MethodManager get methodManager =>
      (super.noSuchMethod(Invocation.getter(#methodManager),
          returnValue: _FakeMethodManager_19()) as _i20.MethodManager);
  @override
  _i21.PropertiesManager get propertiesManager =>
      (super.noSuchMethod(Invocation.getter(#propertiesManager),
          returnValue: _FakePropertiesManager_20()) as _i21.PropertiesManager);
  @override
  _i22.ReportManager get reportManager =>
      (super.noSuchMethod(Invocation.getter(#reportManager),
          returnValue: _FakeReportManager_21()) as _i22.ReportManager);
  @override
  _i23.SpeciesManager get speciesManager =>
      (super.noSuchMethod(Invocation.getter(#speciesManager),
          returnValue: _FakeSpeciesManager_22()) as _i23.SpeciesManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  _i24.TimeManager get timeManager =>
      (super.noSuchMethod(Invocation.getter(#timeManager),
          returnValue: _FakeTimeManager_23()) as _i24.TimeManager);
  @override
  _i25.TripManager get tripManager =>
      (super.noSuchMethod(Invocation.getter(#tripManager),
          returnValue: _FakeTripManager_24()) as _i25.TripManager);
  @override
  _i26.UserPreferenceManager get userPreferenceManager =>
      (super.noSuchMethod(Invocation.getter(#userPreferenceManager),
              returnValue: _FakeUserPreferenceManager_25())
          as _i26.UserPreferenceManager);
  @override
  _i27.WaterClarityManager get waterClarityManager => (super.noSuchMethod(
      Invocation.getter(#waterClarityManager),
      returnValue: _FakeWaterClarityManager_26()) as _i27.WaterClarityManager);
  @override
  _i28.FilePickerWrapper get filePickerWrapper =>
      (super.noSuchMethod(Invocation.getter(#filePickerWrapper),
          returnValue: _FakeFilePickerWrapper_27()) as _i28.FilePickerWrapper);
  @override
  _i29.FirebaseAuthWrapper get firebaseAuthWrapper => (super.noSuchMethod(
      Invocation.getter(#firebaseAuthWrapper),
      returnValue: _FakeFirebaseAuthWrapper_28()) as _i29.FirebaseAuthWrapper);
  @override
  _i30.FirebaseStorageWrapper get firebaseStorageWrapper =>
      (super.noSuchMethod(Invocation.getter(#firebaseStorageWrapper),
              returnValue: _FakeFirebaseStorageWrapper_29())
          as _i30.FirebaseStorageWrapper);
  @override
  _i31.FirebaseWrapper get firebaseWrapper =>
      (super.noSuchMethod(Invocation.getter(#firebaseWrapper),
          returnValue: _FakeFirebaseWrapper_30()) as _i31.FirebaseWrapper);
  @override
  _i2.FirestoreWrapper get firestoreWrapper =>
      (super.noSuchMethod(Invocation.getter(#firestoreWrapper),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i32.HttpWrapper get httpWrapper =>
      (super.noSuchMethod(Invocation.getter(#httpWrapper),
          returnValue: _FakeHttpWrapper_31()) as _i32.HttpWrapper);
  @override
  _i33.ImageCompressWrapper get imageCompressWrapper =>
      (super.noSuchMethod(Invocation.getter(#imageCompressWrapper),
              returnValue: _FakeImageCompressWrapper_32())
          as _i33.ImageCompressWrapper);
  @override
  _i34.ImagePickerWrapper get imagePickerWrapper => (super.noSuchMethod(
      Invocation.getter(#imagePickerWrapper),
      returnValue: _FakeImagePickerWrapper_33()) as _i34.ImagePickerWrapper);
  @override
  _i35.IoWrapper get ioWrapper =>
      (super.noSuchMethod(Invocation.getter(#ioWrapper),
          returnValue: _FakeIoWrapper_34()) as _i35.IoWrapper);
  @override
  _i36.PackageInfoWrapper get packageInfoWrapper => (super.noSuchMethod(
      Invocation.getter(#packageInfoWrapper),
      returnValue: _FakePackageInfoWrapper_35()) as _i36.PackageInfoWrapper);
  @override
  _i37.PathProviderWrapper get pathProviderWrapper => (super.noSuchMethod(
      Invocation.getter(#pathProviderWrapper),
      returnValue: _FakePathProviderWrapper_36()) as _i37.PathProviderWrapper);
  @override
  _i38.PermissionHandlerWrapper get permissionHandlerWrapper =>
      (super.noSuchMethod(Invocation.getter(#permissionHandlerWrapper),
              returnValue: _FakePermissionHandlerWrapper_37())
          as _i38.PermissionHandlerWrapper);
  @override
  _i39.PhotoManagerWrapper get photoManagerWrapper => (super.noSuchMethod(
      Invocation.getter(#photoManagerWrapper),
      returnValue: _FakePhotoManagerWrapper_38()) as _i39.PhotoManagerWrapper);
  @override
  _i40.PurchasesWrapper get purchasesWrapper =>
      (super.noSuchMethod(Invocation.getter(#purchasesWrapper),
          returnValue: _FakePurchasesWrapper_39()) as _i40.PurchasesWrapper);
  @override
  _i41.ServicesWrapper get servicesWrapper =>
      (super.noSuchMethod(Invocation.getter(#servicesWrapper),
          returnValue: _FakeServicesWrapper_40()) as _i41.ServicesWrapper);
  @override
  _i42.SharedPreferencesWrapper get sharedPreferencesWrapper =>
      (super.noSuchMethod(Invocation.getter(#sharedPreferencesWrapper),
              returnValue: _FakeSharedPreferencesWrapper_41())
          as _i42.SharedPreferencesWrapper);
  @override
  _i43.UrlLauncherWrapper get urlLauncherWrapper => (super.noSuchMethod(
      Invocation.getter(#urlLauncherWrapper),
      returnValue: _FakeUrlLauncherWrapper_42()) as _i43.UrlLauncherWrapper);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppPreferenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppPreferenceManager extends _i1.Mock
    implements _i5.AppPreferenceManager {
  MockAppPreferenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set lastLoggedInEmail(String? email) =>
      super.noSuchMethod(Invocation.setter(#lastLoggedInEmail, email),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ArgumentCallbacks].
///
/// See the documentation for Mockito's code generation for more information.
class MockArgumentCallbacks<T> extends _i1.Mock
    implements _i50.ArgumentCallbacks<T> {
  MockArgumentCallbacks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  void call(T? argument) =>
      super.noSuchMethod(Invocation.method(#call, [argument]),
          returnValueForMissingStub: null);
  @override
  void add(_i59.ArgumentCallback<T>? callback) =>
      super.noSuchMethod(Invocation.method(#add, [callback]),
          returnValueForMissingStub: null);
  @override
  void remove(_i59.ArgumentCallback<T>? callback) =>
      super.noSuchMethod(Invocation.method(#remove, [callback]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AtmosphereFetcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockAtmosphereFetcher extends _i1.Mock implements _i60.AtmosphereFetcher {
  MockAtmosphereFetcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  int get timestamp =>
      (super.noSuchMethod(Invocation.getter(#timestamp), returnValue: 0)
          as int);
  @override
  _i9.Future<_i8.Atmosphere?> fetch() =>
      (super.noSuchMethod(Invocation.method(#fetch, []),
              returnValue: Future<_i8.Atmosphere?>.value())
          as _i9.Future<_i8.Atmosphere?>);
  @override
  _i9.Future<Map<String, dynamic>?> get(String? elements) =>
      (super.noSuchMethod(Invocation.method(#get, [elements]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i9.Future<Map<String, dynamic>?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BaitCategoryManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaitCategoryManager extends _i1.Mock
    implements _i12.BaitCategoryManager {
  MockBaitCategoryManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.BaitCategory, _i8.BaitCategory) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.BaitCategory __p0, _i8.BaitCategory __p1) => 0)
          as int Function(_i8.BaitCategory, _i8.BaitCategory));
  @override
  Map<_i8.Id, _i8.BaitCategory> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i8.Id, _i8.BaitCategory>{})
          as Map<_i8.Id, _i8.BaitCategory>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.BaitCategory entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeBaitCategory_43()) as _i8.BaitCategory);
  @override
  _i8.Id id(_i8.BaitCategory? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.BaitCategory? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  int numberOfBaits(_i8.Id? baitCategoryId) =>
      (super.noSuchMethod(Invocation.method(#numberOfBaits, [baitCategoryId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(
          _i44.BuildContext? context, _i8.BaitCategory? baitCategory) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMessage, [context, baitCategory]),
          returnValue: '') as String);
  @override
  List<_i8.BaitCategory> listSortedByName({String? filter}) => (super
      .noSuchMethod(Invocation.method(#listSortedByName, [], {#filter: filter}),
          returnValue: <_i8.BaitCategory>[]) as List<_i8.BaitCategory>);
  @override
  String displayName(_i44.BuildContext? context, _i8.BaitCategory? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.BaitCategory>? entities = const [],
          Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.BaitCategory> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.BaitCategory>[]) as List<_i8.BaitCategory>);
  @override
  List<_i8.BaitCategory> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.BaitCategory>[]) as List<_i8.BaitCategory>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.BaitCategory? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.BaitCategory>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.BaitCategory>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.BaitCategory? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.BaitCategory? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.BaitCategory? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.BaitCategory> addSimpleListener(
          {void Function(_i8.BaitCategory)? onAdd,
          void Function(_i8.BaitCategory)? onDelete,
          void Function(_i8.BaitCategory)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.BaitCategory>())
          as _i10.SimpleEntityListener<_i8.BaitCategory>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BaitManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaitManager extends _i1.Mock implements _i13.BaitManager {
  MockBaitManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.BaitAttachment, _i8.BaitAttachment)
      get attachmentComparator =>
          (super.noSuchMethod(Invocation.getter(#attachmentComparator),
              returnValue: (_i8.BaitAttachment __p0, _i8.BaitAttachment __p1) =>
                  0) as int Function(_i8.BaitAttachment, _i8.BaitAttachment));
  @override
  int Function(_i8.Bait, _i8.Bait) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Bait __p0, _i8.Bait __p1) => 0)
          as int Function(_i8.Bait, _i8.Bait));
  @override
  Map<_i8.Id, _i8.Bait> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Bait>{}) as Map<_i8.Id, _i8.Bait>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Bait entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeBait_44()) as _i8.Bait);
  @override
  _i8.Id id(_i8.Bait? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Bait? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  void setImageName(_i8.Bait? entity, String? imageName) =>
      super.noSuchMethod(Invocation.method(#setImageName, [entity, imageName]),
          returnValueForMissingStub: null);
  @override
  void clearImageName(_i8.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#clearImageName, [entity]),
          returnValueForMissingStub: null);
  @override
  bool matchesFilter(_i8.Id? id, String? filter,
          [_i44.BuildContext? context]) =>
      (super.noSuchMethod(
          Invocation.method(#matchesFilter, [id, filter, context]),
          returnValue: false) as bool);
  @override
  bool attachmentsMatchesFilter(Iterable<_i8.BaitAttachment>? attachments,
          String? filter, _i44.BuildContext? context) =>
      (super.noSuchMethod(
          Invocation.method(
              #attachmentsMatchesFilter, [attachments, filter, context]),
          returnValue: false) as bool);
  @override
  bool duplicate(_i8.Bait? rhs) =>
      (super.noSuchMethod(Invocation.method(#duplicate, [rhs]),
          returnValue: false) as bool);
  @override
  int numberOfCatches(_i8.Id? baitId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [baitId]),
          returnValue: 0) as int);
  @override
  int numberOfVariantCatches(_i8.Id? variantId) => (super.noSuchMethod(
      Invocation.method(#numberOfVariantCatches, [variantId]),
      returnValue: 0) as int);
  @override
  int numberOfCustomEntityValues(_i8.Id? customEntityId) => (super.noSuchMethod(
      Invocation.method(#numberOfCustomEntityValues, [customEntityId]),
      returnValue: 0) as int);
  @override
  List<_i8.BaitAttachment> attachmentList() =>
      (super.noSuchMethod(Invocation.method(#attachmentList, []),
          returnValue: <_i8.BaitAttachment>[]) as List<_i8.BaitAttachment>);
  @override
  _i8.BaitVariant? variant(_i8.Bait? bait, _i8.Id? variantId) =>
      (super.noSuchMethod(Invocation.method(#variant, [bait, variantId]))
          as _i8.BaitVariant?);
  @override
  _i8.BaitVariant? variantFromAttachment(_i8.BaitAttachment? attachment) =>
      (super.noSuchMethod(
              Invocation.method(#variantFromAttachment, [attachment]))
          as _i8.BaitVariant?);
  @override
  String? attachmentDisplayValue(
          _i8.BaitAttachment? attachment, _i44.BuildContext? context) =>
      (super.noSuchMethod(
              Invocation.method(#attachmentDisplayValue, [attachment, context]))
          as String?);
  @override
  List<String> attachmentsDisplayValues(
          Iterable<_i8.BaitAttachment>? attachments,
          _i44.BuildContext? context) =>
      (super.noSuchMethod(
          Invocation.method(#attachmentsDisplayValues, [attachments, context]),
          returnValue: <String>[]) as List<String>);
  @override
  String variantDisplayValue(
          _i8.BaitVariant? variant, _i44.BuildContext? context,
          {bool? includeCustomValues = false}) =>
      (super.noSuchMethod(
          Invocation.method(#variantDisplayValue, [variant, context],
              {#includeCustomValues: includeCustomValues}),
          returnValue: '') as String);
  @override
  String deleteMessage(_i44.BuildContext? context, _i8.Bait? bait) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, bait]),
          returnValue: '') as String);
  @override
  String deleteVariantMessage(
          _i44.BuildContext? context, _i8.BaitVariant? variant) =>
      (super.noSuchMethod(
          Invocation.method(#deleteVariantMessage, [context, variant]),
          returnValue: '') as String);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Bait? entity,
          {_i49.File? imageFile,
          bool? compressImages = true,
          bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [
            entity
          ], {
            #imageFile: imageFile,
            #compressImages: compressImages,
            #notify: notify
          }),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  List<_i8.Bait> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Bait>[]) as List<_i8.Bait>);
  @override
  String displayName(_i44.BuildContext? context, _i8.Bait? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.Bait>? entities = const [], Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.Bait> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Bait>[]) as List<_i8.Bait>);
  @override
  List<_i8.Bait> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Bait>[]) as List<_i8.Bait>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Bait>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Bait>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Bait> addSimpleListener(
          {void Function(_i8.Bait)? onAdd,
          void Function(_i8.Bait)? onDelete,
          void Function(_i8.Bait)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Bait>())
          as _i10.SimpleEntityListener<_i8.Bait>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BodyOfWaterManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBodyOfWaterManager extends _i1.Mock
    implements _i14.BodyOfWaterManager {
  MockBodyOfWaterManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.BodyOfWater, _i8.BodyOfWater) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.BodyOfWater __p0, _i8.BodyOfWater __p1) => 0)
          as int Function(_i8.BodyOfWater, _i8.BodyOfWater));
  @override
  Map<_i8.Id, _i8.BodyOfWater> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i8.Id, _i8.BodyOfWater>{})
          as Map<_i8.Id, _i8.BodyOfWater>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.BodyOfWater entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeBodyOfWater_45()) as _i8.BodyOfWater);
  @override
  _i8.Id id(_i8.BodyOfWater? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.BodyOfWater? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  int numberOfFishingSpots(_i8.Id? bodyOfWaterId) => (super.noSuchMethod(
      Invocation.method(#numberOfFishingSpots, [bodyOfWaterId]),
      returnValue: 0) as int);
  @override
  String deleteMessage(
          _i44.BuildContext? context, _i8.BodyOfWater? bodyOfWater) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMessage, [context, bodyOfWater]),
          returnValue: '') as String);
  @override
  List<_i8.BodyOfWater> listSortedByName({String? filter}) => (super
      .noSuchMethod(Invocation.method(#listSortedByName, [], {#filter: filter}),
          returnValue: <_i8.BodyOfWater>[]) as List<_i8.BodyOfWater>);
  @override
  String displayName(_i44.BuildContext? context, _i8.BodyOfWater? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.BodyOfWater>? entities = const [],
          Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.BodyOfWater> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.BodyOfWater>[]) as List<_i8.BodyOfWater>);
  @override
  List<_i8.BodyOfWater> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.BodyOfWater>[]) as List<_i8.BodyOfWater>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.BodyOfWater? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.BodyOfWater>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.BodyOfWater>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.BodyOfWater? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.BodyOfWater? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.BodyOfWater? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.BodyOfWater> addSimpleListener(
          {void Function(_i8.BodyOfWater)? onAdd,
          void Function(_i8.BodyOfWater)? onDelete,
          void Function(_i8.BodyOfWater)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.BodyOfWater>())
          as _i10.SimpleEntityListener<_i8.BodyOfWater>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CatchManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCatchManager extends _i1.Mock implements _i15.CatchManager {
  MockCatchManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  Map<_i8.Id, _i8.Catch> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Catch>{}) as Map<_i8.Id, _i8.Catch>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Catch entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeCatch_46()) as _i8.Catch);
  @override
  _i8.Id id(_i8.Catch? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String displayName(_i44.BuildContext? context, _i8.Catch? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter,
          [_i44.BuildContext? context]) =>
      (super.noSuchMethod(
          Invocation.method(#matchesFilter, [id, filter, context]),
          returnValue: false) as bool);
  @override
  List<_i8.Catch> catchesSortedByTimestamp(_i44.BuildContext? context,
          {String? filter,
          _i8.DateRange? dateRange,
          bool? isCatchAndReleaseOnly = false,
          bool? isFavoritesOnly = false,
          Set<_i8.Id>? anglerIds = const {},
          Set<_i8.BaitAttachment>? baits = const {},
          Set<_i8.Id>? catchIds = const {},
          Set<_i8.Id>? fishingSpotIds = const {},
          Set<_i8.Id>? bodyOfWaterIds = const {},
          Set<_i8.Id>? methodIds = const {},
          Set<_i8.Id>? speciesIds = const {},
          Set<_i8.Id>? waterClarityIds = const {},
          Set<_i8.Period>? periods = const {},
          Set<_i8.Season>? seasons = const {},
          Set<_i8.Direction>? windDirections = const {},
          Set<_i8.SkyCondition>? skyConditions = const {},
          Set<_i8.MoonPhase>? moonPhases = const {},
          Set<_i8.TideType>? tideTypes = const {},
          _i8.NumberFilter? waterDepthFilter,
          _i8.NumberFilter? waterTemperatureFilter,
          _i8.NumberFilter? lengthFilter,
          _i8.NumberFilter? weightFilter,
          _i8.NumberFilter? quantityFilter,
          _i8.NumberFilter? airTemperatureFilter,
          _i8.NumberFilter? airPressureFilter,
          _i8.NumberFilter? airHumidityFilter,
          _i8.NumberFilter? airVisibilityFilter,
          _i8.NumberFilter? windSpeedFilter}) =>
      (super.noSuchMethod(
          Invocation.method(#catchesSortedByTimestamp, [
            context
          ], {
            #filter: filter,
            #dateRange: dateRange,
            #isCatchAndReleaseOnly: isCatchAndReleaseOnly,
            #isFavoritesOnly: isFavoritesOnly,
            #anglerIds: anglerIds,
            #baits: baits,
            #catchIds: catchIds,
            #fishingSpotIds: fishingSpotIds,
            #bodyOfWaterIds: bodyOfWaterIds,
            #methodIds: methodIds,
            #speciesIds: speciesIds,
            #waterClarityIds: waterClarityIds,
            #periods: periods,
            #seasons: seasons,
            #windDirections: windDirections,
            #skyConditions: skyConditions,
            #moonPhases: moonPhases,
            #tideTypes: tideTypes,
            #waterDepthFilter: waterDepthFilter,
            #waterTemperatureFilter: waterTemperatureFilter,
            #lengthFilter: lengthFilter,
            #weightFilter: weightFilter,
            #quantityFilter: quantityFilter,
            #airTemperatureFilter: airTemperatureFilter,
            #airPressureFilter: airPressureFilter,
            #airHumidityFilter: airHumidityFilter,
            #airVisibilityFilter: airVisibilityFilter,
            #windSpeedFilter: windSpeedFilter
          }),
          returnValue: <_i8.Catch>[]) as List<_i8.Catch>);
  @override
  List<_i8.Catch> filteredCatches(_i44.BuildContext? context,
          {String? filter,
          _i8.DateRange? dateRange,
          bool? isCatchAndReleaseOnly = false,
          bool? isFavoritesOnly = false,
          Set<_i8.Id>? anglerIds = const {},
          Set<_i8.BaitAttachment>? baits = const {},
          Set<_i8.Id>? catchIds = const {},
          Set<_i8.Id>? fishingSpotIds = const {},
          Set<_i8.Id>? bodyOfWaterIds = const {},
          Set<_i8.Id>? methodIds = const {},
          Set<_i8.Id>? speciesIds = const {},
          Set<_i8.Id>? waterClarityIds = const {},
          Set<_i8.Period>? periods = const {},
          Set<_i8.Season>? seasons = const {},
          Set<_i8.Direction>? windDirections = const {},
          Set<_i8.SkyCondition>? skyConditions = const {},
          Set<_i8.MoonPhase>? moonPhases = const {},
          Set<_i8.TideType>? tideTypes = const {},
          _i8.NumberFilter? waterDepthFilter,
          _i8.NumberFilter? waterTemperatureFilter,
          _i8.NumberFilter? lengthFilter,
          _i8.NumberFilter? weightFilter,
          _i8.NumberFilter? quantityFilter,
          _i8.NumberFilter? airTemperatureFilter,
          _i8.NumberFilter? airPressureFilter,
          _i8.NumberFilter? airHumidityFilter,
          _i8.NumberFilter? airVisibilityFilter,
          _i8.NumberFilter? windSpeedFilter}) =>
      (super.noSuchMethod(
          Invocation.method(#filteredCatches, [
            context
          ], {
            #filter: filter,
            #dateRange: dateRange,
            #isCatchAndReleaseOnly: isCatchAndReleaseOnly,
            #isFavoritesOnly: isFavoritesOnly,
            #anglerIds: anglerIds,
            #baits: baits,
            #catchIds: catchIds,
            #fishingSpotIds: fishingSpotIds,
            #bodyOfWaterIds: bodyOfWaterIds,
            #methodIds: methodIds,
            #speciesIds: speciesIds,
            #waterClarityIds: waterClarityIds,
            #periods: periods,
            #seasons: seasons,
            #windDirections: windDirections,
            #skyConditions: skyConditions,
            #moonPhases: moonPhases,
            #tideTypes: tideTypes,
            #waterDepthFilter: waterDepthFilter,
            #waterTemperatureFilter: waterTemperatureFilter,
            #lengthFilter: lengthFilter,
            #weightFilter: weightFilter,
            #quantityFilter: quantityFilter,
            #airTemperatureFilter: airTemperatureFilter,
            #airPressureFilter: airPressureFilter,
            #airHumidityFilter: airHumidityFilter,
            #airVisibilityFilter: airVisibilityFilter,
            #windSpeedFilter: windSpeedFilter
          }),
          returnValue: <_i8.Catch>[]) as List<_i8.Catch>);
  @override
  List<String> imageNamesSortedByTimestamp(_i44.BuildContext? context) => (super
      .noSuchMethod(Invocation.method(#imageNamesSortedByTimestamp, [context]),
          returnValue: <String>[]) as List<String>);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Catch? entity,
          {List<_i49.File>? imageFiles = const [],
          bool? compressImages = true,
          bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [
            entity
          ], {
            #imageFiles: imageFiles,
            #compressImages: compressImages,
            #notify: notify
          }),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  bool existsWith({_i8.Id? speciesId}) => (super.noSuchMethod(
      Invocation.method(#existsWith, [], {#speciesId: speciesId}),
      returnValue: false) as bool);
  @override
  String deleteMessage(_i44.BuildContext? context, _i8.Catch? cat) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, cat]),
          returnValue: '') as String);
  @override
  int numberOfCustomEntityValues(_i8.Id? customEntityId) => (super.noSuchMethod(
      Invocation.method(#numberOfCustomEntityValues, [customEntityId]),
      returnValue: 0) as int);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.Catch>? entities = const [], Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.Catch> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Catch>[]) as List<_i8.Catch>);
  @override
  List<_i8.Catch> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Catch>[]) as List<_i8.Catch>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Catch>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Catch>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Catch? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Catch? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Catch? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Catch> addSimpleListener(
          {void Function(_i8.Catch)? onAdd,
          void Function(_i8.Catch)? onDelete,
          void Function(_i8.Catch)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Catch>())
          as _i10.SimpleEntityListener<_i8.Catch>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CustomEntityManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomEntityManager extends _i1.Mock
    implements _i16.CustomEntityManager {
  MockCustomEntityManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.CustomEntity, _i8.CustomEntity) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.CustomEntity __p0, _i8.CustomEntity __p1) => 0)
          as int Function(_i8.CustomEntity, _i8.CustomEntity));
  @override
  Map<_i8.Id, _i8.CustomEntity> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i8.Id, _i8.CustomEntity>{})
          as Map<_i8.Id, _i8.CustomEntity>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.CustomEntity entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeCustomEntity_47()) as _i8.CustomEntity);
  @override
  _i8.Id id(_i8.CustomEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.CustomEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  String customValuesDisplayValue(
          List<_i8.CustomEntityValue>? values, _i44.BuildContext? context) =>
      (super.noSuchMethod(
          Invocation.method(#customValuesDisplayValue, [values, context]),
          returnValue: '') as String);
  @override
  List<_i8.CustomEntity> listSortedByName({String? filter}) => (super
      .noSuchMethod(Invocation.method(#listSortedByName, [], {#filter: filter}),
          returnValue: <_i8.CustomEntity>[]) as List<_i8.CustomEntity>);
  @override
  String displayName(_i44.BuildContext? context, _i8.CustomEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.CustomEntity>? entities = const [],
          Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.CustomEntity> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.CustomEntity>[]) as List<_i8.CustomEntity>);
  @override
  List<_i8.CustomEntity> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.CustomEntity>[]) as List<_i8.CustomEntity>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.CustomEntity? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.CustomEntity>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.CustomEntity>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.CustomEntity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.CustomEntity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.CustomEntity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.CustomEntity> addSimpleListener(
          {void Function(_i8.CustomEntity)? onAdd,
          void Function(_i8.CustomEntity)? onDelete,
          void Function(_i8.CustomEntity)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.CustomEntity>())
          as _i10.SimpleEntityListener<_i8.CustomEntity>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FishingSpotManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFishingSpotManager extends _i1.Mock
    implements _i17.FishingSpotManager {
  MockFishingSpotManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.FishingSpot, _i8.FishingSpot) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.FishingSpot __p0, _i8.FishingSpot __p1) => 0)
          as int Function(_i8.FishingSpot, _i8.FishingSpot));
  @override
  Map<_i8.Id, _i8.FishingSpot> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i8.Id, _i8.FishingSpot>{})
          as Map<_i8.Id, _i8.FishingSpot>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.FishingSpot entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeFishingSpot_48()) as _i8.FishingSpot);
  @override
  _i8.Id id(_i8.FishingSpot? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.FishingSpot? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  String displayName(_i44.BuildContext? context, _i8.FishingSpot? entity,
          {bool? includeLatLngLabels = true,
          bool? includeBodyOfWater = false}) =>
      (super.noSuchMethod(
          Invocation.method(#displayName, [
            context,
            entity
          ], {
            #includeLatLngLabels: includeLatLngLabels,
            #includeBodyOfWater: includeBodyOfWater
          }),
          returnValue: '') as String);
  @override
  void setImageName(_i8.FishingSpot? entity, String? imageName) =>
      super.noSuchMethod(Invocation.method(#setImageName, [entity, imageName]),
          returnValueForMissingStub: null);
  @override
  void clearImageName(_i8.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#clearImageName, [entity]),
          returnValueForMissingStub: null);
  @override
  bool matchesFilter(_i8.Id? id, String? filter,
          [_i44.BuildContext? context]) =>
      (super.noSuchMethod(
          Invocation.method(#matchesFilter, [id, filter, context]),
          returnValue: false) as bool);
  @override
  List<_i8.FishingSpot> listSortedByName({String? filter}) => (super
      .noSuchMethod(Invocation.method(#listSortedByName, [], {#filter: filter}),
          returnValue: <_i8.FishingSpot>[]) as List<_i8.FishingSpot>);
  @override
  _i8.FishingSpot? withinRadius(_i50.LatLng? latLng, [int? meters = 30]) =>
      (super.noSuchMethod(Invocation.method(#withinRadius, [latLng, meters]))
          as _i8.FishingSpot?);
  @override
  int numberOfCatches(_i8.Id? fishingSpotId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [fishingSpotId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(
          _i44.BuildContext? context, _i8.FishingSpot? fishingSpot) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMessage, [context, fishingSpot]),
          returnValue: '') as String);
  @override
  _i9.Future<bool> addOrUpdate(_i8.FishingSpot? entity,
          {_i49.File? imageFile,
          bool? compressImages = true,
          bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [
            entity
          ], {
            #imageFile: imageFile,
            #compressImages: compressImages,
            #notify: notify
          }),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.FishingSpot>? entities = const [],
          Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.FishingSpot> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.FishingSpot>[]) as List<_i8.FishingSpot>);
  @override
  List<_i8.FishingSpot> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.FishingSpot>[]) as List<_i8.FishingSpot>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.FishingSpot>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.FishingSpot>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.FishingSpot> addSimpleListener(
          {void Function(_i8.FishingSpot)? onAdd,
          void Function(_i8.FishingSpot)? onDelete,
          void Function(_i8.FishingSpot)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.FishingSpot>())
          as _i10.SimpleEntityListener<_i8.FishingSpot>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ImageManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageManager extends _i1.Mock implements _i18.ImageManager {
  MockImageManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i61.Uint8List?> image(_i44.BuildContext? context,
          {String? fileName, double? size}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #image, [context], {#fileName: fileName, #size: size}),
              returnValue: Future<_i61.Uint8List?>.value())
          as _i9.Future<_i61.Uint8List?>);
  @override
  _i9.Future<Map<_i49.File, _i61.Uint8List>> images(_i44.BuildContext? context,
          {List<String>? imageNames, double? size}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #images, [context], {#imageNames: imageNames, #size: size}),
              returnValue: Future<Map<_i49.File, _i61.Uint8List>>.value(
                  <_i49.File, _i61.Uint8List>{}))
          as _i9.Future<Map<_i49.File, _i61.Uint8List>>);
  @override
  _i9.Future<List<String>> save(List<_i49.File>? files,
          {bool? compress = true}) =>
      (super.noSuchMethod(
              Invocation.method(#save, [files], {#compress: compress}),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i9.Future<List<String>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocalDatabaseManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabaseManager extends _i1.Mock
    implements _i3.LocalDatabaseManager {
  MockLocalDatabaseManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> initialize({_i56.DatabaseExecutor? database}) => (super
      .noSuchMethod(Invocation.method(#initialize, [], {#database: database}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<List<dynamic>> commitBatch(void Function(_i56.Batch)? execute) =>
      (super.noSuchMethod(Invocation.method(#commitBatch, [execute]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i9.Future<List<dynamic>>);
  @override
  _i9.Future<bool> insert(String? tableName, Map<String, dynamic>? values) =>
      (super.noSuchMethod(Invocation.method(#insert, [tableName, values]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> insertOrReplace(
          String? tableName, Map<String, dynamic>? values) =>
      (super.noSuchMethod(
          Invocation.method(#insertOrReplace, [tableName, values]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(String? table,
          {String? where, List<dynamic>? whereArgs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<List<Map<String, dynamic>>> query(String? sql,
          [List<dynamic>? args]) =>
      (super.noSuchMethod(Invocation.method(#query, [sql, args]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i9.Future<List<Map<String, dynamic>>>);
  @override
  _i9.Future<bool> rawExists(String? query, [List<dynamic>? args]) =>
      (super.noSuchMethod(Invocation.method(#rawExists, [query, args]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> rawUpdate(String? query, [List<dynamic>? args]) =>
      (super.noSuchMethod(Invocation.method(#rawUpdate, [query, args]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> deleteEntity(_i8.Id? entityId, String? tableName) => (super
      .noSuchMethod(Invocation.method(#deleteEntity, [entityId, tableName]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<List<Map<String, dynamic>>> fetchAll(String? tableName) =>
      (super.noSuchMethod(Invocation.method(#fetchAll, [tableName]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i9.Future<List<Map<String, dynamic>>>);
  @override
  _i9.Future<void> replaceRows(
          String? tableName, List<Map<String, dynamic>>? newRows) =>
      (super.noSuchMethod(Invocation.method(#replaceRows, [tableName, newRows]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocationMonitor].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationMonitor extends _i1.Mock implements _i19.LocationMonitor {
  MockLocationMonitor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get distanceFilterMeters =>
      (super.noSuchMethod(Invocation.getter(#distanceFilterMeters),
          returnValue: 0) as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MethodManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodManager extends _i1.Mock implements _i20.MethodManager {
  MockMethodManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.Method, _i8.Method) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Method __p0, _i8.Method __p1) => 0)
          as int Function(_i8.Method, _i8.Method));
  @override
  Map<_i8.Id, _i8.Method> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Method>{}) as Map<_i8.Id, _i8.Method>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Method entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeMethod_49()) as _i8.Method);
  @override
  _i8.Id id(_i8.Method? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Method? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  int numberOfCatches(_i8.Id? methodId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [methodId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(_i44.BuildContext? context, _i8.Method? method) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, method]),
          returnValue: '') as String);
  @override
  List<_i8.Method> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Method>[]) as List<_i8.Method>);
  @override
  String displayName(_i44.BuildContext? context, _i8.Method? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.Method>? entities = const [], Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.Method> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Method>[]) as List<_i8.Method>);
  @override
  List<_i8.Method> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Method>[]) as List<_i8.Method>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Method? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Method>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Method>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Method? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Method? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Method? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Method> addSimpleListener(
          {void Function(_i8.Method)? onAdd,
          void Function(_i8.Method)? onDelete,
          void Function(_i8.Method)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Method>())
          as _i10.SimpleEntityListener<_i8.Method>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PreferenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceManager extends _i1.Mock implements _i62.PreferenceManager {
  MockPreferenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  _i9.Stream<void> get stream => (super.noSuchMethod(Invocation.getter(#stream),
      returnValue: Stream<void>.empty()) as _i9.Stream<void>);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic>? initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]))
          as _i9.StreamSubscription<dynamic>?);
  @override
  _i9.Future<void> put(String? key, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void putLocal(String? key, dynamic value) =>
      super.noSuchMethod(Invocation.method(#putLocal, [key, value]),
          returnValueForMissingStub: null);
  @override
  void putStringList(String? key, List<String>? value) =>
      super.noSuchMethod(Invocation.method(#putStringList, [key, value]),
          returnValueForMissingStub: null);
  @override
  List<String> stringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#stringList, [key]),
          returnValue: <String>[]) as List<String>);
  @override
  _i9.Future<void> putId(String? key, _i8.Id? value) =>
      (super.noSuchMethod(Invocation.method(#putId, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i8.Id? id(String? key) =>
      (super.noSuchMethod(Invocation.method(#id, [key])) as _i8.Id?);
  @override
  _i9.Future<void> putIdCollection(String? key, Iterable<_i8.Id>? value) =>
      (super.noSuchMethod(Invocation.method(#putIdCollection, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  List<_i8.Id> idList(String? key) =>
      (super.noSuchMethod(Invocation.method(#idList, [key]),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PropertiesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropertiesManager extends _i1.Mock implements _i21.PropertiesManager {
  MockPropertiesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get clientSenderEmail => (super
          .noSuchMethod(Invocation.getter(#clientSenderEmail), returnValue: '')
      as String);
  @override
  String get supportEmail =>
      (super.noSuchMethod(Invocation.getter(#supportEmail), returnValue: '')
          as String);
  @override
  String get sendGridApiKey =>
      (super.noSuchMethod(Invocation.getter(#sendGridApiKey), returnValue: '')
          as String);
  @override
  String get revenueCatApiKey =>
      (super.noSuchMethod(Invocation.getter(#revenueCatApiKey), returnValue: '')
          as String);
  @override
  String get visualCrossingApiKey =>
      (super.noSuchMethod(Invocation.getter(#visualCrossingApiKey),
          returnValue: '') as String);
  @override
  String get mapboxApiKey =>
      (super.noSuchMethod(Invocation.getter(#mapboxApiKey), returnValue: '')
          as String);
  @override
  String get feedbackTemplate =>
      (super.noSuchMethod(Invocation.getter(#feedbackTemplate), returnValue: '')
          as String);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ReportManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportManager extends _i1.Mock implements _i22.ReportManager {
  MockReportManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.Report, _i8.Report) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Report __p0, _i8.Report __p1) => 0)
          as int Function(_i8.Report, _i8.Report));
  @override
  Map<_i8.Id, _i8.Report> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Report>{}) as Map<_i8.Id, _i8.Report>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Report entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeReport_50()) as _i8.Report);
  @override
  _i8.Id id(_i8.Report? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Report? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  void removeAttachedBaits(_i8.Report? report, _i8.Id? baitId) => super
      .noSuchMethod(Invocation.method(#removeAttachedBaits, [report, baitId]),
          returnValueForMissingStub: null);
  @override
  bool removeFishingSpot(_i8.Report? report, _i8.FishingSpot? fishingSpot) =>
      (super.noSuchMethod(
          Invocation.method(#removeFishingSpot, [report, fishingSpot]),
          returnValue: false) as bool);
  @override
  bool removeSpecies(_i8.Report? report, _i8.Species? species) =>
      (super.noSuchMethod(Invocation.method(#removeSpecies, [report, species]),
          returnValue: false) as bool);
  @override
  List<_i8.Report> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Report>[]) as List<_i8.Report>);
  @override
  String displayName(_i44.BuildContext? context, _i8.Report? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.Report>? entities = const [], Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.Report> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Report>[]) as List<_i8.Report>);
  @override
  List<_i8.Report> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Report>[]) as List<_i8.Report>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Report? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Report>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Report>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Report? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Report? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Report? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Report> addSimpleListener(
          {void Function(_i8.Report)? onAdd,
          void Function(_i8.Report)? onDelete,
          void Function(_i8.Report)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Report>())
          as _i10.SimpleEntityListener<_i8.Report>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SpeciesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpeciesManager extends _i1.Mock implements _i23.SpeciesManager {
  MockSpeciesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.Species, _i8.Species) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Species __p0, _i8.Species __p1) => 0)
          as int Function(_i8.Species, _i8.Species));
  @override
  Map<_i8.Id, _i8.Species> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Species>{}) as Map<_i8.Id, _i8.Species>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Species entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeSpecies_51()) as _i8.Species);
  @override
  _i8.Id id(_i8.Species? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Species? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOfCatches(_i8.Id? speciesId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [speciesId]),
          returnValue: 0) as int);
  @override
  List<_i8.Species> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Species>[]) as List<_i8.Species>);
  @override
  String displayName(_i44.BuildContext? context, _i8.Species? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.Species>? entities = const [],
          Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.Species> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Species>[]) as List<_i8.Species>);
  @override
  List<_i8.Species> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Species>[]) as List<_i8.Species>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Species? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Species>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Species>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Species? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Species? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Species? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Species> addSimpleListener(
          {void Function(_i8.Species)? onAdd,
          void Function(_i8.Species)? onDelete,
          void Function(_i8.Species)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Species>())
          as _i10.SimpleEntityListener<_i8.Species>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SubscriptionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionManager extends _i1.Mock
    implements _i7.SubscriptionManager {
  MockSubscriptionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isFree =>
      (super.noSuchMethod(Invocation.getter(#isFree), returnValue: false)
          as bool);
  @override
  bool get isPro =>
      (super.noSuchMethod(Invocation.getter(#isPro), returnValue: false)
          as bool);
  @override
  _i9.Stream<void> get stream => (super.noSuchMethod(Invocation.getter(#stream),
      returnValue: Stream<void>.empty()) as _i9.Stream<void>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> purchaseSubscription(_i7.Subscription? sub) =>
      (super.noSuchMethod(Invocation.method(#purchaseSubscription, [sub]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i7.RestoreSubscriptionResult> restoreSubscription() =>
      (super.noSuchMethod(Invocation.method(#restoreSubscription, []),
              returnValue: Future<_i7.RestoreSubscriptionResult>.value(
                  _i7.RestoreSubscriptionResult.noSubscriptionsFound))
          as _i9.Future<_i7.RestoreSubscriptionResult>);
  @override
  _i9.Future<_i7.Subscriptions?> subscriptions() =>
      (super.noSuchMethod(Invocation.method(#subscriptions, []),
              returnValue: Future<_i7.Subscriptions?>.value())
          as _i9.Future<_i7.Subscriptions?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TimeManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeManager extends _i1.Mock implements _i24.TimeManager {
  MockTimeManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime get currentDateTime =>
      (super.noSuchMethod(Invocation.getter(#currentDateTime),
          returnValue: _FakeDateTime_52()) as DateTime);
  @override
  _i44.TimeOfDay get currentTime =>
      (super.noSuchMethod(Invocation.getter(#currentTime),
          returnValue: _FakeTimeOfDay_53()) as _i44.TimeOfDay);
  @override
  int get msSinceEpoch =>
      (super.noSuchMethod(Invocation.getter(#msSinceEpoch), returnValue: 0)
          as int);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TripManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripManager extends _i1.Mock implements _i25.TripManager {
  MockTripManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.Trip, _i8.Trip) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Trip __p0, _i8.Trip __p1) => 0)
          as int Function(_i8.Trip, _i8.Trip));
  @override
  Map<_i8.Id, _i8.Trip> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Trip>{}) as Map<_i8.Id, _i8.Trip>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Trip entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeTrip_54()) as _i8.Trip);
  @override
  _i8.Id id(_i8.Trip? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Trip? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  String displayName(_i44.BuildContext? context, _i8.Trip? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Trip? entity,
          {List<_i49.File>? imageFiles = const [], bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity],
              {#imageFiles: imageFiles, #notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  bool matchesFilter(_i8.Id? id, String? filter,
          [_i44.BuildContext? context]) =>
      (super.noSuchMethod(
          Invocation.method(#matchesFilter, [id, filter, context]),
          returnValue: false) as bool);
  @override
  String deleteMessage(_i44.BuildContext? context, _i8.Trip? trip) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, trip]),
          returnValue: '') as String);
  @override
  int numberOfCatches(_i8.Trip? trip) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [trip]),
          returnValue: 0) as int);
  @override
  List<String> allImageNames(_i8.Trip? trip) =>
      (super.noSuchMethod(Invocation.method(#allImageNames, [trip]),
          returnValue: <String>[]) as List<String>);
  @override
  bool isCatchIdInTrip(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#isCatchIdInTrip, [id]),
          returnValue: false) as bool);
  @override
  List<_i8.Trip> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Trip>[]) as List<_i8.Trip>);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.Trip>? entities = const [], Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.Trip> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Trip>[]) as List<_i8.Trip>);
  @override
  List<_i8.Trip> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Trip>[]) as List<_i8.Trip>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Trip>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Trip>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Trip? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Trip? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Trip? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Trip> addSimpleListener(
          {void Function(_i8.Trip)? onAdd,
          void Function(_i8.Trip)? onDelete,
          void Function(_i8.Trip)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Trip>())
          as _i10.SimpleEntityListener<_i8.Trip>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserPreferenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPreferenceManager extends _i1.Mock
    implements _i26.UserPreferenceManager {
  MockUserPreferenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  String get firestoreDocPath =>
      (super.noSuchMethod(Invocation.getter(#firestoreDocPath), returnValue: '')
          as String);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  List<_i8.Id> get atmosphereFieldIds =>
      (super.noSuchMethod(Invocation.getter(#atmosphereFieldIds),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  List<_i8.Id> get baitVariantFieldIds =>
      (super.noSuchMethod(Invocation.getter(#baitVariantFieldIds),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  List<_i8.Id> get catchFieldIds =>
      (super.noSuchMethod(Invocation.getter(#catchFieldIds),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  List<_i8.Id> get tripFieldIds =>
      (super.noSuchMethod(Invocation.getter(#tripFieldIds),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  bool get autoFetchAtmosphere =>
      (super.noSuchMethod(Invocation.getter(#autoFetchAtmosphere),
          returnValue: false) as bool);
  @override
  bool get didRateApp =>
      (super.noSuchMethod(Invocation.getter(#didRateApp), returnValue: false)
          as bool);
  @override
  bool get didOnboard =>
      (super.noSuchMethod(Invocation.getter(#didOnboard), returnValue: false)
          as bool);
  @override
  bool get isPro =>
      (super.noSuchMethod(Invocation.getter(#isPro), returnValue: false)
          as bool);
  @override
  Map<String, dynamic> get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i9.Stream<void> get stream => (super.noSuchMethod(Invocation.getter(#stream),
      returnValue: Stream<void>.empty()) as _i9.Stream<void>);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> setAtmosphereFieldIds(List<_i8.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setAtmosphereFieldIds, [ids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setBaitVariantFieldIds(List<_i8.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setBaitVariantFieldIds, [ids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setCatchFieldIds(List<_i8.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setCatchFieldIds, [ids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setTripFieldIds(List<_i8.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setTripFieldIds, [ids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setCatchLengthSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setCatchLengthSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setCatchWeightSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setCatchWeightSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setWaterDepthSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setWaterDepthSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setWaterTemperatureSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(
          Invocation.method(#setWaterTemperatureSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setAirTemperatureSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setAirTemperatureSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setAirPressureSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setAirPressureSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setAirVisibilitySystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setAirVisibilitySystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setWindSpeedSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setWindSpeedSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setAutoFetchAtmosphere(bool? autoFetch) => (super
      .noSuchMethod(Invocation.method(#setAutoFetchAtmosphere, [autoFetch]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setVerificationEmailSentAt(int? timestamp) => (super
      .noSuchMethod(Invocation.method(#setVerificationEmailSentAt, [timestamp]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setRateTimerStartedAt(int? timestamp) => (super.noSuchMethod(
      Invocation.method(#setRateTimerStartedAt, [timestamp]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setDidRateApp(bool? rated) =>
      (super.noSuchMethod(Invocation.method(#setDidRateApp, [rated]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setDidOnboard(bool? onboarded) =>
      (super.noSuchMethod(Invocation.method(#setDidOnboard, [onboarded]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setSelectedReportId(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#setSelectedReportId, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setMapType(String? type) =>
      (super.noSuchMethod(Invocation.method(#setMapType, [type]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic>? initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]))
          as _i9.StreamSubscription<dynamic>?);
  @override
  _i9.Future<void> put(String? key, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void putLocal(String? key, dynamic value) =>
      super.noSuchMethod(Invocation.method(#putLocal, [key, value]),
          returnValueForMissingStub: null);
  @override
  void putStringList(String? key, List<String>? value) =>
      super.noSuchMethod(Invocation.method(#putStringList, [key, value]),
          returnValueForMissingStub: null);
  @override
  List<String> stringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#stringList, [key]),
          returnValue: <String>[]) as List<String>);
  @override
  _i9.Future<void> putId(String? key, _i8.Id? value) =>
      (super.noSuchMethod(Invocation.method(#putId, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i8.Id? id(String? key) =>
      (super.noSuchMethod(Invocation.method(#id, [key])) as _i8.Id?);
  @override
  _i9.Future<void> putIdCollection(String? key, Iterable<_i8.Id>? value) =>
      (super.noSuchMethod(Invocation.method(#putIdCollection, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  List<_i8.Id> idList(String? key) =>
      (super.noSuchMethod(Invocation.method(#idList, [key]),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [WaterClarityManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockWaterClarityManager extends _i1.Mock
    implements _i27.WaterClarityManager {
  MockWaterClarityManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.WaterClarity, _i8.WaterClarity) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.WaterClarity __p0, _i8.WaterClarity __p1) => 0)
          as int Function(_i8.WaterClarity, _i8.WaterClarity));
  @override
  Map<_i8.Id, _i8.WaterClarity> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i8.Id, _i8.WaterClarity>{})
          as Map<_i8.Id, _i8.WaterClarity>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.WaterClarity entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeWaterClarity_55()) as _i8.WaterClarity);
  @override
  _i8.Id id(_i8.WaterClarity? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.WaterClarity? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  int numberOfCatches(_i8.Id? clarityId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [clarityId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(_i44.BuildContext? context, _i8.WaterClarity? clarity) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, clarity]),
          returnValue: '') as String);
  @override
  List<_i8.WaterClarity> listSortedByName({String? filter}) => (super
      .noSuchMethod(Invocation.method(#listSortedByName, [], {#filter: filter}),
          returnValue: <_i8.WaterClarity>[]) as List<_i8.WaterClarity>);
  @override
  String displayName(_i44.BuildContext? context, _i8.WaterClarity? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  bool idsMatchesFilter(List<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i8.Id> idSet(
          {Iterable<_i8.WaterClarity>? entities = const [],
          Iterable<_i8.Id>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i8.Id>{}) as Set<_i8.Id>);
  @override
  List<_i8.WaterClarity> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.WaterClarity>[]) as List<_i8.WaterClarity>);
  @override
  List<_i8.WaterClarity> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.WaterClarity>[]) as List<_i8.WaterClarity>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.WaterClarity? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<E extends _i58.GeneratedMessage>(
          _i8.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.WaterClarity>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.WaterClarity>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.WaterClarity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.WaterClarity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.WaterClarity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.WaterClarity> addSimpleListener(
          {void Function(_i8.WaterClarity)? onAdd,
          void Function(_i8.WaterClarity)? onDelete,
          void Function(_i8.WaterClarity)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.WaterClarity>())
          as _i10.SimpleEntityListener<_i8.WaterClarity>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FilePickerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePickerWrapper extends _i1.Mock implements _i28.FilePickerWrapper {
  MockFilePickerWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i63.FilePickerResult?> pickFiles(
          {_i63.FileType? type = _i63.FileType.any,
          List<String>? allowedExtensions,
          bool? allowMultiple = false}) =>
      (super.noSuchMethod(
              Invocation.method(#pickFiles, [], {
                #type: type,
                #allowedExtensions: allowedExtensions,
                #allowMultiple: allowMultiple
              }),
              returnValue: Future<_i63.FilePickerResult?>.value())
          as _i9.Future<_i63.FilePickerResult?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebaseAuthWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthWrapper extends _i1.Mock
    implements _i29.FirebaseAuthWrapper {
  MockFirebaseAuthWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<_i45.User?> authStateChanges() =>
      (super.noSuchMethod(Invocation.method(#authStateChanges, []),
          returnValue: Stream<_i45.User?>.empty()) as _i9.Stream<_i45.User?>);
  @override
  _i9.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i45.UserCredential> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i45.UserCredential>.value(_FakeUserCredential_56()))
          as _i9.Future<_i45.UserCredential>);
  @override
  _i9.Future<_i45.UserCredential> createUserWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#createUserWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i45.UserCredential>.value(_FakeUserCredential_56()))
          as _i9.Future<_i45.UserCredential>);
  @override
  _i9.Future<void> sendPasswordResetEmail(String? email) =>
      (super.noSuchMethod(Invocation.method(#sendPasswordResetEmail, [email]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebaseStorageWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorageWrapper extends _i1.Mock
    implements _i30.FirebaseStorageWrapper {
  MockFirebaseStorageWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i46.Reference ref([String? path]) =>
      (super.noSuchMethod(Invocation.method(#ref, [path]),
          returnValue: _FakeReference_57()) as _i46.Reference);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebaseWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseWrapper extends _i1.Mock implements _i31.FirebaseWrapper {
  MockFirebaseWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> initializeApp() =>
      (super.noSuchMethod(Invocation.method(#initializeApp, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirestoreWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreWrapper extends _i1.Mock implements _i2.FirestoreWrapper {
  MockFirestoreWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i47.CollectionReference<Map<String, dynamic>> collection(String? path) =>
      (super.noSuchMethod(Invocation.method(#collection, [path]),
              returnValue: _FakeCollectionReference_58<Map<String, dynamic>>())
          as _i47.CollectionReference<Map<String, dynamic>>);
  @override
  _i47.DocumentReference<Map<String, dynamic>> doc(String? path) =>
      (super.noSuchMethod(Invocation.method(#doc, [path]),
              returnValue: _FakeDocumentReference_59<Map<String, dynamic>>())
          as _i47.DocumentReference<Map<String, dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GlobalKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalKey<T extends _i44.State<_i44.StatefulWidget>> extends _i1.Mock
    implements _i44.GlobalKey<T> {
  MockGlobalKey() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}

/// A class which mocks [HttpWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpWrapper extends _i1.Mock implements _i32.HttpWrapper {
  MockHttpWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i48.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i64.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i48.Response>.value(_FakeResponse_60()))
          as _i9.Future<_i48.Response>);
  @override
  _i9.Future<_i48.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i48.Response>.value(_FakeResponse_60()))
          as _i9.Future<_i48.Response>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ImageCompressWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageCompressWrapper extends _i1.Mock
    implements _i33.ImageCompressWrapper {
  MockImageCompressWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i61.Uint8List?> compress(String? path, int? quality, int? size) =>
      (super.noSuchMethod(Invocation.method(#compress, [path, quality, size]),
              returnValue: Future<_i61.Uint8List?>.value())
          as _i9.Future<_i61.Uint8List?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockIoWrapper extends _i1.Mock implements _i35.IoWrapper {
  MockIoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAndroid =>
      (super.noSuchMethod(Invocation.getter(#isAndroid), returnValue: false)
          as bool);
  @override
  bool get isIOS =>
      (super.noSuchMethod(Invocation.getter(#isIOS), returnValue: false)
          as bool);
  @override
  _i49.Directory directory(String? path) =>
      (super.noSuchMethod(Invocation.method(#directory, [path]),
          returnValue: _FakeDirectory_61()) as _i49.Directory);
  @override
  _i49.File file(String? path) =>
      (super.noSuchMethod(Invocation.method(#file, [path]),
          returnValue: _FakeFile_62()) as _i49.File);
  @override
  _i9.Future<bool> isConnected() =>
      (super.noSuchMethod(Invocation.method(#isConnected, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MapboxMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapboxMapController extends _i1.Mock
    implements _i50.MapboxMapController {
  MockMapboxMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i50.ArgumentCallbacks<_i50.Symbol> get onSymbolTapped =>
      (super.noSuchMethod(Invocation.getter(#onSymbolTapped),
              returnValue: _FakeArgumentCallbacks_63<_i50.Symbol>())
          as _i50.ArgumentCallbacks<_i50.Symbol>);
  @override
  _i50.ArgumentCallbacks<_i50.Circle> get onCircleTapped =>
      (super.noSuchMethod(Invocation.getter(#onCircleTapped),
              returnValue: _FakeArgumentCallbacks_63<_i50.Circle>())
          as _i50.ArgumentCallbacks<_i50.Circle>);
  @override
  _i50.ArgumentCallbacks<_i50.Fill> get onFillTapped =>
      (super.noSuchMethod(Invocation.getter(#onFillTapped),
              returnValue: _FakeArgumentCallbacks_63<_i50.Fill>())
          as _i50.ArgumentCallbacks<_i50.Fill>);
  @override
  _i50.ArgumentCallbacks<_i50.Symbol> get onInfoWindowTapped =>
      (super.noSuchMethod(Invocation.getter(#onInfoWindowTapped),
              returnValue: _FakeArgumentCallbacks_63<_i50.Symbol>())
          as _i50.ArgumentCallbacks<_i50.Symbol>);
  @override
  _i50.ArgumentCallbacks<_i50.Line> get onLineTapped =>
      (super.noSuchMethod(Invocation.getter(#onLineTapped),
              returnValue: _FakeArgumentCallbacks_63<_i50.Line>())
          as _i50.ArgumentCallbacks<_i50.Line>);
  @override
  Set<_i50.Symbol> get symbols =>
      (super.noSuchMethod(Invocation.getter(#symbols),
          returnValue: <_i50.Symbol>{}) as Set<_i50.Symbol>);
  @override
  Set<_i50.Line> get lines =>
      (super.noSuchMethod(Invocation.getter(#lines), returnValue: <_i50.Line>{})
          as Set<_i50.Line>);
  @override
  Set<_i50.Circle> get circles =>
      (super.noSuchMethod(Invocation.getter(#circles),
          returnValue: <_i50.Circle>{}) as Set<_i50.Circle>);
  @override
  Set<_i50.Fill> get fills =>
      (super.noSuchMethod(Invocation.getter(#fills), returnValue: <_i50.Fill>{})
          as Set<_i50.Fill>);
  @override
  bool get isCameraMoving => (super
          .noSuchMethod(Invocation.getter(#isCameraMoving), returnValue: false)
      as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i44.Widget buildView(
          Map<String, dynamic>? creationParams,
          _i59.OnPlatformViewCreatedCallback? onPlatformViewCreated,
          Set<_i65.Factory<_i66.OneSequenceGestureRecognizer>>?
              gestureRecognizers) =>
      (super.noSuchMethod(
          Invocation.method(#buildView,
              [creationParams, onPlatformViewCreated, gestureRecognizers]),
          returnValue: _FakeWidget_64()) as _i44.Widget);
  @override
  _i9.Future<bool?> animateCamera(_i50.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#animateCamera, [cameraUpdate]),
          returnValue: Future<bool?>.value()) as _i9.Future<bool?>);
  @override
  _i9.Future<bool?> moveCamera(_i50.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#moveCamera, [cameraUpdate]),
          returnValue: Future<bool?>.value()) as _i9.Future<bool?>);
  @override
  _i9.Future<void> updateMyLocationTrackingMode(
          _i50.MyLocationTrackingMode? myLocationTrackingMode) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateMyLocationTrackingMode, [myLocationTrackingMode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> matchMapLanguageWithDeviceDefault() => (super.noSuchMethod(
      Invocation.method(#matchMapLanguageWithDeviceDefault, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateContentInsets(_i44.EdgeInsets? insets,
          [bool? animated = false]) =>
      (super.noSuchMethod(
          Invocation.method(#updateContentInsets, [insets, animated]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setMapLanguage(String? language) =>
      (super.noSuchMethod(Invocation.method(#setMapLanguage, [language]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setTelemetryEnabled(bool? enabled) =>
      (super.noSuchMethod(Invocation.method(#setTelemetryEnabled, [enabled]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<bool> getTelemetryEnabled() =>
      (super.noSuchMethod(Invocation.method(#getTelemetryEnabled, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<_i50.Symbol> addSymbol(_i50.SymbolOptions? options,
          [Map<dynamic, dynamic>? data]) =>
      (super.noSuchMethod(Invocation.method(#addSymbol, [options, data]),
              returnValue: Future<_i50.Symbol>.value(_FakeSymbol_65()))
          as _i9.Future<_i50.Symbol>);
  @override
  _i9.Future<List<_i50.Symbol>> addSymbols(List<_i50.SymbolOptions>? options,
          [List<Map<dynamic, dynamic>>? data]) =>
      (super.noSuchMethod(Invocation.method(#addSymbols, [options, data]),
              returnValue: Future<List<_i50.Symbol>>.value(<_i50.Symbol>[]))
          as _i9.Future<List<_i50.Symbol>>);
  @override
  _i9.Future<void> updateSymbol(
          _i50.Symbol? symbol, _i50.SymbolOptions? changes) =>
      (super.noSuchMethod(Invocation.method(#updateSymbol, [symbol, changes]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i50.LatLng> getSymbolLatLng(_i50.Symbol? symbol) =>
      (super.noSuchMethod(Invocation.method(#getSymbolLatLng, [symbol]),
              returnValue: Future<_i50.LatLng>.value(_FakeLatLng_66()))
          as _i9.Future<_i50.LatLng>);
  @override
  _i9.Future<void> removeSymbol(_i50.Symbol? symbol) =>
      (super.noSuchMethod(Invocation.method(#removeSymbol, [symbol]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> removeSymbols(Iterable<_i50.Symbol>? symbols) =>
      (super.noSuchMethod(Invocation.method(#removeSymbols, [symbols]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> clearSymbols() =>
      (super.noSuchMethod(Invocation.method(#clearSymbols, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i50.Line> addLine(_i50.LineOptions? options,
          [Map<dynamic, dynamic>? data]) =>
      (super.noSuchMethod(Invocation.method(#addLine, [options, data]),
              returnValue: Future<_i50.Line>.value(_FakeLine_67()))
          as _i9.Future<_i50.Line>);
  @override
  _i9.Future<List<_i50.Line>> addLines(List<_i50.LineOptions>? options,
          [List<Map<dynamic, dynamic>>? data]) =>
      (super.noSuchMethod(Invocation.method(#addLines, [options, data]),
              returnValue: Future<List<_i50.Line>>.value(<_i50.Line>[]))
          as _i9.Future<List<_i50.Line>>);
  @override
  _i9.Future<void> updateLine(_i50.Line? line, _i50.LineOptions? changes) =>
      (super.noSuchMethod(Invocation.method(#updateLine, [line, changes]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<List<_i50.LatLng>> getLineLatLngs(_i50.Line? line) =>
      (super.noSuchMethod(Invocation.method(#getLineLatLngs, [line]),
              returnValue: Future<List<_i50.LatLng>>.value(<_i50.LatLng>[]))
          as _i9.Future<List<_i50.LatLng>>);
  @override
  _i9.Future<void> removeLine(_i50.Line? line) =>
      (super.noSuchMethod(Invocation.method(#removeLine, [line]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> removeLines(Iterable<_i50.Line>? lines) =>
      (super.noSuchMethod(Invocation.method(#removeLines, [lines]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> clearLines() =>
      (super.noSuchMethod(Invocation.method(#clearLines, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i50.Circle> addCircle(_i50.CircleOptions? options,
          [Map<dynamic, dynamic>? data]) =>
      (super.noSuchMethod(Invocation.method(#addCircle, [options, data]),
              returnValue: Future<_i50.Circle>.value(_FakeCircle_68()))
          as _i9.Future<_i50.Circle>);
  @override
  _i9.Future<List<_i50.Circle>> addCircles(List<_i50.CircleOptions>? options,
          [List<Map<dynamic, dynamic>>? data]) =>
      (super.noSuchMethod(Invocation.method(#addCircles, [options, data]),
              returnValue: Future<List<_i50.Circle>>.value(<_i50.Circle>[]))
          as _i9.Future<List<_i50.Circle>>);
  @override
  _i9.Future<void> updateCircle(
          _i50.Circle? circle, _i50.CircleOptions? changes) =>
      (super.noSuchMethod(Invocation.method(#updateCircle, [circle, changes]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i50.LatLng> getCircleLatLng(_i50.Circle? circle) =>
      (super.noSuchMethod(Invocation.method(#getCircleLatLng, [circle]),
              returnValue: Future<_i50.LatLng>.value(_FakeLatLng_66()))
          as _i9.Future<_i50.LatLng>);
  @override
  _i9.Future<void> removeCircle(_i50.Circle? circle) =>
      (super.noSuchMethod(Invocation.method(#removeCircle, [circle]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> removeCircles(Iterable<_i50.Circle>? circles) =>
      (super.noSuchMethod(Invocation.method(#removeCircles, [circles]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> clearCircles() =>
      (super.noSuchMethod(Invocation.method(#clearCircles, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i50.Fill> addFill(_i50.FillOptions? options,
          [Map<dynamic, dynamic>? data]) =>
      (super.noSuchMethod(Invocation.method(#addFill, [options, data]),
              returnValue: Future<_i50.Fill>.value(_FakeFill_69()))
          as _i9.Future<_i50.Fill>);
  @override
  _i9.Future<List<_i50.Fill>> addFills(List<_i50.FillOptions>? options,
          [List<Map<dynamic, dynamic>>? data]) =>
      (super.noSuchMethod(Invocation.method(#addFills, [options, data]),
              returnValue: Future<List<_i50.Fill>>.value(<_i50.Fill>[]))
          as _i9.Future<List<_i50.Fill>>);
  @override
  _i9.Future<void> updateFill(_i50.Fill? fill, _i50.FillOptions? changes) =>
      (super.noSuchMethod(Invocation.method(#updateFill, [fill, changes]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> clearFills() =>
      (super.noSuchMethod(Invocation.method(#clearFills, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> removeFill(_i50.Fill? fill) =>
      (super.noSuchMethod(Invocation.method(#removeFill, [fill]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> removeFills(Iterable<_i50.Fill>? fills) =>
      (super.noSuchMethod(Invocation.method(#removeFills, [fills]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<List<dynamic>> queryRenderedFeatures(_i51.Point<double>? point,
          List<String>? layerIds, List<Object>? filter) =>
      (super.noSuchMethod(
          Invocation.method(#queryRenderedFeatures, [point, layerIds, filter]),
          returnValue:
              Future<List<dynamic>>.value(<dynamic>[])) as _i9
          .Future<List<dynamic>>);
  @override
  _i9.Future<List<dynamic>> queryRenderedFeaturesInRect(
          _i67.Rect? rect, List<String>? layerIds, String? filter) =>
      (super.noSuchMethod(
              Invocation.method(
                  #queryRenderedFeaturesInRect, [rect, layerIds, filter]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i9.Future<List<dynamic>>);
  @override
  _i9.Future<dynamic> invalidateAmbientCache() =>
      (super.noSuchMethod(Invocation.method(#invalidateAmbientCache, []),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<_i50.LatLng?> requestMyLocationLatLng() => (super.noSuchMethod(
      Invocation.method(#requestMyLocationLatLng, []),
      returnValue: Future<_i50.LatLng?>.value()) as _i9.Future<_i50.LatLng?>);
  @override
  _i9.Future<_i50.LatLngBounds> getVisibleRegion() => (super.noSuchMethod(
          Invocation.method(#getVisibleRegion, []),
          returnValue: Future<_i50.LatLngBounds>.value(_FakeLatLngBounds_70()))
      as _i9.Future<_i50.LatLngBounds>);
  @override
  _i9.Future<void> addImage(String? name, _i61.Uint8List? bytes,
          [bool? sdf = false]) =>
      (super.noSuchMethod(Invocation.method(#addImage, [name, bytes, sdf]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setSymbolIconAllowOverlap(bool? enable) => (super
      .noSuchMethod(Invocation.method(#setSymbolIconAllowOverlap, [enable]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setSymbolIconIgnorePlacement(bool? enable) => (super
      .noSuchMethod(Invocation.method(#setSymbolIconIgnorePlacement, [enable]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setSymbolTextAllowOverlap(bool? enable) => (super
      .noSuchMethod(Invocation.method(#setSymbolTextAllowOverlap, [enable]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setSymbolTextIgnorePlacement(bool? enable) => (super
      .noSuchMethod(Invocation.method(#setSymbolTextIgnorePlacement, [enable]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> addImageSource(String? imageSourceId, _i61.Uint8List? bytes,
          _i50.LatLngQuad? coordinates) =>
      (super.noSuchMethod(
          Invocation.method(
              #addImageSource, [imageSourceId, bytes, coordinates]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> removeImageSource(String? imageSourceId) => (super
      .noSuchMethod(Invocation.method(#removeImageSource, [imageSourceId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> addLayer(String? imageLayerId, String? imageSourceId) =>
      (super.noSuchMethod(
          Invocation.method(#addLayer, [imageLayerId, imageSourceId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> addLayerBelow(
          String? imageLayerId, String? imageSourceId, String? belowLayerId) =>
      (super.noSuchMethod(
          Invocation.method(
              #addLayerBelow, [imageLayerId, imageSourceId, belowLayerId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> removeLayer(String? imageLayerId) =>
      (super.noSuchMethod(Invocation.method(#removeLayer, [imageLayerId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i51.Point<num>> toScreenLocation(_i50.LatLng? latLng) =>
      (super.noSuchMethod(Invocation.method(#toScreenLocation, [latLng]),
              returnValue: Future<_i51.Point<num>>.value(_FakePoint_71<num>()))
          as _i9.Future<_i51.Point<num>>);
  @override
  _i9.Future<List<_i51.Point<num>>> toScreenLocationBatch(
          Iterable<_i50.LatLng>? latLngs) =>
      (super.noSuchMethod(Invocation.method(#toScreenLocationBatch, [latLngs]),
              returnValue:
                  Future<List<_i51.Point<num>>>.value(<_i51.Point<num>>[]))
          as _i9.Future<List<_i51.Point<num>>>);
  @override
  _i9.Future<_i50.LatLng> toLatLng(_i51.Point<num>? screenLocation) =>
      (super.noSuchMethod(Invocation.method(#toLatLng, [screenLocation]),
              returnValue: Future<_i50.LatLng>.value(_FakeLatLng_66()))
          as _i9.Future<_i50.LatLng>);
  @override
  _i9.Future<double> getMetersPerPixelAtLatitude(double? latitude) => (super
      .noSuchMethod(Invocation.method(#getMetersPerPixelAtLatitude, [latitude]),
          returnValue: Future<double>.value(0.0)) as _i9.Future<double>);
  @override
  void addListener(_i67.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i67.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PackageInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfoWrapper extends _i1.Mock
    implements _i36.PackageInfoWrapper {
  MockPackageInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i52.PackageInfo> fromPlatform() => (super.noSuchMethod(
          Invocation.method(#fromPlatform, []),
          returnValue: Future<_i52.PackageInfo>.value(_FakePackageInfo_72()))
      as _i9.Future<_i52.PackageInfo>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PathProviderWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProviderWrapper extends _i1.Mock
    implements _i37.PathProviderWrapper {
  MockPathProviderWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<String> get appDocumentsPath =>
      (super.noSuchMethod(Invocation.getter(#appDocumentsPath),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<String> get temporaryPath =>
      (super.noSuchMethod(Invocation.getter(#temporaryPath),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PermissionHandlerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionHandlerWrapper extends _i1.Mock
    implements _i38.PermissionHandlerWrapper {
  MockPermissionHandlerWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> get isLocationGranted =>
      (super.noSuchMethod(Invocation.getter(#isLocationGranted),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> requestLocation() =>
      (super.noSuchMethod(Invocation.method(#requestLocation, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> requestPhotos() =>
      (super.noSuchMethod(Invocation.method(#requestPhotos, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> openSettings() =>
      (super.noSuchMethod(Invocation.method(#openSettings, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PhotoManagerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoManagerWrapper extends _i1.Mock
    implements _i39.PhotoManagerWrapper {
  MockPhotoManagerWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i55.AssetPathEntity?> getAllAssetPathEntity(
          _i55.RequestType? type) =>
      (super.noSuchMethod(Invocation.method(#getAllAssetPathEntity, [type]),
              returnValue: Future<_i55.AssetPathEntity?>.value())
          as _i9.Future<_i55.AssetPathEntity?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PurchasesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchasesWrapper extends _i1.Mock implements _i40.PurchasesWrapper {
  MockPurchasesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  void addPurchaserInfoUpdateListener(
          dynamic Function(_i53.PurchaserInfo)? listener) =>
      super.noSuchMethod(
          Invocation.method(#addPurchaserInfoUpdateListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> setup(String? apiKey) =>
      (super.noSuchMethod(Invocation.method(#setup, [apiKey]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void setDebugEnabled(bool? enabled) =>
      super.noSuchMethod(Invocation.method(#setDebugEnabled, [enabled]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i53.Offerings> getOfferings() =>
      (super.noSuchMethod(Invocation.method(#getOfferings, []),
              returnValue: Future<_i53.Offerings>.value(_FakeOfferings_73()))
          as _i9.Future<_i53.Offerings>);
  @override
  _i9.Future<_i53.PurchaserInfo> getPurchaserInfo() =>
      (super.noSuchMethod(Invocation.method(#getPurchaserInfo, []),
              returnValue:
                  Future<_i53.PurchaserInfo>.value(_FakePurchaserInfo_74()))
          as _i9.Future<_i53.PurchaserInfo>);
  @override
  _i9.Future<_i53.LogInResult> logIn(String? appUserId) => (super.noSuchMethod(
          Invocation.method(#logIn, [appUserId]),
          returnValue: Future<_i53.LogInResult>.value(_FakeLogInResult_75()))
      as _i9.Future<_i53.LogInResult>);
  @override
  _i9.Future<_i53.PurchaserInfo> purchasePackage(_i53.Package? package) =>
      (super.noSuchMethod(Invocation.method(#purchasePackage, [package]),
              returnValue:
                  Future<_i53.PurchaserInfo>.value(_FakePurchaserInfo_74()))
          as _i9.Future<_i53.PurchaserInfo>);
  @override
  _i9.Future<_i53.PurchaserInfo> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
              returnValue:
                  Future<_i53.PurchaserInfo>.value(_FakePurchaserInfo_74()))
          as _i9.Future<_i53.PurchaserInfo>);
  @override
  _i9.Future<_i53.PurchaserInfo> restoreTransactions() =>
      (super.noSuchMethod(Invocation.method(#restoreTransactions, []),
              returnValue:
                  Future<_i53.PurchaserInfo>.value(_FakePurchaserInfo_74()))
          as _i9.Future<_i53.PurchaserInfo>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ServicesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockServicesWrapper extends _i1.Mock implements _i41.ServicesWrapper {
  MockServicesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i54.MethodChannel methodChannel(String? name) =>
      (super.noSuchMethod(Invocation.method(#methodChannel, [name]),
          returnValue: _FakeMethodChannel_76()) as _i54.MethodChannel);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SharedPreferencesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesWrapper extends _i1.Mock
    implements _i42.SharedPreferencesWrapper {
  MockSharedPreferencesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> remove(String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UrlLauncherWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherWrapper extends _i1.Mock
    implements _i43.UrlLauncherWrapper {
  MockUrlLauncherWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> canLaunch(String? url) =>
      (super.noSuchMethod(Invocation.method(#canLaunch, [url]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> launch(String? url) =>
      (super.noSuchMethod(Invocation.method(#launch, [url]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AssetPathEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetPathEntity extends _i1.Mock implements _i55.AssetPathEntity {
  MockAssetPathEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  set id(String? _id) => super.noSuchMethod(Invocation.setter(#id, _id),
      returnValueForMissingStub: null);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  set name(String? _name) => super.noSuchMethod(Invocation.setter(#name, _name),
      returnValueForMissingStub: null);
  @override
  int get assetCount =>
      (super.noSuchMethod(Invocation.getter(#assetCount), returnValue: 0)
          as int);
  @override
  set assetCount(int? _assetCount) =>
      super.noSuchMethod(Invocation.setter(#assetCount, _assetCount),
          returnValueForMissingStub: null);
  @override
  int get albumType =>
      (super.noSuchMethod(Invocation.getter(#albumType), returnValue: 0)
          as int);
  @override
  set albumType(int? _albumType) =>
      super.noSuchMethod(Invocation.setter(#albumType, _albumType),
          returnValueForMissingStub: null);
  @override
  _i55.FilterOptionGroup get filterOption =>
      (super.noSuchMethod(Invocation.getter(#filterOption),
          returnValue: _FakeFilterOptionGroup_77()) as _i55.FilterOptionGroup);
  @override
  set filterOption(_i55.FilterOptionGroup? _filterOption) =>
      super.noSuchMethod(Invocation.setter(#filterOption, _filterOption),
          returnValueForMissingStub: null);
  @override
  set lastModified(DateTime? _lastModified) =>
      super.noSuchMethod(Invocation.setter(#lastModified, _lastModified),
          returnValueForMissingStub: null);
  @override
  bool get isAll =>
      (super.noSuchMethod(Invocation.getter(#isAll), returnValue: false)
          as bool);
  @override
  set isAll(bool? _isAll) =>
      super.noSuchMethod(Invocation.setter(#isAll, _isAll),
          returnValueForMissingStub: null);
  @override
  _i55.RequestType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _FakeRequestType_78()) as _i55.RequestType);
  @override
  set type(_i55.RequestType? type) =>
      super.noSuchMethod(Invocation.setter(#type, type),
          returnValueForMissingStub: null);
  @override
  int get typeInt =>
      (super.noSuchMethod(Invocation.getter(#typeInt), returnValue: 0) as int);
  @override
  set typeInt(int? typeInt) =>
      super.noSuchMethod(Invocation.setter(#typeInt, typeInt),
          returnValueForMissingStub: null);
  @override
  _i9.Future<List<_i55.AssetEntity>> get assetList =>
      (super.noSuchMethod(Invocation.getter(#assetList),
              returnValue:
                  Future<List<_i55.AssetEntity>>.value(<_i55.AssetEntity>[]))
          as _i9.Future<List<_i55.AssetEntity>>);
  @override
  _i9.Future<void> refreshPathProperties({bool? maxDateTimeToNow = true}) =>
      (super.noSuchMethod(
          Invocation.method(#refreshPathProperties, [],
              {#maxDateTimeToNow: maxDateTimeToNow}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<List<_i55.AssetEntity>> getAssetListPaged(
          int? page, int? pageSize) =>
      (super.noSuchMethod(
              Invocation.method(#getAssetListPaged, [page, pageSize]),
              returnValue:
                  Future<List<_i55.AssetEntity>>.value(<_i55.AssetEntity>[]))
          as _i9.Future<List<_i55.AssetEntity>>);
  @override
  _i9.Future<List<_i55.AssetEntity>> getAssetListRange(
          {int? start, int? end}) =>
      (super.noSuchMethod(
          Invocation.method(#getAssetListRange, [], {#start: start, #end: end}),
          returnValue:
              Future<List<_i55.AssetEntity>>.value(<_i55.AssetEntity>[])) as _i9
          .Future<List<_i55.AssetEntity>>);
  @override
  _i9.Future<List<_i55.AssetPathEntity>> getSubPathList() =>
      (super.noSuchMethod(Invocation.method(#getSubPathList, []),
              returnValue: Future<List<_i55.AssetPathEntity>>.value(
                  <_i55.AssetPathEntity>[]))
          as _i9.Future<List<_i55.AssetPathEntity>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Batch].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatch extends _i1.Mock implements _i56.Batch {
  MockBatch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<List<Object?>> commit(
          {bool? exclusive, bool? noResult, bool? continueOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#commit, [], {
                #exclusive: exclusive,
                #noResult: noResult,
                #continueOnError: continueOnError
              }),
              returnValue: Future<List<Object?>>.value(<Object?>[]))
          as _i9.Future<List<Object?>>);
  @override
  void rawInsert(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawInsert, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void insert(String? table, Map<String, Object?>? values,
          {String? nullColumnHack,
          _i56.ConflictAlgorithm? conflictAlgorithm}) =>
      super.noSuchMethod(
          Invocation.method(#insert, [
            table,
            values
          ], {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValueForMissingStub: null);
  @override
  void rawUpdate(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawUpdate, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void update(String? table, Map<String, Object?>? values,
          {String? where,
          List<Object?>? whereArgs,
          _i56.ConflictAlgorithm? conflictAlgorithm}) =>
      super.noSuchMethod(
          Invocation.method(#update, [
            table,
            values
          ], {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValueForMissingStub: null);
  @override
  void rawDelete(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawDelete, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void delete(String? table, {String? where, List<Object?>? whereArgs}) =>
      super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValueForMissingStub: null);
  @override
  void execute(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#execute, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void query(String? table,
          {bool? distinct,
          List<String>? columns,
          String? where,
          List<Object?>? whereArgs,
          String? groupBy,
          String? having,
          String? orderBy,
          int? limit,
          int? offset}) =>
      super.noSuchMethod(
          Invocation.method(#query, [
            table
          ], {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset
          }),
          returnValueForMissingStub: null);
  @override
  void rawQuery(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawQuery, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i47.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i47.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_79()) as _i47.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i9.Future<_i47.DocumentReference<T>> add(T? data) =>
      (super.noSuchMethod(Invocation.method(#add, [data]),
              returnValue: Future<_i47.DocumentReference<T>>.value(
                  _FakeDocumentReference_59<T>()))
          as _i9.Future<_i47.DocumentReference<T>>);
  @override
  _i47.DocumentReference<T> doc([String? path]) =>
      (super.noSuchMethod(Invocation.method(#doc, [path]),
              returnValue: _FakeDocumentReference_59<T>())
          as _i47.DocumentReference<T>);
  @override
  _i47.CollectionReference<R> withConverter<R extends Object?>(
          {_i47.FromFirestore<R>? fromFirestore,
          _i47.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeCollectionReference_58<R>())
          as _i47.CollectionReference<R>);
  @override
  String toString() => super.toString();
  @override
  _i47.Query<T> endAtDocument(
          _i47.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(Invocation.method(#endAtDocument, [documentSnapshot]),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i47.Query<T> endAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endAt, [values]),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i47.Query<T> endBeforeDocument(
          _i47.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#endBeforeDocument, [documentSnapshot]),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i47.Query<T> endBefore(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endBefore, [values]),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i9.Future<_i47.QuerySnapshot<T>> get([_i47.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: Future<_i47.QuerySnapshot<T>>.value(
                  _FakeQuerySnapshot_81<T>()))
          as _i9.Future<_i47.QuerySnapshot<T>>);
  @override
  _i47.Query<T> limit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limit, [limit]),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i47.Query<T> limitToLast(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limitToLast, [limit]),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i9.Stream<_i47.QuerySnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: Stream<_i47.QuerySnapshot<T>>.empty())
          as _i9.Stream<_i47.QuerySnapshot<T>>);
  @override
  _i47.Query<T> orderBy(Object? field, {bool? descending = false}) =>
      (super.noSuchMethod(
          Invocation.method(#orderBy, [field], {#descending: descending}),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i47.Query<T> startAfterDocument(
          _i47.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#startAfterDocument, [documentSnapshot]),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i47.Query<T> startAfter(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAfter, [values]),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i47.Query<T> startAtDocument(
          _i47.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#startAtDocument, [documentSnapshot]),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i47.Query<T> startAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAt, [values]),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
  @override
  _i47.Query<T> where(Object? field,
          {Object? isEqualTo,
          Object? isNotEqualTo,
          Object? isLessThan,
          Object? isLessThanOrEqualTo,
          Object? isGreaterThan,
          Object? isGreaterThanOrEqualTo,
          Object? arrayContains,
          List<Object?>? arrayContainsAny,
          List<Object?>? whereIn,
          List<Object?>? whereNotIn,
          bool? isNull}) =>
      (super.noSuchMethod(
          Invocation.method(#where, [
            field
          ], {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull
          }),
          returnValue: _FakeQuery_80<T>()) as _i47.Query<T>);
}

/// A class which mocks [Completer].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleter<T> extends _i1.Mock implements _i9.Completer<T> {
  MockCompleter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<T> get future => (super.noSuchMethod(Invocation.getter(#future),
      returnValue: Future<T>.value(null)) as _i9.Future<T>);
  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);
  @override
  void complete([_i9.FutureOr<T>? value]) =>
      super.noSuchMethod(Invocation.method(#complete, [value]),
          returnValueForMissingStub: null);
  @override
  void completeError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#completeError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DatabaseExecutor].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseExecutor extends _i1.Mock implements _i56.DatabaseExecutor {
  MockDatabaseExecutor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> execute(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#execute, [sql, arguments]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<int> rawInsert(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawInsert, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> insert(String? table, Map<String, Object?>? values,
          {String? nullColumnHack,
          _i56.ConflictAlgorithm? conflictAlgorithm}) =>
      (super.noSuchMethod(
          Invocation.method(#insert, [
            table,
            values
          ], {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<List<Map<String, Object?>>> query(String? table,
          {bool? distinct,
          List<String>? columns,
          String? where,
          List<Object?>? whereArgs,
          String? groupBy,
          String? having,
          String? orderBy,
          int? limit,
          int? offset}) =>
      (super.noSuchMethod(
              Invocation.method(#query, [
                table
              ], {
                #distinct: distinct,
                #columns: columns,
                #where: where,
                #whereArgs: whereArgs,
                #groupBy: groupBy,
                #having: having,
                #orderBy: orderBy,
                #limit: limit,
                #offset: offset
              }),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i9.Future<List<Map<String, Object?>>>);
  @override
  _i9.Future<List<Map<String, Object?>>> rawQuery(String? sql,
          [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawQuery, [sql, arguments]),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i9.Future<List<Map<String, Object?>>>);
  @override
  _i9.Future<int> rawUpdate(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawUpdate, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> update(String? table, Map<String, Object?>? values,
          {String? where,
          List<Object?>? whereArgs,
          _i56.ConflictAlgorithm? conflictAlgorithm}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [
            table,
            values
          ], {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> rawDelete(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawDelete, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> delete(String? table,
          {String? where, List<Object?>? whereArgs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i56.Batch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeBatch_82()) as _i56.Batch);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i49.Directory {
  MockDirectory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_83())
          as Uri);
  @override
  _i49.Directory get absolute =>
      (super.noSuchMethod(Invocation.getter(#absolute),
          returnValue: _FakeDirectory_61()) as _i49.Directory);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i49.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
      returnValue: _FakeDirectory_61()) as _i49.Directory);
  @override
  _i9.Future<_i49.Directory> create({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#create, [], {#recursive: recursive}),
              returnValue: Future<_i49.Directory>.value(_FakeDirectory_61()))
      as _i9.Future<_i49.Directory>);
  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#createSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i9.Future<_i49.Directory> createTemp([String? prefix]) =>
      (super.noSuchMethod(Invocation.method(#createTemp, [prefix]),
              returnValue: Future<_i49.Directory>.value(_FakeDirectory_61()))
          as _i9.Future<_i49.Directory>);
  @override
  _i49.Directory createTempSync([String? prefix]) =>
      (super.noSuchMethod(Invocation.method(#createTempSync, [prefix]),
          returnValue: _FakeDirectory_61()) as _i49.Directory);
  @override
  _i9.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i9.Future<_i49.Directory> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future<_i49.Directory>.value(_FakeDirectory_61()))
          as _i9.Future<_i49.Directory>);
  @override
  _i49.Directory renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeDirectory_61()) as _i49.Directory);
  @override
  _i9.Stream<_i49.FileSystemEntity> list(
          {bool? recursive = false, bool? followLinks = true}) =>
      (super.noSuchMethod(
              Invocation.method(#list, [],
                  {#recursive: recursive, #followLinks: followLinks}),
              returnValue: Stream<_i49.FileSystemEntity>.empty())
          as _i9.Stream<_i49.FileSystemEntity>);
  @override
  List<_i49.FileSystemEntity> listSync(
          {bool? recursive = false, bool? followLinks = true}) =>
      (super.noSuchMethod(
              Invocation.method(#listSync, [],
                  {#recursive: recursive, #followLinks: followLinks}),
              returnValue: <_i49.FileSystemEntity>[])
          as List<_i49.FileSystemEntity>);
  @override
  String toString() => super.toString();
  @override
  _i9.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i9.Future<_i49.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: Future<_i49.FileStat>.value(_FakeFileStat_84()))
          as _i9.Future<_i49.FileStat>);
  @override
  _i49.FileStat statSync() =>
      (super.noSuchMethod(Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_84()) as _i49.FileStat);
  @override
  _i9.Future<_i49.FileSystemEntity> delete({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
              returnValue: Future<_i49.FileSystemEntity>.value(
                  _FakeFileSystemEntity_85()))
      as _i9.Future<_i49.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i9.Stream<_i49.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: Stream<_i49.FileSystemEvent>.empty())
          as _i9.Stream<_i49.FileSystemEvent>);
}

/// A class which mocks [DocumentChange].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentChange<T extends Object?> extends _i1.Mock
    implements _i47.DocumentChange<T> {
  MockDocumentChange() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i47.DocumentChangeType get type => (super.noSuchMethod(
      Invocation.getter(#type),
      returnValue: _i47.DocumentChangeType.added) as _i47.DocumentChangeType);
  @override
  int get oldIndex =>
      (super.noSuchMethod(Invocation.getter(#oldIndex), returnValue: 0) as int);
  @override
  int get newIndex =>
      (super.noSuchMethod(Invocation.getter(#newIndex), returnValue: 0) as int);
  @override
  _i47.DocumentSnapshot<T> get doc => (super.noSuchMethod(
      Invocation.getter(#doc),
      returnValue: _FakeDocumentSnapshot_86<T>()) as _i47.DocumentSnapshot<T>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i47.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i47.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_79()) as _i47.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i47.CollectionReference<T> get parent =>
      (super.noSuchMethod(Invocation.getter(#parent),
              returnValue: _FakeCollectionReference_58<T>())
          as _i47.CollectionReference<T>);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i47.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_58<Map<String, dynamic>>())
          as _i47.CollectionReference<Map<String, dynamic>>);
  @override
  _i9.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> update(Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#update, [data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i47.DocumentSnapshot<T>> get([_i47.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: Future<_i47.DocumentSnapshot<T>>.value(
                  _FakeDocumentSnapshot_86<T>()))
          as _i9.Future<_i47.DocumentSnapshot<T>>);
  @override
  _i9.Stream<_i47.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: Stream<_i47.DocumentSnapshot<T>>.empty())
          as _i9.Stream<_i47.DocumentSnapshot<T>>);
  @override
  _i9.Future<void> set(T? data, [_i47.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i47.DocumentReference<R> withConverter<R>(
          {_i47.FromFirestore<R>? fromFirestore,
          _i47.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeDocumentReference_59<R>())
          as _i47.DocumentReference<R>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i47.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i47.DocumentReference<T> get reference =>
      (super.noSuchMethod(Invocation.getter(#reference),
              returnValue: _FakeDocumentReference_59<T>())
          as _i47.DocumentReference<T>);
  @override
  _i47.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata_87()) as _i47.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));
  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
  @override
  String toString() => super.toString();
}

/// A class which mocks [DownloadTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadTask extends _i1.Mock implements _i46.DownloadTask {
  MockDownloadTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i46.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_88()) as _i46.FirebaseStorage);
  @override
  _i9.Stream<_i46.TaskSnapshot> get snapshotEvents =>
      (super.noSuchMethod(Invocation.getter(#snapshotEvents),
              returnValue: Stream<_i46.TaskSnapshot>.empty())
          as _i9.Stream<_i46.TaskSnapshot>);
  @override
  _i46.TaskSnapshot get snapshot =>
      (super.noSuchMethod(Invocation.getter(#snapshot),
          returnValue: _FakeTaskSnapshot_89()) as _i46.TaskSnapshot);
  @override
  _i9.Future<bool> pause() => (super.noSuchMethod(Invocation.method(#pause, []),
      returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> resume() =>
      (super.noSuchMethod(Invocation.method(#resume, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> cancel() =>
      (super.noSuchMethod(Invocation.method(#cancel, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Stream<_i46.TaskSnapshot> asStream() =>
      (super.noSuchMethod(Invocation.method(#asStream, []),
              returnValue: Stream<_i46.TaskSnapshot>.empty())
          as _i9.Stream<_i46.TaskSnapshot>);
  @override
  _i9.Future<_i46.TaskSnapshot> catchError(Function? onError,
          {bool Function(Object)? test}) =>
      (super.noSuchMethod(
              Invocation.method(#catchError, [onError], {#test: test}),
              returnValue:
                  Future<_i46.TaskSnapshot>.value(_FakeTaskSnapshot_89()))
          as _i9.Future<_i46.TaskSnapshot>);
  @override
  _i9.Future<S> then<S>(_i9.FutureOr<S>? Function(_i46.TaskSnapshot)? onValue,
          {Function? onError}) =>
      (super.noSuchMethod(
          Invocation.method(#then, [onValue], {#onError: onError}),
          returnValue: Future<S>.value(null)) as _i9.Future<S>);
  @override
  _i9.Future<_i46.TaskSnapshot> whenComplete(
          _i9.FutureOr<dynamic>? Function()? action) =>
      (super.noSuchMethod(Invocation.method(#whenComplete, [action]),
              returnValue:
                  Future<_i46.TaskSnapshot>.value(_FakeTaskSnapshot_89()))
          as _i9.Future<_i46.TaskSnapshot>);
  @override
  _i9.Future<_i46.TaskSnapshot> timeout(Duration? timeLimit,
          {_i9.FutureOr<_i46.TaskSnapshot> Function()? onTimeout}) =>
      (super.noSuchMethod(
              Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
              returnValue:
                  Future<_i46.TaskSnapshot>.value(_FakeTaskSnapshot_89()))
          as _i9.Future<_i46.TaskSnapshot>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [EntitlementInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntitlementInfo extends _i1.Mock implements _i53.EntitlementInfo {
  MockEntitlementInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  bool get isActive =>
      (super.noSuchMethod(Invocation.getter(#isActive), returnValue: false)
          as bool);
  @override
  bool get willRenew =>
      (super.noSuchMethod(Invocation.getter(#willRenew), returnValue: false)
          as bool);
  @override
  _i53.PeriodType get periodType =>
      (super.noSuchMethod(Invocation.getter(#periodType),
          returnValue: _i53.PeriodType.intro) as _i53.PeriodType);
  @override
  String get latestPurchaseDate => (super
          .noSuchMethod(Invocation.getter(#latestPurchaseDate), returnValue: '')
      as String);
  @override
  String get originalPurchaseDate =>
      (super.noSuchMethod(Invocation.getter(#originalPurchaseDate),
          returnValue: '') as String);
  @override
  _i53.Store get store => (super.noSuchMethod(Invocation.getter(#store),
      returnValue: _i53.Store.appStore) as _i53.Store);
  @override
  String get productIdentifier => (super
          .noSuchMethod(Invocation.getter(#productIdentifier), returnValue: '')
      as String);
  @override
  bool get isSandbox =>
      (super.noSuchMethod(Invocation.getter(#isSandbox), returnValue: false)
          as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [EntitlementInfos].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntitlementInfos extends _i1.Mock implements _i53.EntitlementInfos {
  MockEntitlementInfos() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i53.EntitlementInfo> get all =>
      (super.noSuchMethod(Invocation.getter(#all),
              returnValue: <String, _i53.EntitlementInfo>{})
          as Map<String, _i53.EntitlementInfo>);
  @override
  Map<String, _i53.EntitlementInfo> get active =>
      (super.noSuchMethod(Invocation.getter(#active),
              returnValue: <String, _i53.EntitlementInfo>{})
          as Map<String, _i53.EntitlementInfo>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [EntityListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntityListener<T> extends _i1.Mock implements _i10.EntityListener<T> {
  MockEntityListener() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onAdd(void Function(T)? _onAdd) =>
      super.noSuchMethod(Invocation.setter(#onAdd, _onAdd),
          returnValueForMissingStub: null);
  @override
  set onDelete(void Function(T)? _onDelete) =>
      super.noSuchMethod(Invocation.setter(#onDelete, _onDelete),
          returnValueForMissingStub: null);
  @override
  set onUpdate(void Function(T)? _onUpdate) =>
      super.noSuchMethod(Invocation.setter(#onUpdate, _onUpdate),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FileSystemEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystemEntity extends _i1.Mock implements _i49.FileSystemEntity {
  MockFileSystemEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_83())
          as Uri);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i49.FileSystemEntity get absolute =>
      (super.noSuchMethod(Invocation.getter(#absolute),
          returnValue: _FakeFileSystemEntity_85()) as _i49.FileSystemEntity);
  @override
  _i49.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
      returnValue: _FakeDirectory_61()) as _i49.Directory);
  @override
  _i9.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i9.Future<_i49.FileSystemEntity> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future<_i49.FileSystemEntity>.value(
                  _FakeFileSystemEntity_85()))
          as _i9.Future<_i49.FileSystemEntity>);
  @override
  _i49.FileSystemEntity renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeFileSystemEntity_85()) as _i49.FileSystemEntity);
  @override
  _i9.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i9.Future<_i49.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: Future<_i49.FileStat>.value(_FakeFileStat_84()))
          as _i9.Future<_i49.FileStat>);
  @override
  _i49.FileStat statSync() =>
      (super.noSuchMethod(Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_84()) as _i49.FileStat);
  @override
  _i9.Future<_i49.FileSystemEntity> delete({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
              returnValue: Future<_i49.FileSystemEntity>.value(
                  _FakeFileSystemEntity_85()))
      as _i9.Future<_i49.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i9.Stream<_i49.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: Stream<_i49.FileSystemEvent>.empty())
          as _i9.Stream<_i49.FileSystemEvent>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FullMetadata].
///
/// See the documentation for Mockito's code generation for more information.
class MockFullMetadata extends _i1.Mock implements _i46.FullMetadata {
  MockFullMetadata() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get fullPath =>
      (super.noSuchMethod(Invocation.getter(#fullPath), returnValue: '')
          as String);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LegacyImporter].
///
/// See the documentation for Mockito's code generation for more information.
class MockLegacyImporter extends _i1.Mock implements _i68.LegacyImporter {
  MockLegacyImporter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> start() => (super.noSuchMethod(Invocation.method(#start, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LogInResult].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogInResult extends _i1.Mock implements _i53.LogInResult {
  MockLogInResult() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get created =>
      (super.noSuchMethod(Invocation.getter(#created), returnValue: false)
          as bool);
  @override
  _i53.PurchaserInfo get purchaserInfo =>
      (super.noSuchMethod(Invocation.getter(#purchaserInfo),
          returnValue: _FakePurchaserInfo_74()) as _i53.PurchaserInfo);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MethodChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodChannel extends _i1.Mock implements _i54.MethodChannel {
  MockMethodChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i54.MethodCodec get codec => (super.noSuchMethod(Invocation.getter(#codec),
      returnValue: _FakeMethodCodec_90()) as _i54.MethodCodec);
  @override
  _i54.BinaryMessenger get binaryMessenger =>
      (super.noSuchMethod(Invocation.getter(#binaryMessenger),
          returnValue: _FakeBinaryMessenger_91()) as _i54.BinaryMessenger);
  @override
  _i9.Future<T?> invokeMethod<T>(String? method, [dynamic arguments]) =>
      (super.noSuchMethod(Invocation.method(#invokeMethod, [method, arguments]),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  _i9.Future<List<T>?> invokeListMethod<T>(String? method,
          [dynamic arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#invokeListMethod, [method, arguments]),
          returnValue: Future<List<T>?>.value()) as _i9.Future<List<T>?>);
  @override
  _i9.Future<Map<K, V>?> invokeMapMethod<K, V>(String? method,
          [dynamic arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#invokeMapMethod, [method, arguments]),
          returnValue: Future<Map<K, V>?>.value()) as _i9.Future<Map<K, V>?>);
  @override
  void setMethodCallHandler(
          _i9.Future<dynamic> Function(_i54.MethodCall)? handler) =>
      super.noSuchMethod(Invocation.method(#setMethodCallHandler, [handler]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NameValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockNameValidator extends _i1.Mock implements _i69.NameValidator {
  MockNameValidator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i69.ValidationCallback? run(_i44.BuildContext? context, String? newName) =>
      (super.noSuchMethod(Invocation.method(#run, [context, newName]))
          as _i69.ValidationCallback?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i44.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
          _i44.Route<dynamic>? route, _i44.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i44.Route<dynamic>? route, _i44.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i44.Route<dynamic>? route, _i44.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i44.Route<dynamic>? newRoute, _i44.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i44.Route<dynamic>? route, _i44.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Offering].
///
/// See the documentation for Mockito's code generation for more information.
class MockOffering extends _i1.Mock implements _i53.Offering {
  MockOffering() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  String get serverDescription => (super
          .noSuchMethod(Invocation.getter(#serverDescription), returnValue: '')
      as String);
  @override
  List<_i53.Package> get availablePackages =>
      (super.noSuchMethod(Invocation.getter(#availablePackages),
          returnValue: <_i53.Package>[]) as List<_i53.Package>);
  @override
  _i53.Package? getPackage(String? identifier) =>
      (super.noSuchMethod(Invocation.method(#getPackage, [identifier]))
          as _i53.Package?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Offerings].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfferings extends _i1.Mock implements _i53.Offerings {
  MockOfferings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i53.Offering> get all => (super.noSuchMethod(
      Invocation.getter(#all),
      returnValue: <String, _i53.Offering>{}) as Map<String, _i53.Offering>);
  @override
  _i53.Offering? getOffering(String? identifier) =>
      (super.noSuchMethod(Invocation.method(#getOffering, [identifier]))
          as _i53.Offering?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Package].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackage extends _i1.Mock implements _i53.Package {
  MockPackage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  _i53.PackageType get packageType =>
      (super.noSuchMethod(Invocation.getter(#packageType),
          returnValue: _i53.PackageType.unknown) as _i53.PackageType);
  @override
  _i53.Product get product => (super.noSuchMethod(Invocation.getter(#product),
      returnValue: _FakeProduct_92()) as _i53.Product);
  @override
  String get offeringIdentifier => (super
          .noSuchMethod(Invocation.getter(#offeringIdentifier), returnValue: '')
      as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Product].
///
/// See the documentation for Mockito's code generation for more information.
class MockProduct extends _i1.Mock implements _i53.Product {
  MockProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  String get description =>
      (super.noSuchMethod(Invocation.getter(#description), returnValue: '')
          as String);
  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  double get price =>
      (super.noSuchMethod(Invocation.getter(#price), returnValue: 0.0)
          as double);
  @override
  String get priceString =>
      (super.noSuchMethod(Invocation.getter(#priceString), returnValue: '')
          as String);
  @override
  String get currencyCode =>
      (super.noSuchMethod(Invocation.getter(#currencyCode), returnValue: '')
          as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PurchaserInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchaserInfo extends _i1.Mock implements _i53.PurchaserInfo {
  MockPurchaserInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i53.EntitlementInfos get entitlements =>
      (super.noSuchMethod(Invocation.getter(#entitlements),
          returnValue: _FakeEntitlementInfos_93()) as _i53.EntitlementInfos);
  @override
  Map<String, String?> get allExpirationDates =>
      (super.noSuchMethod(Invocation.getter(#allExpirationDates),
          returnValue: <String, String?>{}) as Map<String, String?>);
  @override
  Map<String, String> get allPurchaseDates =>
      (super.noSuchMethod(Invocation.getter(#allPurchaseDates),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  List<String> get activeSubscriptions =>
      (super.noSuchMethod(Invocation.getter(#activeSubscriptions),
          returnValue: <String>[]) as List<String>);
  @override
  List<String> get allPurchasedProductIdentifiers =>
      (super.noSuchMethod(Invocation.getter(#allPurchasedProductIdentifiers),
          returnValue: <String>[]) as List<String>);
  @override
  List<_i70.Transaction> get nonSubscriptionTransactions =>
      (super.noSuchMethod(Invocation.getter(#nonSubscriptionTransactions),
          returnValue: <_i70.Transaction>[]) as List<_i70.Transaction>);
  @override
  String get firstSeen =>
      (super.noSuchMethod(Invocation.getter(#firstSeen), returnValue: '')
          as String);
  @override
  String get originalAppUserId => (super
          .noSuchMethod(Invocation.getter(#originalAppUserId), returnValue: '')
      as String);
  @override
  String get requestDate =>
      (super.noSuchMethod(Invocation.getter(#requestDate), returnValue: '')
          as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [QuantityPickerInputDelegate].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockQuantityPickerInputDelegate<PickerType extends _i58.GeneratedMessage,
        InputType> extends _i1.Mock
    implements _i71.QuantityPickerInputDelegate<PickerType, InputType> {
  MockQuantityPickerInputDelegate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i57.SetInputController<InputType> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeSetInputController_94<InputType>())
          as _i57.SetInputController<InputType>);
  @override
  Set<PickerType> get pickerTypeInitialValues =>
      (super.noSuchMethod(Invocation.getter(#pickerTypeInitialValues),
          returnValue: <PickerType>{}) as Set<PickerType>);
  @override
  _i44.Widget pickerPage(
          _i72.ManageableListPagePickerSettings<PickerType>? pickerSettings) =>
      (super.noSuchMethod(Invocation.method(#pickerPage, [pickerSettings]),
          returnValue: _FakeWidget_64()) as _i44.Widget);
  @override
  bool inputTypeEntityExists(InputType? item) =>
      (super.noSuchMethod(Invocation.method(#inputTypeEntityExists, [item]),
          returnValue: false) as bool);
  @override
  bool inputTypeHasValue(InputType? item) =>
      (super.noSuchMethod(Invocation.method(#inputTypeHasValue, [item]),
          returnValue: false) as bool);
  @override
  int? inputTypeValue(InputType? item) =>
      (super.noSuchMethod(Invocation.method(#inputTypeValue, [item])) as int?);
  @override
  String? inputTypeEntityDisplayName(
          _i44.BuildContext? context, InputType? item) =>
      (super.noSuchMethod(
              Invocation.method(#inputTypeEntityDisplayName, [context, item]))
          as String?);
  @override
  InputType newInputItem(PickerType? pickerItem) =>
      (super.noSuchMethod(Invocation.method(#newInputItem, [pickerItem]),
          returnValue: _i73.newInputItemShim(pickerItem)) as InputType);
  @override
  InputType? existingInputItem(PickerType? pickerItem) =>
      (super.noSuchMethod(Invocation.method(#existingInputItem, [pickerItem]))
          as InputType?);
  @override
  void updateValue(InputType? item, int? value) =>
      super.noSuchMethod(Invocation.method(#updateValue, [item, value]),
          returnValueForMissingStub: null);
  @override
  void clearValue(InputType? item) =>
      super.noSuchMethod(Invocation.method(#clearValue, [item]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i47.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i47.QueryDocumentSnapshot<T>> get docs =>
      (super.noSuchMethod(Invocation.getter(#docs),
              returnValue: <_i47.QueryDocumentSnapshot<T>>[])
          as List<_i47.QueryDocumentSnapshot<T>>);
  @override
  List<_i47.DocumentChange<T>> get docChanges => (super.noSuchMethod(
      Invocation.getter(#docChanges),
      returnValue: <_i47.DocumentChange<T>>[]) as List<_i47.DocumentChange<T>>);
  @override
  _i47.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata_87()) as _i47.SnapshotMetadata);
  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Reference].
///
/// See the documentation for Mockito's code generation for more information.
class MockReference extends _i1.Mock implements _i46.Reference {
  MockReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i46.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_88()) as _i46.FirebaseStorage);
  @override
  String get bucket =>
      (super.noSuchMethod(Invocation.getter(#bucket), returnValue: '')
          as String);
  @override
  String get fullPath =>
      (super.noSuchMethod(Invocation.getter(#fullPath), returnValue: '')
          as String);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i46.Reference get root => (super.noSuchMethod(Invocation.getter(#root),
      returnValue: _FakeReference_57()) as _i46.Reference);
  @override
  _i46.Reference child(String? path) =>
      (super.noSuchMethod(Invocation.method(#child, [path]),
          returnValue: _FakeReference_57()) as _i46.Reference);
  @override
  _i9.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<String> getDownloadURL() =>
      (super.noSuchMethod(Invocation.method(#getDownloadURL, []),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i46.FullMetadata> getMetadata() => (super.noSuchMethod(
          Invocation.method(#getMetadata, []),
          returnValue: Future<_i46.FullMetadata>.value(_FakeFullMetadata_95()))
      as _i9.Future<_i46.FullMetadata>);
  @override
  _i9.Future<_i46.ListResult> list([_i46.ListOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#list, [options]),
              returnValue: Future<_i46.ListResult>.value(_FakeListResult_96()))
          as _i9.Future<_i46.ListResult>);
  @override
  _i9.Future<_i46.ListResult> listAll() =>
      (super.noSuchMethod(Invocation.method(#listAll, []),
              returnValue: Future<_i46.ListResult>.value(_FakeListResult_96()))
          as _i9.Future<_i46.ListResult>);
  @override
  _i9.Future<_i61.Uint8List?> getData([int? maxSize = 10485760]) =>
      (super.noSuchMethod(Invocation.method(#getData, [maxSize]),
              returnValue: Future<_i61.Uint8List?>.value())
          as _i9.Future<_i61.Uint8List?>);
  @override
  _i46.UploadTask putData(_i61.Uint8List? data,
          [_i46.SettableMetadata? metadata]) =>
      (super.noSuchMethod(Invocation.method(#putData, [data, metadata]),
          returnValue: _FakeUploadTask_97()) as _i46.UploadTask);
  @override
  _i46.UploadTask putBlob(dynamic blob, [_i46.SettableMetadata? metadata]) =>
      (super.noSuchMethod(Invocation.method(#putBlob, [blob, metadata]),
          returnValue: _FakeUploadTask_97()) as _i46.UploadTask);
  @override
  _i46.UploadTask putFile(_i49.File? file, [_i46.SettableMetadata? metadata]) =>
      (super.noSuchMethod(Invocation.method(#putFile, [file, metadata]),
          returnValue: _FakeUploadTask_97()) as _i46.UploadTask);
  @override
  _i46.UploadTask putString(String? data,
          {_i46.PutStringFormat? format = _i46.PutStringFormat.raw,
          _i46.SettableMetadata? metadata}) =>
      (super.noSuchMethod(
          Invocation.method(
              #putString, [data], {#format: format, #metadata: metadata}),
          returnValue: _FakeUploadTask_97()) as _i46.UploadTask);
  @override
  _i9.Future<_i46.FullMetadata> updateMetadata(
          _i46.SettableMetadata? metadata) =>
      (super.noSuchMethod(Invocation.method(#updateMetadata, [metadata]),
              returnValue:
                  Future<_i46.FullMetadata>.value(_FakeFullMetadata_95()))
          as _i9.Future<_i46.FullMetadata>);
  @override
  _i46.DownloadTask writeToFile(_i49.File? file) =>
      (super.noSuchMethod(Invocation.method(#writeToFile, [file]),
          returnValue: _FakeDownloadTask_98()) as _i46.DownloadTask);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse extends _i1.Mock implements _i48.Response {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i61.Uint8List get bodyBytes =>
      (super.noSuchMethod(Invocation.getter(#bodyBytes),
          returnValue: _i61.Uint8List(0)) as _i61.Uint8List);
  @override
  String get body =>
      (super.noSuchMethod(Invocation.getter(#body), returnValue: '') as String);
  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [StreamSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSubscription<T> extends _i1.Mock
    implements _i9.StreamSubscription<T> {
  MockStreamSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);
  @override
  _i9.Future<void> cancel() =>
      (super.noSuchMethod(Invocation.method(#cancel, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void onData(void Function(T)? handleData) =>
      super.noSuchMethod(Invocation.method(#onData, [handleData]),
          returnValueForMissingStub: null);
  @override
  void onError(Function? handleError) =>
      super.noSuchMethod(Invocation.method(#onError, [handleError]),
          returnValueForMissingStub: null);
  @override
  void onDone(void Function()? handleDone) =>
      super.noSuchMethod(Invocation.method(#onDone, [handleDone]),
          returnValueForMissingStub: null);
  @override
  void pause([_i9.Future<void>? resumeSignal]) =>
      super.noSuchMethod(Invocation.method(#pause, [resumeSignal]),
          returnValueForMissingStub: null);
  @override
  void resume() => super.noSuchMethod(Invocation.method(#resume, []),
      returnValueForMissingStub: null);
  @override
  _i9.Future<E> asFuture<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#asFuture, [futureValue]),
          returnValue: Future<E>.value(null)) as _i9.Future<E>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TaskSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskSnapshot extends _i1.Mock implements _i46.TaskSnapshot {
  MockTaskSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i46.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_88()) as _i46.FirebaseStorage);
  @override
  int get bytesTransferred =>
      (super.noSuchMethod(Invocation.getter(#bytesTransferred), returnValue: 0)
          as int);
  @override
  _i46.Reference get ref => (super.noSuchMethod(Invocation.getter(#ref),
      returnValue: _FakeReference_57()) as _i46.Reference);
  @override
  _i46.TaskState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i46.TaskState.paused) as _i46.TaskState);
  @override
  int get totalBytes =>
      (super.noSuchMethod(Invocation.getter(#totalBytes), returnValue: 0)
          as int);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UploadTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadTask extends _i1.Mock implements _i46.UploadTask {
  MockUploadTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i46.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_88()) as _i46.FirebaseStorage);
  @override
  _i9.Stream<_i46.TaskSnapshot> get snapshotEvents =>
      (super.noSuchMethod(Invocation.getter(#snapshotEvents),
              returnValue: Stream<_i46.TaskSnapshot>.empty())
          as _i9.Stream<_i46.TaskSnapshot>);
  @override
  _i46.TaskSnapshot get snapshot =>
      (super.noSuchMethod(Invocation.getter(#snapshot),
          returnValue: _FakeTaskSnapshot_89()) as _i46.TaskSnapshot);
  @override
  _i9.Future<bool> pause() => (super.noSuchMethod(Invocation.method(#pause, []),
      returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> resume() =>
      (super.noSuchMethod(Invocation.method(#resume, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> cancel() =>
      (super.noSuchMethod(Invocation.method(#cancel, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Stream<_i46.TaskSnapshot> asStream() =>
      (super.noSuchMethod(Invocation.method(#asStream, []),
              returnValue: Stream<_i46.TaskSnapshot>.empty())
          as _i9.Stream<_i46.TaskSnapshot>);
  @override
  _i9.Future<_i46.TaskSnapshot> catchError(Function? onError,
          {bool Function(Object)? test}) =>
      (super.noSuchMethod(
              Invocation.method(#catchError, [onError], {#test: test}),
              returnValue:
                  Future<_i46.TaskSnapshot>.value(_FakeTaskSnapshot_89()))
          as _i9.Future<_i46.TaskSnapshot>);
  @override
  _i9.Future<S> then<S>(_i9.FutureOr<S>? Function(_i46.TaskSnapshot)? onValue,
          {Function? onError}) =>
      (super.noSuchMethod(
          Invocation.method(#then, [onValue], {#onError: onError}),
          returnValue: Future<S>.value(null)) as _i9.Future<S>);
  @override
  _i9.Future<_i46.TaskSnapshot> whenComplete(
          _i9.FutureOr<dynamic>? Function()? action) =>
      (super.noSuchMethod(Invocation.method(#whenComplete, [action]),
              returnValue:
                  Future<_i46.TaskSnapshot>.value(_FakeTaskSnapshot_89()))
          as _i9.Future<_i46.TaskSnapshot>);
  @override
  _i9.Future<_i46.TaskSnapshot> timeout(Duration? timeLimit,
          {_i9.FutureOr<_i46.TaskSnapshot> Function()? onTimeout}) =>
      (super.noSuchMethod(
              Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
              returnValue:
                  Future<_i46.TaskSnapshot>.value(_FakeTaskSnapshot_89()))
          as _i9.Future<_i46.TaskSnapshot>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i45.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);
  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);
  @override
  _i45.UserMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeUserMetadata_99()) as _i45.UserMetadata);
  @override
  List<_i45.UserInfo> get providerData =>
      (super.noSuchMethod(Invocation.getter(#providerData),
          returnValue: <_i45.UserInfo>[]) as List<_i45.UserInfo>);
  @override
  String get uid =>
      (super.noSuchMethod(Invocation.getter(#uid), returnValue: '') as String);
  @override
  _i9.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<String> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdToken, [forceRefresh]),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i45.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdTokenResult, [forceRefresh]),
              returnValue:
                  Future<_i45.IdTokenResult>.value(_FakeIdTokenResult_100()))
          as _i9.Future<_i45.IdTokenResult>);
  @override
  _i9.Future<_i45.UserCredential> linkWithCredential(
          _i45.AuthCredential? credential) =>
      (super.noSuchMethod(Invocation.method(#linkWithCredential, [credential]),
              returnValue:
                  Future<_i45.UserCredential>.value(_FakeUserCredential_56()))
          as _i9.Future<_i45.UserCredential>);
  @override
  _i9.Future<_i45.UserCredential> linkWithPopup(_i74.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#linkWithPopup, [provider]),
              returnValue:
                  Future<_i45.UserCredential>.value(_FakeUserCredential_56()))
          as _i9.Future<_i45.UserCredential>);
  @override
  _i9.Future<_i45.ConfirmationResult> linkWithPhoneNumber(String? phoneNumber,
          [_i45.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: Future<_i45.ConfirmationResult>.value(
                  _FakeConfirmationResult_101()))
          as _i9.Future<_i45.ConfirmationResult>);
  @override
  _i9.Future<_i45.UserCredential> reauthenticateWithCredential(
          _i45.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#reauthenticateWithCredential, [credential]),
              returnValue:
                  Future<_i45.UserCredential>.value(_FakeUserCredential_56()))
          as _i9.Future<_i45.UserCredential>);
  @override
  _i9.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> sendEmailVerification(
          [_i45.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#sendEmailVerification, [actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i45.User> unlink(String? providerId) =>
      (super.noSuchMethod(Invocation.method(#unlink, [providerId]),
              returnValue: Future<_i45.User>.value(_FakeUser_102()))
          as _i9.Future<_i45.User>);
  @override
  _i9.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(Invocation.method(#updateEmail, [newEmail]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [newPassword]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePhoneNumber(
          _i45.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
          Invocation.method(#updatePhoneNumber, [phoneCredential]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(Invocation.method(#updateDisplayName, [displayName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(Invocation.method(#updatePhotoURL, [photoURL]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
          Invocation.method(#updateProfile, [],
              {#displayName: displayName, #photoURL: photoURL}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> verifyBeforeUpdateEmail(String? newEmail,
          [_i45.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyBeforeUpdateEmail, [newEmail, actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i45.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}
