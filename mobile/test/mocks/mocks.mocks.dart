// ignore_for_file: directives_ordering,avoid_equals_and_hash_code_on_mutable_classes,lines_longer_than_80_chars
// Mocks generated by Mockito 5.0.15 from annotations
// in mobile/test/mocks/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:convert' as _i60;
import 'dart:io' as _i48;
import 'dart:typed_data' as _i57;

import 'package:cloud_firestore/cloud_firestore.dart' as _i46;
import 'package:file_picker/file_picker.dart' as _i59;
import 'package:firebase_auth/firebase_auth.dart' as _i44;
import 'package:firebase_storage/firebase_storage.dart' as _i45;
import 'package:flutter/material.dart' as _i43;
import 'package:flutter/services.dart' as _i51;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i56;
import 'package:http/http.dart' as _i47;
import 'package:mobile/angler_manager.dart' as _i11;
import 'package:mobile/app_manager.dart' as _i4;
import 'package:mobile/app_preference_manager.dart' as _i5;
import 'package:mobile/atmosphere_fetcher.dart' as _i55;
import 'package:mobile/auth_manager.dart' as _i6;
import 'package:mobile/bait_category_manager.dart' as _i12;
import 'package:mobile/bait_manager.dart' as _i13;
import 'package:mobile/catch_manager.dart' as _i14;
import 'package:mobile/custom_entity_manager.dart' as _i15;
import 'package:mobile/database/legacy_importer.dart' as _i61;
import 'package:mobile/entity_manager.dart' as _i10;
import 'package:mobile/fishing_spot_manager.dart' as _i16;
import 'package:mobile/image_manager.dart' as _i17;
import 'package:mobile/local_database_manager.dart' as _i3;
import 'package:mobile/location_monitor.dart' as _i18;
import 'package:mobile/method_manager.dart' as _i19;
import 'package:mobile/model/gen/anglerslog.pb.dart' as _i8;
import 'package:mobile/preference_manager.dart' as _i58;
import 'package:mobile/properties_manager.dart' as _i20;
import 'package:mobile/report_manager.dart' as _i21;
import 'package:mobile/species_manager.dart' as _i22;
import 'package:mobile/subscription_manager.dart' as _i7;
import 'package:mobile/time_manager.dart' as _i23;
import 'package:mobile/trip_manager.dart' as _i24;
import 'package:mobile/user_preference_manager.dart' as _i25;
import 'package:mobile/utils/validator.dart' as _i62;
import 'package:mobile/water_clarity_manager.dart' as _i26;
import 'package:mobile/wrappers/file_picker_wrapper.dart' as _i27;
import 'package:mobile/wrappers/firebase_auth_wrapper.dart' as _i28;
import 'package:mobile/wrappers/firebase_storage_wrapper.dart' as _i29;
import 'package:mobile/wrappers/firebase_wrapper.dart' as _i30;
import 'package:mobile/wrappers/firestore_wrapper.dart' as _i2;
import 'package:mobile/wrappers/http_wrapper.dart' as _i31;
import 'package:mobile/wrappers/image_compress_wrapper.dart' as _i32;
import 'package:mobile/wrappers/image_picker_wrapper.dart' as _i33;
import 'package:mobile/wrappers/io_wrapper.dart' as _i34;
import 'package:mobile/wrappers/package_info_wrapper.dart' as _i35;
import 'package:mobile/wrappers/path_provider_wrapper.dart' as _i36;
import 'package:mobile/wrappers/permission_handler_wrapper.dart' as _i37;
import 'package:mobile/wrappers/photo_manager_wrapper.dart' as _i38;
import 'package:mobile/wrappers/purchases_wrapper.dart' as _i39;
import 'package:mobile/wrappers/services_wrapper.dart' as _i40;
import 'package:mobile/wrappers/shared_preferences_wrapper.dart' as _i41;
import 'package:mobile/wrappers/url_launcher_wrapper.dart' as _i42;
import 'package:mockito/mockito.dart' as _i1;
import 'package:package_info_plus/package_info_plus.dart' as _i49;
import 'package:photo_manager/photo_manager.dart' as _i52;
import 'package:protobuf/protobuf.dart' as _i54;
import 'package:purchases_flutter/purchases_flutter.dart' as _i50;
import 'package:purchases_flutter/transaction.dart' as _i63;
import 'package:sqflite/sqflite.dart' as _i53;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: avoid_types_on_closure_parameters

class _FakeFirestoreWrapper_0 extends _i1.Fake implements _i2.FirestoreWrapper {
}

class _FakeLocalDatabaseManager_1 extends _i1.Fake
    implements _i3.LocalDatabaseManager {}

class _FakeAppManager_2 extends _i1.Fake implements _i4.AppManager {}

class _FakeAppPreferenceManager_3 extends _i1.Fake
    implements _i5.AppPreferenceManager {}

class _FakeAuthManager_4 extends _i1.Fake implements _i6.AuthManager {}

class _FakeSubscriptionManager_5 extends _i1.Fake
    implements _i7.SubscriptionManager {}

class _FakeAngler_6 extends _i1.Fake implements _i8.Angler {}

class _FakeId_7 extends _i1.Fake implements _i8.Id {}

class _FakeStreamSubscription_8<T> extends _i1.Fake
    implements _i9.StreamSubscription<T> {}

class _FakeSimpleEntityListener_9<T> extends _i1.Fake
    implements _i10.SimpleEntityListener<T> {}

class _FakeAnglerManager_10 extends _i1.Fake implements _i11.AnglerManager {}

class _FakeBaitCategoryManager_11 extends _i1.Fake
    implements _i12.BaitCategoryManager {}

class _FakeBaitManager_12 extends _i1.Fake implements _i13.BaitManager {}

class _FakeCatchManager_13 extends _i1.Fake implements _i14.CatchManager {}

class _FakeCustomEntityManager_14 extends _i1.Fake
    implements _i15.CustomEntityManager {}

class _FakeFishingSpotManager_15 extends _i1.Fake
    implements _i16.FishingSpotManager {}

class _FakeImageManager_16 extends _i1.Fake implements _i17.ImageManager {}

class _FakeLocationMonitor_17 extends _i1.Fake implements _i18.LocationMonitor {
}

class _FakeMethodManager_18 extends _i1.Fake implements _i19.MethodManager {}

class _FakePropertiesManager_19 extends _i1.Fake
    implements _i20.PropertiesManager {}

class _FakeReportManager_20 extends _i1.Fake implements _i21.ReportManager {}

class _FakeSpeciesManager_21 extends _i1.Fake implements _i22.SpeciesManager {}

class _FakeTimeManager_22 extends _i1.Fake implements _i23.TimeManager {}

class _FakeTripManager_23 extends _i1.Fake implements _i24.TripManager {}

class _FakeUserPreferenceManager_24 extends _i1.Fake
    implements _i25.UserPreferenceManager {}

class _FakeWaterClarityManager_25 extends _i1.Fake
    implements _i26.WaterClarityManager {}

class _FakeFilePickerWrapper_26 extends _i1.Fake
    implements _i27.FilePickerWrapper {}

class _FakeFirebaseAuthWrapper_27 extends _i1.Fake
    implements _i28.FirebaseAuthWrapper {}

class _FakeFirebaseStorageWrapper_28 extends _i1.Fake
    implements _i29.FirebaseStorageWrapper {}

class _FakeFirebaseWrapper_29 extends _i1.Fake implements _i30.FirebaseWrapper {
}

class _FakeHttpWrapper_30 extends _i1.Fake implements _i31.HttpWrapper {}

class _FakeImageCompressWrapper_31 extends _i1.Fake
    implements _i32.ImageCompressWrapper {}

class _FakeImagePickerWrapper_32 extends _i1.Fake
    implements _i33.ImagePickerWrapper {}

class _FakeIoWrapper_33 extends _i1.Fake implements _i34.IoWrapper {}

class _FakePackageInfoWrapper_34 extends _i1.Fake
    implements _i35.PackageInfoWrapper {}

class _FakePathProviderWrapper_35 extends _i1.Fake
    implements _i36.PathProviderWrapper {}

class _FakePermissionHandlerWrapper_36 extends _i1.Fake
    implements _i37.PermissionHandlerWrapper {}

class _FakePhotoManagerWrapper_37 extends _i1.Fake
    implements _i38.PhotoManagerWrapper {}

class _FakePurchasesWrapper_38 extends _i1.Fake
    implements _i39.PurchasesWrapper {}

class _FakeServicesWrapper_39 extends _i1.Fake implements _i40.ServicesWrapper {
}

class _FakeSharedPreferencesWrapper_40 extends _i1.Fake
    implements _i41.SharedPreferencesWrapper {}

class _FakeUrlLauncherWrapper_41 extends _i1.Fake
    implements _i42.UrlLauncherWrapper {}

class _FakeBaitCategory_42 extends _i1.Fake implements _i8.BaitCategory {}

class _FakeBait_43 extends _i1.Fake implements _i8.Bait {}

class _FakeCatch_44 extends _i1.Fake implements _i8.Catch {}

class _FakeCustomEntity_45 extends _i1.Fake implements _i8.CustomEntity {}

class _FakeReport_46 extends _i1.Fake implements _i8.Report {}

class _FakeFishingSpot_47 extends _i1.Fake implements _i8.FishingSpot {}

class _FakeMethod_48 extends _i1.Fake implements _i8.Method {}

class _FakeSpecies_49 extends _i1.Fake implements _i8.Species {}

class _FakeDateTime_50 extends _i1.Fake implements DateTime {}

class _FakeTimeOfDay_51 extends _i1.Fake implements _i43.TimeOfDay {}

class _FakeWaterClarity_52 extends _i1.Fake implements _i8.WaterClarity {}

class _FakeUserCredential_53 extends _i1.Fake implements _i44.UserCredential {}

class _FakeReference_54 extends _i1.Fake implements _i45.Reference {}

class _FakeCollectionReference_55 extends _i1.Fake
    implements _i46.CollectionReference {}

class _FakeDocumentReference_56 extends _i1.Fake
    implements _i46.DocumentReference {}

class _FakeResponse_57 extends _i1.Fake implements _i47.Response {}

class _FakeDirectory_58 extends _i1.Fake implements _i48.Directory {}

class _FakeFile_59 extends _i1.Fake implements _i48.File {}

class _FakePackageInfo_60 extends _i1.Fake implements _i49.PackageInfo {}

class _FakeOfferings_61 extends _i1.Fake implements _i50.Offerings {}

class _FakePurchaserInfo_62 extends _i1.Fake implements _i50.PurchaserInfo {}

class _FakeMethodChannel_63 extends _i1.Fake implements _i51.MethodChannel {}

class _FakeFilterOptionGroup_64 extends _i1.Fake
    implements _i52.FilterOptionGroup {}

class _FakeRequestType_65 extends _i1.Fake implements _i52.RequestType {}

class _FakeFirebaseFirestore_66 extends _i1.Fake
    implements _i46.FirebaseFirestore {}

class _FakeQuery_67 extends _i1.Fake implements _i46.Query {}

class _FakeQuerySnapshot_68 extends _i1.Fake implements _i46.QuerySnapshot {}

class _FakeBatch_69 extends _i1.Fake implements _i53.Batch {}

class _FakeUri_70 extends _i1.Fake implements Uri {}

class _FakeFileStat_71 extends _i1.Fake implements _i48.FileStat {}

class _FakeFileSystemEntity_72 extends _i1.Fake
    implements _i48.FileSystemEntity {}

class _FakeDocumentSnapshot_73 extends _i1.Fake
    implements _i46.DocumentSnapshot {}

class _FakeSnapshotMetadata_74 extends _i1.Fake
    implements _i46.SnapshotMetadata {}

class _FakeFirebaseStorage_75 extends _i1.Fake implements _i45.FirebaseStorage {
}

class _FakeTaskSnapshot_76 extends _i1.Fake implements _i45.TaskSnapshot {}

class _FakeMethodCodec_77 extends _i1.Fake implements _i51.MethodCodec {}

class _FakeBinaryMessenger_78 extends _i1.Fake implements _i51.BinaryMessenger {
}

class _FakeProduct_79 extends _i1.Fake implements _i50.Product {}

class _FakeEntitlementInfos_80 extends _i1.Fake
    implements _i50.EntitlementInfos {}

class _FakeFullMetadata_81 extends _i1.Fake implements _i45.FullMetadata {}

class _FakeListResult_82 extends _i1.Fake implements _i45.ListResult {}

class _FakeUploadTask_83 extends _i1.Fake implements _i45.UploadTask {}

class _FakeDownloadTask_84 extends _i1.Fake implements _i45.DownloadTask {}

class _FakeUserMetadata_85 extends _i1.Fake implements _i44.UserMetadata {}

class _FakeIdTokenResult_86 extends _i1.Fake implements _i44.IdTokenResult {}

class _FakeConfirmationResult_87 extends _i1.Fake
    implements _i44.ConfirmationResult {}

class _FakeUser_88 extends _i1.Fake implements _i44.User {}

/// A class which mocks [AnglerManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnglerManager extends _i1.Mock implements _i11.AnglerManager {
  MockAnglerManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.Angler, _i8.Angler) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Angler __p0, _i8.Angler __p1) => 0)
          as int Function(_i8.Angler, _i8.Angler));
  @override
  Map<_i8.Id, _i8.Angler> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Angler>{}) as Map<_i8.Id, _i8.Angler>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Angler entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeAngler_6()) as _i8.Angler);
  @override
  _i8.Id id(_i8.Angler? angler) =>
      (super.noSuchMethod(Invocation.method(#id, [angler]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Angler? angler) =>
      (super.noSuchMethod(Invocation.method(#name, [angler]), returnValue: '')
          as String);
  @override
  int numberOfCatches(_i8.Id? anglerId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [anglerId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(_i43.BuildContext? context, _i8.Angler? angler) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, angler]),
          returnValue: '') as String);
  @override
  List<_i8.Angler> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Angler>[]) as List<_i8.Angler>);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  List<_i8.Angler> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Angler>[]) as List<_i8.Angler>);
  @override
  List<_i8.Angler> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Angler>[]) as List<_i8.Angler>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Angler? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<T extends _i54.GeneratedMessage>(
          _i8.Id? id, List<T>? items, bool Function(T)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Angler>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Angler>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Angler? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Angler? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Angler? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Angler> addSimpleListener(
          {void Function(_i8.Angler)? onAdd,
          void Function(_i8.Angler)? onDelete,
          void Function(_i8.Angler)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Angler>())
          as _i10.SimpleEntityListener<_i8.Angler>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppManager extends _i1.Mock implements _i4.AppManager {
  MockAppManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.AnglerManager get anglerManager =>
      (super.noSuchMethod(Invocation.getter(#anglerManager),
          returnValue: _FakeAnglerManager_10()) as _i11.AnglerManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i12.BaitCategoryManager get baitCategoryManager => (super.noSuchMethod(
      Invocation.getter(#baitCategoryManager),
      returnValue: _FakeBaitCategoryManager_11()) as _i12.BaitCategoryManager);
  @override
  _i13.BaitManager get baitManager =>
      (super.noSuchMethod(Invocation.getter(#baitManager),
          returnValue: _FakeBaitManager_12()) as _i13.BaitManager);
  @override
  _i14.CatchManager get catchManager =>
      (super.noSuchMethod(Invocation.getter(#catchManager),
          returnValue: _FakeCatchManager_13()) as _i14.CatchManager);
  @override
  _i15.CustomEntityManager get customEntityManager => (super.noSuchMethod(
      Invocation.getter(#customEntityManager),
      returnValue: _FakeCustomEntityManager_14()) as _i15.CustomEntityManager);
  @override
  _i16.FishingSpotManager get fishingSpotManager => (super.noSuchMethod(
      Invocation.getter(#fishingSpotManager),
      returnValue: _FakeFishingSpotManager_15()) as _i16.FishingSpotManager);
  @override
  _i17.ImageManager get imageManager =>
      (super.noSuchMethod(Invocation.getter(#imageManager),
          returnValue: _FakeImageManager_16()) as _i17.ImageManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  _i18.LocationMonitor get locationMonitor =>
      (super.noSuchMethod(Invocation.getter(#locationMonitor),
          returnValue: _FakeLocationMonitor_17()) as _i18.LocationMonitor);
  @override
  _i19.MethodManager get methodManager =>
      (super.noSuchMethod(Invocation.getter(#methodManager),
          returnValue: _FakeMethodManager_18()) as _i19.MethodManager);
  @override
  _i20.PropertiesManager get propertiesManager =>
      (super.noSuchMethod(Invocation.getter(#propertiesManager),
          returnValue: _FakePropertiesManager_19()) as _i20.PropertiesManager);
  @override
  _i21.ReportManager get reportManager =>
      (super.noSuchMethod(Invocation.getter(#reportManager),
          returnValue: _FakeReportManager_20()) as _i21.ReportManager);
  @override
  _i22.SpeciesManager get speciesManager =>
      (super.noSuchMethod(Invocation.getter(#speciesManager),
          returnValue: _FakeSpeciesManager_21()) as _i22.SpeciesManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  _i23.TimeManager get timeManager =>
      (super.noSuchMethod(Invocation.getter(#timeManager),
          returnValue: _FakeTimeManager_22()) as _i23.TimeManager);
  @override
  _i24.TripManager get tripManager =>
      (super.noSuchMethod(Invocation.getter(#tripManager),
          returnValue: _FakeTripManager_23()) as _i24.TripManager);
  @override
  _i25.UserPreferenceManager get userPreferenceManager =>
      (super.noSuchMethod(Invocation.getter(#userPreferenceManager),
              returnValue: _FakeUserPreferenceManager_24())
          as _i25.UserPreferenceManager);
  @override
  _i26.WaterClarityManager get waterClarityManager => (super.noSuchMethod(
      Invocation.getter(#waterClarityManager),
      returnValue: _FakeWaterClarityManager_25()) as _i26.WaterClarityManager);
  @override
  _i27.FilePickerWrapper get filePickerWrapper =>
      (super.noSuchMethod(Invocation.getter(#filePickerWrapper),
          returnValue: _FakeFilePickerWrapper_26()) as _i27.FilePickerWrapper);
  @override
  _i28.FirebaseAuthWrapper get firebaseAuthWrapper => (super.noSuchMethod(
      Invocation.getter(#firebaseAuthWrapper),
      returnValue: _FakeFirebaseAuthWrapper_27()) as _i28.FirebaseAuthWrapper);
  @override
  _i29.FirebaseStorageWrapper get firebaseStorageWrapper =>
      (super.noSuchMethod(Invocation.getter(#firebaseStorageWrapper),
              returnValue: _FakeFirebaseStorageWrapper_28())
          as _i29.FirebaseStorageWrapper);
  @override
  _i30.FirebaseWrapper get firebaseWrapper =>
      (super.noSuchMethod(Invocation.getter(#firebaseWrapper),
          returnValue: _FakeFirebaseWrapper_29()) as _i30.FirebaseWrapper);
  @override
  _i2.FirestoreWrapper get firestoreWrapper =>
      (super.noSuchMethod(Invocation.getter(#firestoreWrapper),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i31.HttpWrapper get httpWrapper =>
      (super.noSuchMethod(Invocation.getter(#httpWrapper),
          returnValue: _FakeHttpWrapper_30()) as _i31.HttpWrapper);
  @override
  _i32.ImageCompressWrapper get imageCompressWrapper =>
      (super.noSuchMethod(Invocation.getter(#imageCompressWrapper),
              returnValue: _FakeImageCompressWrapper_31())
          as _i32.ImageCompressWrapper);
  @override
  _i33.ImagePickerWrapper get imagePickerWrapper => (super.noSuchMethod(
      Invocation.getter(#imagePickerWrapper),
      returnValue: _FakeImagePickerWrapper_32()) as _i33.ImagePickerWrapper);
  @override
  _i34.IoWrapper get ioWrapper =>
      (super.noSuchMethod(Invocation.getter(#ioWrapper),
          returnValue: _FakeIoWrapper_33()) as _i34.IoWrapper);
  @override
  _i35.PackageInfoWrapper get packageInfoWrapper => (super.noSuchMethod(
      Invocation.getter(#packageInfoWrapper),
      returnValue: _FakePackageInfoWrapper_34()) as _i35.PackageInfoWrapper);
  @override
  _i36.PathProviderWrapper get pathProviderWrapper => (super.noSuchMethod(
      Invocation.getter(#pathProviderWrapper),
      returnValue: _FakePathProviderWrapper_35()) as _i36.PathProviderWrapper);
  @override
  _i37.PermissionHandlerWrapper get permissionHandlerWrapper =>
      (super.noSuchMethod(Invocation.getter(#permissionHandlerWrapper),
              returnValue: _FakePermissionHandlerWrapper_36())
          as _i37.PermissionHandlerWrapper);
  @override
  _i38.PhotoManagerWrapper get photoManagerWrapper => (super.noSuchMethod(
      Invocation.getter(#photoManagerWrapper),
      returnValue: _FakePhotoManagerWrapper_37()) as _i38.PhotoManagerWrapper);
  @override
  _i39.PurchasesWrapper get purchasesWrapper =>
      (super.noSuchMethod(Invocation.getter(#purchasesWrapper),
          returnValue: _FakePurchasesWrapper_38()) as _i39.PurchasesWrapper);
  @override
  _i40.ServicesWrapper get servicesWrapper =>
      (super.noSuchMethod(Invocation.getter(#servicesWrapper),
          returnValue: _FakeServicesWrapper_39()) as _i40.ServicesWrapper);
  @override
  _i41.SharedPreferencesWrapper get sharedPreferencesWrapper =>
      (super.noSuchMethod(Invocation.getter(#sharedPreferencesWrapper),
              returnValue: _FakeSharedPreferencesWrapper_40())
          as _i41.SharedPreferencesWrapper);
  @override
  _i42.UrlLauncherWrapper get urlLauncherWrapper => (super.noSuchMethod(
      Invocation.getter(#urlLauncherWrapper),
      returnValue: _FakeUrlLauncherWrapper_41()) as _i42.UrlLauncherWrapper);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppPreferenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppPreferenceManager extends _i1.Mock
    implements _i5.AppPreferenceManager {
  MockAppPreferenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set lastLoggedInEmail(String? email) =>
      super.noSuchMethod(Invocation.setter(#lastLoggedInEmail, email),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AtmosphereFetcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockAtmosphereFetcher extends _i1.Mock implements _i55.AtmosphereFetcher {
  MockAtmosphereFetcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  int get timestamp =>
      (super.noSuchMethod(Invocation.getter(#timestamp), returnValue: 0)
          as int);
  @override
  _i9.Future<_i8.Atmosphere?> fetch() =>
      (super.noSuchMethod(Invocation.method(#fetch, []),
              returnValue: Future<_i8.Atmosphere?>.value())
          as _i9.Future<_i8.Atmosphere?>);
  @override
  _i9.Future<Map<String, dynamic>?> get(String? elements) =>
      (super.noSuchMethod(Invocation.method(#get, [elements]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i9.Future<Map<String, dynamic>?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BaitCategoryManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaitCategoryManager extends _i1.Mock
    implements _i12.BaitCategoryManager {
  MockBaitCategoryManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.BaitCategory, _i8.BaitCategory) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.BaitCategory __p0, _i8.BaitCategory __p1) => 0)
          as int Function(_i8.BaitCategory, _i8.BaitCategory));
  @override
  Map<_i8.Id, _i8.BaitCategory> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i8.Id, _i8.BaitCategory>{})
          as Map<_i8.Id, _i8.BaitCategory>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.BaitCategory entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeBaitCategory_42()) as _i8.BaitCategory);
  @override
  _i8.Id id(_i8.BaitCategory? baitCategory) =>
      (super.noSuchMethod(Invocation.method(#id, [baitCategory]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.BaitCategory? baitCategory) =>
      (super.noSuchMethod(Invocation.method(#name, [baitCategory]),
          returnValue: '') as String);
  @override
  int numberOfBaits(_i8.Id? baitCategoryId) =>
      (super.noSuchMethod(Invocation.method(#numberOfBaits, [baitCategoryId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(
          _i43.BuildContext? context, _i8.BaitCategory? baitCategory) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMessage, [context, baitCategory]),
          returnValue: '') as String);
  @override
  List<_i8.BaitCategory> listSortedByName({String? filter}) => (super
      .noSuchMethod(Invocation.method(#listSortedByName, [], {#filter: filter}),
          returnValue: <_i8.BaitCategory>[]) as List<_i8.BaitCategory>);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  List<_i8.BaitCategory> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.BaitCategory>[]) as List<_i8.BaitCategory>);
  @override
  List<_i8.BaitCategory> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.BaitCategory>[]) as List<_i8.BaitCategory>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.BaitCategory? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<T extends _i54.GeneratedMessage>(
          _i8.Id? id, List<T>? items, bool Function(T)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.BaitCategory>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.BaitCategory>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.BaitCategory? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.BaitCategory? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.BaitCategory? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.BaitCategory> addSimpleListener(
          {void Function(_i8.BaitCategory)? onAdd,
          void Function(_i8.BaitCategory)? onDelete,
          void Function(_i8.BaitCategory)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.BaitCategory>())
          as _i10.SimpleEntityListener<_i8.BaitCategory>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BaitManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaitManager extends _i1.Mock implements _i13.BaitManager {
  MockBaitManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.BaitAttachment, _i8.BaitAttachment)
      get attachmentComparator =>
          (super.noSuchMethod(Invocation.getter(#attachmentComparator),
              returnValue: (_i8.BaitAttachment __p0, _i8.BaitAttachment __p1) =>
                  0) as int Function(_i8.BaitAttachment, _i8.BaitAttachment));
  @override
  int Function(_i8.Bait, _i8.Bait) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Bait __p0, _i8.Bait __p1) => 0)
          as int Function(_i8.Bait, _i8.Bait));
  @override
  Map<_i8.Id, _i8.Bait> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Bait>{}) as Map<_i8.Id, _i8.Bait>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Bait entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeBait_43()) as _i8.Bait);
  @override
  _i8.Id id(_i8.Bait? bait) =>
      (super.noSuchMethod(Invocation.method(#id, [bait]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Bait? bait) =>
      (super.noSuchMethod(Invocation.method(#name, [bait]), returnValue: '')
          as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter,
          [_i43.BuildContext? context]) =>
      (super.noSuchMethod(
          Invocation.method(#matchesFilter, [id, filter, context]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Bait? bait,
          {_i48.File? imageFile,
          bool? compressImages = true,
          bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [
            bait
          ], {
            #imageFile: imageFile,
            #compressImages: compressImages,
            #notify: notify
          }),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  bool attachmentsMatchesFilter(Iterable<_i8.BaitAttachment>? attachments,
          String? filter, _i43.BuildContext? context) =>
      (super.noSuchMethod(
          Invocation.method(
              #attachmentsMatchesFilter, [attachments, filter, context]),
          returnValue: false) as bool);
  @override
  bool duplicate(_i8.Bait? rhs) =>
      (super.noSuchMethod(Invocation.method(#duplicate, [rhs]),
          returnValue: false) as bool);
  @override
  int numberOfCatches(_i8.Id? baitId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [baitId]),
          returnValue: 0) as int);
  @override
  int numberOfVariantCatches(_i8.Id? variantId) => (super.noSuchMethod(
      Invocation.method(#numberOfVariantCatches, [variantId]),
      returnValue: 0) as int);
  @override
  int numberOfCustomEntityValues(_i8.Id? customEntityId) => (super.noSuchMethod(
      Invocation.method(#numberOfCustomEntityValues, [customEntityId]),
      returnValue: 0) as int);
  @override
  List<_i8.BaitAttachment> attachmentList() =>
      (super.noSuchMethod(Invocation.method(#attachmentList, []),
          returnValue: <_i8.BaitAttachment>[]) as List<_i8.BaitAttachment>);
  @override
  _i8.BaitVariant? variant(_i8.Bait? bait, _i8.Id? variantId) =>
      (super.noSuchMethod(Invocation.method(#variant, [bait, variantId]))
          as _i8.BaitVariant?);
  @override
  _i8.BaitVariant? variantFromAttachment(_i8.BaitAttachment? attachment) =>
      (super.noSuchMethod(
              Invocation.method(#variantFromAttachment, [attachment]))
          as _i8.BaitVariant?);
  @override
  String? attachmentDisplayValue(
          _i8.BaitAttachment? attachment, _i43.BuildContext? context) =>
      (super.noSuchMethod(
              Invocation.method(#attachmentDisplayValue, [attachment, context]))
          as String?);
  @override
  List<String> attachmentsDisplayValues(
          Iterable<_i8.BaitAttachment>? attachments,
          _i43.BuildContext? context) =>
      (super.noSuchMethod(
          Invocation.method(#attachmentsDisplayValues, [attachments, context]),
          returnValue: <String>[]) as List<String>);
  @override
  String variantDisplayValue(
          _i8.BaitVariant? variant, _i43.BuildContext? context,
          {bool? includeCustomValues = false}) =>
      (super.noSuchMethod(
          Invocation.method(#variantDisplayValue, [variant, context],
              {#includeCustomValues: includeCustomValues}),
          returnValue: '') as String);
  @override
  String deleteMessage(_i43.BuildContext? context, _i8.Bait? bait) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, bait]),
          returnValue: '') as String);
  @override
  String deleteVariantMessage(
          _i43.BuildContext? context, _i8.BaitVariant? variant) =>
      (super.noSuchMethod(
          Invocation.method(#deleteVariantMessage, [context, variant]),
          returnValue: '') as String);
  @override
  List<_i8.Bait> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Bait>[]) as List<_i8.Bait>);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  List<_i8.Bait> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Bait>[]) as List<_i8.Bait>);
  @override
  List<_i8.Bait> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Bait>[]) as List<_i8.Bait>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<T extends _i54.GeneratedMessage>(
          _i8.Id? id, List<T>? items, bool Function(T)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Bait>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Bait>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Bait> addSimpleListener(
          {void Function(_i8.Bait)? onAdd,
          void Function(_i8.Bait)? onDelete,
          void Function(_i8.Bait)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Bait>())
          as _i10.SimpleEntityListener<_i8.Bait>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CatchManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCatchManager extends _i1.Mock implements _i14.CatchManager {
  MockCatchManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  Map<_i8.Id, _i8.Catch> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Catch>{}) as Map<_i8.Id, _i8.Catch>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Catch entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeCatch_44()) as _i8.Catch);
  @override
  _i8.Id id(_i8.Catch? cat) => (super
          .noSuchMethod(Invocation.method(#id, [cat]), returnValue: _FakeId_7())
      as _i8.Id);
  @override
  bool matchesFilter(_i8.Id? id, String? filter,
          [_i43.BuildContext? context]) =>
      (super.noSuchMethod(
          Invocation.method(#matchesFilter, [id, filter, context]),
          returnValue: false) as bool);
  @override
  List<_i8.Catch> catchesSortedByTimestamp(_i43.BuildContext? context,
          {String? filter,
          _i8.DateRange? dateRange,
          bool? isCatchAndReleaseOnly = false,
          bool? isFavoritesOnly = false,
          Set<_i8.Id>? anglerIds = const {},
          Set<_i8.BaitAttachment>? baits = const {},
          Set<_i8.Id>? catchIds = const {},
          Set<_i8.Id>? fishingSpotIds = const {},
          Set<_i8.Id>? methodIds = const {},
          Set<_i8.Id>? speciesIds = const {},
          Set<_i8.Id>? waterClarityIds = const {},
          Set<_i8.Period>? periods = const {},
          Set<_i8.Season>? seasons = const {},
          Set<_i8.Direction>? windDirections = const {},
          Set<_i8.SkyCondition>? skyConditions = const {},
          Set<_i8.MoonPhase>? moonPhases = const {},
          Set<_i8.TideType>? tideTypes = const {},
          _i8.NumberFilter? waterDepthFilter,
          _i8.NumberFilter? waterTemperatureFilter,
          _i8.NumberFilter? lengthFilter,
          _i8.NumberFilter? weightFilter,
          _i8.NumberFilter? quantityFilter,
          _i8.NumberFilter? airTemperatureFilter,
          _i8.NumberFilter? airPressureFilter,
          _i8.NumberFilter? airHumidityFilter,
          _i8.NumberFilter? airVisibilityFilter,
          _i8.NumberFilter? windSpeedFilter}) =>
      (super.noSuchMethod(
          Invocation.method(#catchesSortedByTimestamp, [
            context
          ], {
            #filter: filter,
            #dateRange: dateRange,
            #isCatchAndReleaseOnly: isCatchAndReleaseOnly,
            #isFavoritesOnly: isFavoritesOnly,
            #anglerIds: anglerIds,
            #baits: baits,
            #catchIds: catchIds,
            #fishingSpotIds: fishingSpotIds,
            #methodIds: methodIds,
            #speciesIds: speciesIds,
            #waterClarityIds: waterClarityIds,
            #periods: periods,
            #seasons: seasons,
            #windDirections: windDirections,
            #skyConditions: skyConditions,
            #moonPhases: moonPhases,
            #tideTypes: tideTypes,
            #waterDepthFilter: waterDepthFilter,
            #waterTemperatureFilter: waterTemperatureFilter,
            #lengthFilter: lengthFilter,
            #weightFilter: weightFilter,
            #quantityFilter: quantityFilter,
            #airTemperatureFilter: airTemperatureFilter,
            #airPressureFilter: airPressureFilter,
            #airHumidityFilter: airHumidityFilter,
            #airVisibilityFilter: airVisibilityFilter,
            #windSpeedFilter: windSpeedFilter
          }),
          returnValue: <_i8.Catch>[]) as List<_i8.Catch>);
  @override
  List<_i8.Catch> filteredCatches(_i43.BuildContext? context,
          {String? filter,
          _i8.DateRange? dateRange,
          bool? isCatchAndReleaseOnly = false,
          bool? isFavoritesOnly = false,
          Set<_i8.Id>? anglerIds = const {},
          Set<_i8.BaitAttachment>? baits = const {},
          Set<_i8.Id>? catchIds = const {},
          Set<_i8.Id>? fishingSpotIds = const {},
          Set<_i8.Id>? methodIds = const {},
          Set<_i8.Id>? speciesIds = const {},
          Set<_i8.Id>? waterClarityIds = const {},
          Set<_i8.Period>? periods = const {},
          Set<_i8.Season>? seasons = const {},
          Set<_i8.Direction>? windDirections = const {},
          Set<_i8.SkyCondition>? skyConditions = const {},
          Set<_i8.MoonPhase>? moonPhases = const {},
          Set<_i8.TideType>? tideTypes = const {},
          _i8.NumberFilter? waterDepthFilter,
          _i8.NumberFilter? waterTemperatureFilter,
          _i8.NumberFilter? lengthFilter,
          _i8.NumberFilter? weightFilter,
          _i8.NumberFilter? quantityFilter,
          _i8.NumberFilter? airTemperatureFilter,
          _i8.NumberFilter? airPressureFilter,
          _i8.NumberFilter? airHumidityFilter,
          _i8.NumberFilter? airVisibilityFilter,
          _i8.NumberFilter? windSpeedFilter}) =>
      (super.noSuchMethod(
          Invocation.method(#filteredCatches, [
            context
          ], {
            #filter: filter,
            #dateRange: dateRange,
            #isCatchAndReleaseOnly: isCatchAndReleaseOnly,
            #isFavoritesOnly: isFavoritesOnly,
            #anglerIds: anglerIds,
            #baits: baits,
            #catchIds: catchIds,
            #fishingSpotIds: fishingSpotIds,
            #methodIds: methodIds,
            #speciesIds: speciesIds,
            #waterClarityIds: waterClarityIds,
            #periods: periods,
            #seasons: seasons,
            #windDirections: windDirections,
            #skyConditions: skyConditions,
            #moonPhases: moonPhases,
            #tideTypes: tideTypes,
            #waterDepthFilter: waterDepthFilter,
            #waterTemperatureFilter: waterTemperatureFilter,
            #lengthFilter: lengthFilter,
            #weightFilter: weightFilter,
            #quantityFilter: quantityFilter,
            #airTemperatureFilter: airTemperatureFilter,
            #airPressureFilter: airPressureFilter,
            #airHumidityFilter: airHumidityFilter,
            #airVisibilityFilter: airVisibilityFilter,
            #windSpeedFilter: windSpeedFilter
          }),
          returnValue: <_i8.Catch>[]) as List<_i8.Catch>);
  @override
  List<String> imageNamesSortedByTimestamp(_i43.BuildContext? context) => (super
      .noSuchMethod(Invocation.method(#imageNamesSortedByTimestamp, [context]),
          returnValue: <String>[]) as List<String>);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Catch? cat,
          {List<_i48.File>? imageFiles = const [],
          bool? compressImages = true,
          bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [
            cat
          ], {
            #imageFiles: imageFiles,
            #compressImages: compressImages,
            #notify: notify
          }),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  bool existsWith({_i8.Id? speciesId}) => (super.noSuchMethod(
      Invocation.method(#existsWith, [], {#speciesId: speciesId}),
      returnValue: false) as bool);
  @override
  String deleteMessage(_i43.BuildContext? context, _i8.Catch? cat) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, cat]),
          returnValue: '') as String);
  @override
  int numberOfCustomEntityValues(_i8.Id? customEntityId) => (super.noSuchMethod(
      Invocation.method(#numberOfCustomEntityValues, [customEntityId]),
      returnValue: 0) as int);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  List<_i8.Catch> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Catch>[]) as List<_i8.Catch>);
  @override
  List<_i8.Catch> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Catch>[]) as List<_i8.Catch>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<T extends _i54.GeneratedMessage>(
          _i8.Id? id, List<T>? items, bool Function(T)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Catch>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Catch>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Catch? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Catch? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Catch? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Catch> addSimpleListener(
          {void Function(_i8.Catch)? onAdd,
          void Function(_i8.Catch)? onDelete,
          void Function(_i8.Catch)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Catch>())
          as _i10.SimpleEntityListener<_i8.Catch>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CustomEntityManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomEntityManager extends _i1.Mock
    implements _i15.CustomEntityManager {
  MockCustomEntityManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.CustomEntity, _i8.CustomEntity) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.CustomEntity __p0, _i8.CustomEntity __p1) => 0)
          as int Function(_i8.CustomEntity, _i8.CustomEntity));
  @override
  Map<_i8.Id, _i8.CustomEntity> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i8.Id, _i8.CustomEntity>{})
          as Map<_i8.Id, _i8.CustomEntity>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.CustomEntity entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeCustomEntity_45()) as _i8.CustomEntity);
  @override
  _i8.Id id(_i8.CustomEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.CustomEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  String customValuesDisplayValue(
          List<_i8.CustomEntityValue>? values, _i43.BuildContext? context) =>
      (super.noSuchMethod(
          Invocation.method(#customValuesDisplayValue, [values, context]),
          returnValue: '') as String);
  @override
  List<_i8.CustomEntity> listSortedByName({String? filter}) => (super
      .noSuchMethod(Invocation.method(#listSortedByName, [], {#filter: filter}),
          returnValue: <_i8.CustomEntity>[]) as List<_i8.CustomEntity>);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  List<_i8.CustomEntity> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.CustomEntity>[]) as List<_i8.CustomEntity>);
  @override
  List<_i8.CustomEntity> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.CustomEntity>[]) as List<_i8.CustomEntity>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.CustomEntity? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<T extends _i54.GeneratedMessage>(
          _i8.Id? id, List<T>? items, bool Function(T)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.CustomEntity>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.CustomEntity>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.CustomEntity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.CustomEntity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.CustomEntity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.CustomEntity> addSimpleListener(
          {void Function(_i8.CustomEntity)? onAdd,
          void Function(_i8.CustomEntity)? onDelete,
          void Function(_i8.CustomEntity)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.CustomEntity>())
          as _i10.SimpleEntityListener<_i8.CustomEntity>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ReportManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportManager extends _i1.Mock implements _i21.ReportManager {
  MockReportManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.Report, _i8.Report) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Report __p0, _i8.Report __p1) => 0)
          as int Function(_i8.Report, _i8.Report));
  @override
  Map<_i8.Id, _i8.Report> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Report>{}) as Map<_i8.Id, _i8.Report>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Report entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeReport_46()) as _i8.Report);
  @override
  _i8.Id id(_i8.Report? report) =>
      (super.noSuchMethod(Invocation.method(#id, [report]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Report? report) =>
      (super.noSuchMethod(Invocation.method(#name, [report]), returnValue: '')
          as String);
  @override
  void removeAttachedBaits(_i8.Report? report, _i8.Id? baitId) => super
      .noSuchMethod(Invocation.method(#removeAttachedBaits, [report, baitId]),
          returnValueForMissingStub: null);
  @override
  bool removeFishingSpot(_i8.Report? report, _i8.FishingSpot? fishingSpot) =>
      (super.noSuchMethod(
          Invocation.method(#removeFishingSpot, [report, fishingSpot]),
          returnValue: false) as bool);
  @override
  bool removeSpecies(_i8.Report? report, _i8.Species? species) =>
      (super.noSuchMethod(Invocation.method(#removeSpecies, [report, species]),
          returnValue: false) as bool);
  @override
  List<_i8.Report> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Report>[]) as List<_i8.Report>);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  List<_i8.Report> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Report>[]) as List<_i8.Report>);
  @override
  List<_i8.Report> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Report>[]) as List<_i8.Report>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Report? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<T extends _i54.GeneratedMessage>(
          _i8.Id? id, List<T>? items, bool Function(T)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Report>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Report>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Report? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Report? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Report? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Report> addSimpleListener(
          {void Function(_i8.Report)? onAdd,
          void Function(_i8.Report)? onDelete,
          void Function(_i8.Report)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Report>())
          as _i10.SimpleEntityListener<_i8.Report>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FishingSpotManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFishingSpotManager extends _i1.Mock
    implements _i16.FishingSpotManager {
  MockFishingSpotManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.FishingSpot, _i8.FishingSpot) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.FishingSpot __p0, _i8.FishingSpot __p1) => 0)
          as int Function(_i8.FishingSpot, _i8.FishingSpot));
  @override
  Map<_i8.Id, _i8.FishingSpot> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i8.Id, _i8.FishingSpot>{})
          as Map<_i8.Id, _i8.FishingSpot>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.FishingSpot entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeFishingSpot_47()) as _i8.FishingSpot);
  @override
  _i8.Id id(_i8.FishingSpot? fishingSpot) =>
      (super.noSuchMethod(Invocation.method(#id, [fishingSpot]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.FishingSpot? fishingSpot) =>
      (super.noSuchMethod(Invocation.method(#name, [fishingSpot]),
          returnValue: '') as String);
  @override
  List<_i8.FishingSpot> listSortedByName({String? filter}) => (super
      .noSuchMethod(Invocation.method(#listSortedByName, [], {#filter: filter}),
          returnValue: <_i8.FishingSpot>[]) as List<_i8.FishingSpot>);
  @override
  _i8.FishingSpot? withinRadius(_i56.LatLng? latLng, [int? meters = 30]) =>
      (super.noSuchMethod(Invocation.method(#withinRadius, [latLng, meters]))
          as _i8.FishingSpot?);
  @override
  int numberOfCatches(_i8.Id? fishingSpotId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [fishingSpotId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(
          _i43.BuildContext? context, _i8.FishingSpot? fishingSpot) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMessage, [context, fishingSpot]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  List<_i8.FishingSpot> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.FishingSpot>[]) as List<_i8.FishingSpot>);
  @override
  List<_i8.FishingSpot> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.FishingSpot>[]) as List<_i8.FishingSpot>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.FishingSpot? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<T extends _i54.GeneratedMessage>(
          _i8.Id? id, List<T>? items, bool Function(T)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.FishingSpot>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.FishingSpot>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.FishingSpot> addSimpleListener(
          {void Function(_i8.FishingSpot)? onAdd,
          void Function(_i8.FishingSpot)? onDelete,
          void Function(_i8.FishingSpot)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.FishingSpot>())
          as _i10.SimpleEntityListener<_i8.FishingSpot>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ImageManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageManager extends _i1.Mock implements _i17.ImageManager {
  MockImageManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i57.Uint8List?> image(_i43.BuildContext? context,
          {String? fileName, double? size}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #image, [context], {#fileName: fileName, #size: size}),
              returnValue: Future<_i57.Uint8List?>.value())
          as _i9.Future<_i57.Uint8List?>);
  @override
  _i9.Future<Map<_i48.File, _i57.Uint8List>> images(_i43.BuildContext? context,
          {List<String>? imageNames, double? size}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #images, [context], {#imageNames: imageNames, #size: size}),
              returnValue: Future<Map<_i48.File, _i57.Uint8List>>.value(
                  <_i48.File, _i57.Uint8List>{}))
          as _i9.Future<Map<_i48.File, _i57.Uint8List>>);
  @override
  _i9.Future<List<String>> save(List<_i48.File>? files,
          {bool? compress = true}) =>
      (super.noSuchMethod(
              Invocation.method(#save, [files], {#compress: compress}),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i9.Future<List<String>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocalDatabaseManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabaseManager extends _i1.Mock
    implements _i3.LocalDatabaseManager {
  MockLocalDatabaseManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> initialize({_i53.DatabaseExecutor? database}) => (super
      .noSuchMethod(Invocation.method(#initialize, [], {#database: database}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<List<dynamic>> commitBatch(void Function(_i53.Batch)? execute) =>
      (super.noSuchMethod(Invocation.method(#commitBatch, [execute]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i9.Future<List<dynamic>>);
  @override
  _i9.Future<bool> insert(String? tableName, Map<String, dynamic>? values) =>
      (super.noSuchMethod(Invocation.method(#insert, [tableName, values]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> insertOrReplace(
          String? tableName, Map<String, dynamic>? values) =>
      (super.noSuchMethod(
          Invocation.method(#insertOrReplace, [tableName, values]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(String? table,
          {String? where, List<dynamic>? whereArgs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<List<Map<String, dynamic>>> query(String? sql,
          [List<dynamic>? args]) =>
      (super.noSuchMethod(Invocation.method(#query, [sql, args]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i9.Future<List<Map<String, dynamic>>>);
  @override
  _i9.Future<bool> rawExists(String? query, [List<dynamic>? args]) =>
      (super.noSuchMethod(Invocation.method(#rawExists, [query, args]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> rawUpdate(String? query, [List<dynamic>? args]) =>
      (super.noSuchMethod(Invocation.method(#rawUpdate, [query, args]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> deleteEntity(_i8.Id? entityId, String? tableName) => (super
      .noSuchMethod(Invocation.method(#deleteEntity, [entityId, tableName]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<List<Map<String, dynamic>>> fetchAll(String? tableName) =>
      (super.noSuchMethod(Invocation.method(#fetchAll, [tableName]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i9.Future<List<Map<String, dynamic>>>);
  @override
  _i9.Future<void> replaceRows(
          String? tableName, List<Map<String, dynamic>>? newRows) =>
      (super.noSuchMethod(Invocation.method(#replaceRows, [tableName, newRows]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocationMonitor].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationMonitor extends _i1.Mock implements _i18.LocationMonitor {
  MockLocationMonitor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get distanceFilterMeters =>
      (super.noSuchMethod(Invocation.getter(#distanceFilterMeters),
          returnValue: 0) as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MethodManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodManager extends _i1.Mock implements _i19.MethodManager {
  MockMethodManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.Method, _i8.Method) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Method __p0, _i8.Method __p1) => 0)
          as int Function(_i8.Method, _i8.Method));
  @override
  Map<_i8.Id, _i8.Method> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Method>{}) as Map<_i8.Id, _i8.Method>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Method entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeMethod_48()) as _i8.Method);
  @override
  _i8.Id id(_i8.Method? method) =>
      (super.noSuchMethod(Invocation.method(#id, [method]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Method? method) =>
      (super.noSuchMethod(Invocation.method(#name, [method]), returnValue: '')
          as String);
  @override
  int numberOfCatches(_i8.Id? methodId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [methodId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(_i43.BuildContext? context, _i8.Method? method) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, method]),
          returnValue: '') as String);
  @override
  List<_i8.Method> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Method>[]) as List<_i8.Method>);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  List<_i8.Method> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Method>[]) as List<_i8.Method>);
  @override
  List<_i8.Method> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Method>[]) as List<_i8.Method>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Method? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<T extends _i54.GeneratedMessage>(
          _i8.Id? id, List<T>? items, bool Function(T)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Method>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Method>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Method? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Method? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Method? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Method> addSimpleListener(
          {void Function(_i8.Method)? onAdd,
          void Function(_i8.Method)? onDelete,
          void Function(_i8.Method)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Method>())
          as _i10.SimpleEntityListener<_i8.Method>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PreferenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceManager extends _i1.Mock implements _i58.PreferenceManager {
  MockPreferenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  _i9.Stream<void> get stream => (super.noSuchMethod(Invocation.getter(#stream),
      returnValue: Stream<void>.empty()) as _i9.Stream<void>);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic>? initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]))
          as _i9.StreamSubscription<dynamic>?);
  @override
  _i9.Future<void> put(String? key, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void putLocal(String? key, dynamic value) =>
      super.noSuchMethod(Invocation.method(#putLocal, [key, value]),
          returnValueForMissingStub: null);
  @override
  void putStringList(String? key, List<String>? value) =>
      super.noSuchMethod(Invocation.method(#putStringList, [key, value]),
          returnValueForMissingStub: null);
  @override
  List<String> stringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#stringList, [key]),
          returnValue: <String>[]) as List<String>);
  @override
  _i9.Future<void> putId(String? key, _i8.Id? value) =>
      (super.noSuchMethod(Invocation.method(#putId, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i8.Id? id(String? key) =>
      (super.noSuchMethod(Invocation.method(#id, [key])) as _i8.Id?);
  @override
  _i9.Future<void> putIdList(String? key, List<_i8.Id>? value) =>
      (super.noSuchMethod(Invocation.method(#putIdList, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  List<_i8.Id> idList(String? key) =>
      (super.noSuchMethod(Invocation.method(#idList, [key]),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PropertiesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropertiesManager extends _i1.Mock implements _i20.PropertiesManager {
  MockPropertiesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get clientSenderEmail => (super
          .noSuchMethod(Invocation.getter(#clientSenderEmail), returnValue: '')
      as String);
  @override
  String get supportEmail =>
      (super.noSuchMethod(Invocation.getter(#supportEmail), returnValue: '')
          as String);
  @override
  String get sendGridApiKey =>
      (super.noSuchMethod(Invocation.getter(#sendGridApiKey), returnValue: '')
          as String);
  @override
  String get revenueCatApiKey =>
      (super.noSuchMethod(Invocation.getter(#revenueCatApiKey), returnValue: '')
          as String);
  @override
  String get visualCrossingApiKey =>
      (super.noSuchMethod(Invocation.getter(#visualCrossingApiKey),
          returnValue: '') as String);
  @override
  String get feedbackTemplate =>
      (super.noSuchMethod(Invocation.getter(#feedbackTemplate), returnValue: '')
          as String);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SpeciesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpeciesManager extends _i1.Mock implements _i22.SpeciesManager {
  MockSpeciesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.Species, _i8.Species) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.Species __p0, _i8.Species __p1) => 0)
          as int Function(_i8.Species, _i8.Species));
  @override
  Map<_i8.Id, _i8.Species> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i8.Id, _i8.Species>{}) as Map<_i8.Id, _i8.Species>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.Species entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeSpecies_49()) as _i8.Species);
  @override
  _i8.Id id(_i8.Species? species) =>
      (super.noSuchMethod(Invocation.method(#id, [species]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.Species? species) =>
      (super.noSuchMethod(Invocation.method(#name, [species]), returnValue: '')
          as String);
  @override
  _i9.Future<bool> delete(_i8.Id? id, {bool? notify = true}) =>
      (super.noSuchMethod(Invocation.method(#delete, [id], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOfCatches(_i8.Id? speciesId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [speciesId]),
          returnValue: 0) as int);
  @override
  List<_i8.Species> listSortedByName({String? filter}) => (super.noSuchMethod(
      Invocation.method(#listSortedByName, [], {#filter: filter}),
      returnValue: <_i8.Species>[]) as List<_i8.Species>);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  List<_i8.Species> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.Species>[]) as List<_i8.Species>);
  @override
  List<_i8.Species> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.Species>[]) as List<_i8.Species>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.Species? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<T extends _i54.GeneratedMessage>(
          _i8.Id? id, List<T>? items, bool Function(T)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.Species>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.Species>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.Species? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.Species? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.Species? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.Species> addSimpleListener(
          {void Function(_i8.Species)? onAdd,
          void Function(_i8.Species)? onDelete,
          void Function(_i8.Species)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.Species>())
          as _i10.SimpleEntityListener<_i8.Species>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SubscriptionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionManager extends _i1.Mock
    implements _i7.SubscriptionManager {
  MockSubscriptionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isFree =>
      (super.noSuchMethod(Invocation.getter(#isFree), returnValue: false)
          as bool);
  @override
  bool get isPro =>
      (super.noSuchMethod(Invocation.getter(#isPro), returnValue: false)
          as bool);
  @override
  _i9.Stream<void> get stream => (super.noSuchMethod(Invocation.getter(#stream),
      returnValue: Stream<void>.empty()) as _i9.Stream<void>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> purchaseSubscription(_i7.Subscription? sub) =>
      (super.noSuchMethod(Invocation.method(#purchaseSubscription, [sub]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i7.RestoreSubscriptionResult> restoreSubscription() =>
      (super.noSuchMethod(Invocation.method(#restoreSubscription, []),
              returnValue: Future<_i7.RestoreSubscriptionResult>.value(
                  _i7.RestoreSubscriptionResult.noSubscriptionsFound))
          as _i9.Future<_i7.RestoreSubscriptionResult>);
  @override
  _i9.Future<_i7.Subscriptions?> subscriptions() =>
      (super.noSuchMethod(Invocation.method(#subscriptions, []),
              returnValue: Future<_i7.Subscriptions?>.value())
          as _i9.Future<_i7.Subscriptions?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TimeManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeManager extends _i1.Mock implements _i23.TimeManager {
  MockTimeManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime get currentDateTime =>
      (super.noSuchMethod(Invocation.getter(#currentDateTime),
          returnValue: _FakeDateTime_50()) as DateTime);
  @override
  _i43.TimeOfDay get currentTime =>
      (super.noSuchMethod(Invocation.getter(#currentTime),
          returnValue: _FakeTimeOfDay_51()) as _i43.TimeOfDay);
  @override
  int get msSinceEpoch =>
      (super.noSuchMethod(Invocation.getter(#msSinceEpoch), returnValue: 0)
          as int);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TripManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripManager extends _i1.Mock implements _i24.TripManager {
  MockTripManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get numberOfTrips =>
      (super.noSuchMethod(Invocation.getter(#numberOfTrips), returnValue: 0)
          as int);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserPreferenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPreferenceManager extends _i1.Mock
    implements _i25.UserPreferenceManager {
  MockUserPreferenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  String get firestoreDocPath =>
      (super.noSuchMethod(Invocation.getter(#firestoreDocPath), returnValue: '')
          as String);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  List<_i8.Id> get baitVariantCustomIds =>
      (super.noSuchMethod(Invocation.getter(#baitVariantCustomIds),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  List<_i8.Id> get catchCustomEntityIds =>
      (super.noSuchMethod(Invocation.getter(#catchCustomEntityIds),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  List<_i8.Id> get atmosphereFieldIds =>
      (super.noSuchMethod(Invocation.getter(#atmosphereFieldIds),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  List<_i8.Id> get baitVariantFieldIds =>
      (super.noSuchMethod(Invocation.getter(#baitVariantFieldIds),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  List<_i8.Id> get catchFieldIds =>
      (super.noSuchMethod(Invocation.getter(#catchFieldIds),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  bool get autoFetchAtmosphere =>
      (super.noSuchMethod(Invocation.getter(#autoFetchAtmosphere),
          returnValue: false) as bool);
  @override
  bool get didRateApp =>
      (super.noSuchMethod(Invocation.getter(#didRateApp), returnValue: false)
          as bool);
  @override
  bool get didOnboard =>
      (super.noSuchMethod(Invocation.getter(#didOnboard), returnValue: false)
          as bool);
  @override
  bool get isPro =>
      (super.noSuchMethod(Invocation.getter(#isPro), returnValue: false)
          as bool);
  @override
  Map<String, dynamic> get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i9.Stream<void> get stream => (super.noSuchMethod(Invocation.getter(#stream),
      returnValue: Stream<void>.empty()) as _i9.Stream<void>);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> setBaitVariantCustomIds(List<_i8.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setBaitVariantCustomIds, [ids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setCatchCustomEntityIds(List<_i8.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setCatchCustomEntityIds, [ids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setAtmosphereFieldIds(List<_i8.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setAtmosphereFieldIds, [ids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setBaitVariantFieldIds(List<_i8.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setBaitVariantFieldIds, [ids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setCatchFieldIds(List<_i8.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setCatchFieldIds, [ids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setCatchLengthSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setCatchLengthSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setCatchWeightSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setCatchWeightSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setWaterDepthSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setWaterDepthSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setWaterTemperatureSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(
          Invocation.method(#setWaterTemperatureSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setAirTemperatureSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setAirTemperatureSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setAirPressureSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setAirPressureSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setAirVisibilitySystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setAirVisibilitySystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setWindSpeedSystem(_i8.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setWindSpeedSystem, [system]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setAutoFetchAtmosphere(bool? autoFetch) => (super
      .noSuchMethod(Invocation.method(#setAutoFetchAtmosphere, [autoFetch]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setRateTimerStartedAt(int? timestamp) => (super.noSuchMethod(
      Invocation.method(#setRateTimerStartedAt, [timestamp]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setDidRateApp(bool? rated) =>
      (super.noSuchMethod(Invocation.method(#setDidRateApp, [rated]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setDidOnboard(bool? onboarded) =>
      (super.noSuchMethod(Invocation.method(#setDidOnboard, [onboarded]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> setSelectedReportId(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#setSelectedReportId, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic>? initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]))
          as _i9.StreamSubscription<dynamic>?);
  @override
  _i9.Future<void> put(String? key, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void putLocal(String? key, dynamic value) =>
      super.noSuchMethod(Invocation.method(#putLocal, [key, value]),
          returnValueForMissingStub: null);
  @override
  void putStringList(String? key, List<String>? value) =>
      super.noSuchMethod(Invocation.method(#putStringList, [key, value]),
          returnValueForMissingStub: null);
  @override
  List<String> stringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#stringList, [key]),
          returnValue: <String>[]) as List<String>);
  @override
  _i9.Future<void> putId(String? key, _i8.Id? value) =>
      (super.noSuchMethod(Invocation.method(#putId, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i8.Id? id(String? key) =>
      (super.noSuchMethod(Invocation.method(#id, [key])) as _i8.Id?);
  @override
  _i9.Future<void> putIdList(String? key, List<_i8.Id>? value) =>
      (super.noSuchMethod(Invocation.method(#putIdList, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  List<_i8.Id> idList(String? key) =>
      (super.noSuchMethod(Invocation.method(#idList, [key]),
          returnValue: <_i8.Id>[]) as List<_i8.Id>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [WaterClarityManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockWaterClarityManager extends _i1.Mock
    implements _i26.WaterClarityManager {
  MockWaterClarityManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i8.WaterClarity, _i8.WaterClarity) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i8.WaterClarity __p0, _i8.WaterClarity __p1) => 0)
          as int Function(_i8.WaterClarity, _i8.WaterClarity));
  @override
  Map<_i8.Id, _i8.WaterClarity> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i8.Id, _i8.WaterClarity>{})
          as Map<_i8.Id, _i8.WaterClarity>);
  @override
  bool get enableFirestore => (super
          .noSuchMethod(Invocation.getter(#enableFirestore), returnValue: false)
      as bool);
  @override
  _i2.FirestoreWrapper get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirestoreWrapper_0()) as _i2.FirestoreWrapper);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  _i4.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_2()) as _i4.AppManager);
  @override
  _i5.AppPreferenceManager get appPreferenceManager => (super.noSuchMethod(
      Invocation.getter(#appPreferenceManager),
      returnValue: _FakeAppPreferenceManager_3()) as _i5.AppPreferenceManager);
  @override
  _i6.AuthManager get authManager =>
      (super.noSuchMethod(Invocation.getter(#authManager),
          returnValue: _FakeAuthManager_4()) as _i6.AuthManager);
  @override
  _i7.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_5()) as _i7.SubscriptionManager);
  @override
  bool get shouldUseFirestore =>
      (super.noSuchMethod(Invocation.getter(#shouldUseFirestore),
          returnValue: false) as bool);
  @override
  _i8.WaterClarity entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeWaterClarity_52()) as _i8.WaterClarity);
  @override
  _i8.Id id(_i8.WaterClarity? clarity) =>
      (super.noSuchMethod(Invocation.method(#id, [clarity]),
          returnValue: _FakeId_7()) as _i8.Id);
  @override
  String name(_i8.WaterClarity? clarity) =>
      (super.noSuchMethod(Invocation.method(#name, [clarity]), returnValue: '')
          as String);
  @override
  int numberOfCatches(_i8.Id? clarityId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [clarityId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(_i43.BuildContext? context, _i8.WaterClarity? clarity) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, clarity]),
          returnValue: '') as String);
  @override
  List<_i8.WaterClarity> listSortedByName({String? filter}) => (super
      .noSuchMethod(Invocation.method(#listSortedByName, [], {#filter: filter}),
          returnValue: <_i8.WaterClarity>[]) as List<_i8.WaterClarity>);
  @override
  bool matchesFilter(_i8.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i9.Future<void> initializeLocalData() =>
      (super.noSuchMethod(Invocation.method(#initializeLocalData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void clearMemory() => super.noSuchMethod(Invocation.method(#clearMemory, []),
      returnValueForMissingStub: null);
  @override
  _i9.StreamSubscription<dynamic> initializeFirestore(
          _i9.Completer<dynamic>? completer) =>
      (super.noSuchMethod(Invocation.method(#initializeFirestore, [completer]),
              returnValue: _FakeStreamSubscription_8<dynamic>())
          as _i9.StreamSubscription<dynamic>);
  @override
  void onUpgradeToPro() =>
      super.noSuchMethod(Invocation.method(#onUpgradeToPro, []),
          returnValueForMissingStub: null);
  @override
  List<_i8.WaterClarity> list([Iterable<_i8.Id>? ids]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i8.WaterClarity>[]) as List<_i8.WaterClarity>);
  @override
  List<_i8.WaterClarity> filteredList(String? filter) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter]),
          returnValue: <_i8.WaterClarity>[]) as List<_i8.WaterClarity>);
  @override
  bool idsMatchFilter(Iterable<_i8.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i8.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i9.Future<bool> addOrUpdate(_i8.WaterClarity? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> delete(_i8.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  int numberOf<T extends _i54.GeneratedMessage>(
          _i8.Id? id, List<T>? items, bool Function(T)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i10.EntityListener<_i8.WaterClarity>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.EntityListener<_i8.WaterClarity>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i8.WaterClarity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i8.WaterClarity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i8.WaterClarity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i10.SimpleEntityListener<_i8.WaterClarity> addSimpleListener(
          {void Function(_i8.WaterClarity)? onAdd,
          void Function(_i8.WaterClarity)? onDelete,
          void Function(_i8.WaterClarity)? onUpdate}) =>
      (super.noSuchMethod(
              Invocation.method(#addSimpleListener, [],
                  {#onAdd: onAdd, #onDelete: onDelete, #onUpdate: onUpdate}),
              returnValue: _FakeSimpleEntityListener_9<_i8.WaterClarity>())
          as _i10.SimpleEntityListener<_i8.WaterClarity>);
  @override
  _i9.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FilePickerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePickerWrapper extends _i1.Mock implements _i27.FilePickerWrapper {
  MockFilePickerWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i59.FilePickerResult?> pickFiles(
          {_i59.FileType? type = _i59.FileType.any,
          List<String>? allowedExtensions,
          bool? allowMultiple = false}) =>
      (super.noSuchMethod(
              Invocation.method(#pickFiles, [], {
                #type: type,
                #allowedExtensions: allowedExtensions,
                #allowMultiple: allowMultiple
              }),
              returnValue: Future<_i59.FilePickerResult?>.value())
          as _i9.Future<_i59.FilePickerResult?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebaseAuthWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthWrapper extends _i1.Mock
    implements _i28.FirebaseAuthWrapper {
  MockFirebaseAuthWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Stream<_i44.User?> authStateChanges() =>
      (super.noSuchMethod(Invocation.method(#authStateChanges, []),
          returnValue: Stream<_i44.User?>.empty()) as _i9.Stream<_i44.User?>);
  @override
  _i9.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i44.UserCredential> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i44.UserCredential>.value(_FakeUserCredential_53()))
          as _i9.Future<_i44.UserCredential>);
  @override
  _i9.Future<_i44.UserCredential> createUserWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#createUserWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i44.UserCredential>.value(_FakeUserCredential_53()))
          as _i9.Future<_i44.UserCredential>);
  @override
  _i9.Future<void> sendPasswordResetEmail(String? email) =>
      (super.noSuchMethod(Invocation.method(#sendPasswordResetEmail, [email]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebaseStorageWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorageWrapper extends _i1.Mock
    implements _i29.FirebaseStorageWrapper {
  MockFirebaseStorageWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i45.Reference ref([String? path]) =>
      (super.noSuchMethod(Invocation.method(#ref, [path]),
          returnValue: _FakeReference_54()) as _i45.Reference);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebaseWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseWrapper extends _i1.Mock implements _i30.FirebaseWrapper {
  MockFirebaseWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> initializeApp() =>
      (super.noSuchMethod(Invocation.method(#initializeApp, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirestoreWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreWrapper extends _i1.Mock implements _i2.FirestoreWrapper {
  MockFirestoreWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i46.CollectionReference collection(String? path) => (super.noSuchMethod(
      Invocation.method(#collection, [path]),
      returnValue: _FakeCollectionReference_55()) as _i46.CollectionReference);
  @override
  _i46.DocumentReference doc(String? path) =>
      (super.noSuchMethod(Invocation.method(#doc, [path]),
          returnValue: _FakeDocumentReference_56()) as _i46.DocumentReference);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GlobalKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalKey<T extends _i43.State<_i43.StatefulWidget>> extends _i1.Mock
    implements _i43.GlobalKey<T> {
  MockGlobalKey() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}

/// A class which mocks [HttpWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpWrapper extends _i1.Mock implements _i31.HttpWrapper {
  MockHttpWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i47.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i60.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i47.Response>.value(_FakeResponse_57()))
          as _i9.Future<_i47.Response>);
  @override
  _i9.Future<_i47.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i47.Response>.value(_FakeResponse_57()))
          as _i9.Future<_i47.Response>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ImageCompressWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageCompressWrapper extends _i1.Mock
    implements _i32.ImageCompressWrapper {
  MockImageCompressWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i57.Uint8List?> compress(String? path, int? quality, int? size) =>
      (super.noSuchMethod(Invocation.method(#compress, [path, quality, size]),
              returnValue: Future<_i57.Uint8List?>.value())
          as _i9.Future<_i57.Uint8List?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockIoWrapper extends _i1.Mock implements _i34.IoWrapper {
  MockIoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAndroid =>
      (super.noSuchMethod(Invocation.getter(#isAndroid), returnValue: false)
          as bool);
  @override
  bool get isIOS =>
      (super.noSuchMethod(Invocation.getter(#isIOS), returnValue: false)
          as bool);
  @override
  _i48.Directory directory(String? path) =>
      (super.noSuchMethod(Invocation.method(#directory, [path]),
          returnValue: _FakeDirectory_58()) as _i48.Directory);
  @override
  _i48.File file(String? path) =>
      (super.noSuchMethod(Invocation.method(#file, [path]),
          returnValue: _FakeFile_59()) as _i48.File);
  @override
  _i9.Future<bool> isConnected() =>
      (super.noSuchMethod(Invocation.method(#isConnected, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PackageInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfoWrapper extends _i1.Mock
    implements _i35.PackageInfoWrapper {
  MockPackageInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i49.PackageInfo> fromPlatform() => (super.noSuchMethod(
          Invocation.method(#fromPlatform, []),
          returnValue: Future<_i49.PackageInfo>.value(_FakePackageInfo_60()))
      as _i9.Future<_i49.PackageInfo>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PathProviderWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProviderWrapper extends _i1.Mock
    implements _i36.PathProviderWrapper {
  MockPathProviderWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<String> get appDocumentsPath =>
      (super.noSuchMethod(Invocation.getter(#appDocumentsPath),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<String> get temporaryPath =>
      (super.noSuchMethod(Invocation.getter(#temporaryPath),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PermissionHandlerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionHandlerWrapper extends _i1.Mock
    implements _i37.PermissionHandlerWrapper {
  MockPermissionHandlerWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> get isLocationGranted =>
      (super.noSuchMethod(Invocation.getter(#isLocationGranted),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> requestLocation() =>
      (super.noSuchMethod(Invocation.method(#requestLocation, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> requestPhotos() =>
      (super.noSuchMethod(Invocation.method(#requestPhotos, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> openSettings() =>
      (super.noSuchMethod(Invocation.method(#openSettings, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PhotoManagerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoManagerWrapper extends _i1.Mock
    implements _i38.PhotoManagerWrapper {
  MockPhotoManagerWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i52.AssetPathEntity?> getAllAssetPathEntity(
          _i52.RequestType? type) =>
      (super.noSuchMethod(Invocation.method(#getAllAssetPathEntity, [type]),
              returnValue: Future<_i52.AssetPathEntity?>.value())
          as _i9.Future<_i52.AssetPathEntity?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PurchasesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchasesWrapper extends _i1.Mock implements _i39.PurchasesWrapper {
  MockPurchasesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void addPurchaserInfoUpdateListener(
          dynamic Function(_i50.PurchaserInfo)? listener) =>
      super.noSuchMethod(
          Invocation.method(#addPurchaserInfoUpdateListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> setup(String? apiKey) =>
      (super.noSuchMethod(Invocation.method(#setup, [apiKey]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void setAllowSharingStoreAccount(bool? allowSharing) => super.noSuchMethod(
      Invocation.method(#setAllowSharingStoreAccount, [allowSharing]),
      returnValueForMissingStub: null);
  @override
  void setDebugEnabled(bool? enabled) =>
      super.noSuchMethod(Invocation.method(#setDebugEnabled, [enabled]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i50.Offerings> getOfferings() =>
      (super.noSuchMethod(Invocation.method(#getOfferings, []),
              returnValue: Future<_i50.Offerings>.value(_FakeOfferings_61()))
          as _i9.Future<_i50.Offerings>);
  @override
  _i9.Future<_i50.PurchaserInfo> getPurchaserInfo() =>
      (super.noSuchMethod(Invocation.method(#getPurchaserInfo, []),
              returnValue:
                  Future<_i50.PurchaserInfo>.value(_FakePurchaserInfo_62()))
          as _i9.Future<_i50.PurchaserInfo>);
  @override
  _i9.Future<_i50.PurchaserInfo> identify(String? appUserId) =>
      (super.noSuchMethod(Invocation.method(#identify, [appUserId]),
              returnValue:
                  Future<_i50.PurchaserInfo>.value(_FakePurchaserInfo_62()))
          as _i9.Future<_i50.PurchaserInfo>);
  @override
  _i9.Future<_i50.PurchaserInfo> purchasePackage(_i50.Package? package) =>
      (super.noSuchMethod(Invocation.method(#purchasePackage, [package]),
              returnValue:
                  Future<_i50.PurchaserInfo>.value(_FakePurchaserInfo_62()))
          as _i9.Future<_i50.PurchaserInfo>);
  @override
  _i9.Future<_i50.PurchaserInfo> reset() =>
      (super.noSuchMethod(Invocation.method(#reset, []),
              returnValue:
                  Future<_i50.PurchaserInfo>.value(_FakePurchaserInfo_62()))
          as _i9.Future<_i50.PurchaserInfo>);
  @override
  _i9.Future<_i50.PurchaserInfo> restoreTransactions() =>
      (super.noSuchMethod(Invocation.method(#restoreTransactions, []),
              returnValue:
                  Future<_i50.PurchaserInfo>.value(_FakePurchaserInfo_62()))
          as _i9.Future<_i50.PurchaserInfo>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ServicesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockServicesWrapper extends _i1.Mock implements _i40.ServicesWrapper {
  MockServicesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i51.MethodChannel methodChannel(String? name) =>
      (super.noSuchMethod(Invocation.method(#methodChannel, [name]),
          returnValue: _FakeMethodChannel_63()) as _i51.MethodChannel);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SharedPreferencesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesWrapper extends _i1.Mock
    implements _i41.SharedPreferencesWrapper {
  MockSharedPreferencesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> remove(String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UrlLauncherWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherWrapper extends _i1.Mock
    implements _i42.UrlLauncherWrapper {
  MockUrlLauncherWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<bool> canLaunch(String? url) =>
      (super.noSuchMethod(Invocation.method(#canLaunch, [url]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> launch(String? url) =>
      (super.noSuchMethod(Invocation.method(#launch, [url]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AssetPathEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetPathEntity extends _i1.Mock implements _i52.AssetPathEntity {
  MockAssetPathEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  set id(String? _id) => super.noSuchMethod(Invocation.setter(#id, _id),
      returnValueForMissingStub: null);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  set name(String? _name) => super.noSuchMethod(Invocation.setter(#name, _name),
      returnValueForMissingStub: null);
  @override
  int get assetCount =>
      (super.noSuchMethod(Invocation.getter(#assetCount), returnValue: 0)
          as int);
  @override
  set assetCount(int? _assetCount) =>
      super.noSuchMethod(Invocation.setter(#assetCount, _assetCount),
          returnValueForMissingStub: null);
  @override
  int get albumType =>
      (super.noSuchMethod(Invocation.getter(#albumType), returnValue: 0)
          as int);
  @override
  set albumType(int? _albumType) =>
      super.noSuchMethod(Invocation.setter(#albumType, _albumType),
          returnValueForMissingStub: null);
  @override
  _i52.FilterOptionGroup get filterOption =>
      (super.noSuchMethod(Invocation.getter(#filterOption),
          returnValue: _FakeFilterOptionGroup_64()) as _i52.FilterOptionGroup);
  @override
  set filterOption(_i52.FilterOptionGroup? _filterOption) =>
      super.noSuchMethod(Invocation.setter(#filterOption, _filterOption),
          returnValueForMissingStub: null);
  @override
  bool get isAll =>
      (super.noSuchMethod(Invocation.getter(#isAll), returnValue: false)
          as bool);
  @override
  set isAll(bool? _isAll) =>
      super.noSuchMethod(Invocation.setter(#isAll, _isAll),
          returnValueForMissingStub: null);
  @override
  _i52.RequestType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _FakeRequestType_65()) as _i52.RequestType);
  @override
  set type(_i52.RequestType? type) =>
      super.noSuchMethod(Invocation.setter(#type, type),
          returnValueForMissingStub: null);
  @override
  int get typeInt =>
      (super.noSuchMethod(Invocation.getter(#typeInt), returnValue: 0) as int);
  @override
  set typeInt(int? typeInt) =>
      super.noSuchMethod(Invocation.setter(#typeInt, typeInt),
          returnValueForMissingStub: null);
  @override
  _i9.Future<List<_i52.AssetEntity>> get assetList =>
      (super.noSuchMethod(Invocation.getter(#assetList),
              returnValue:
                  Future<List<_i52.AssetEntity>>.value(<_i52.AssetEntity>[]))
          as _i9.Future<List<_i52.AssetEntity>>);
  @override
  _i9.Future<void> refreshPathProperties({bool? maxDateTimeToNow = true}) =>
      (super.noSuchMethod(
          Invocation.method(#refreshPathProperties, [],
              {#maxDateTimeToNow: maxDateTimeToNow}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<List<_i52.AssetEntity>> getAssetListPaged(
          int? page, int? pageSize) =>
      (super.noSuchMethod(
              Invocation.method(#getAssetListPaged, [page, pageSize]),
              returnValue:
                  Future<List<_i52.AssetEntity>>.value(<_i52.AssetEntity>[]))
          as _i9.Future<List<_i52.AssetEntity>>);
  @override
  _i9.Future<List<_i52.AssetEntity>> getAssetListRange(
          {int? start, int? end}) =>
      (super.noSuchMethod(
          Invocation.method(#getAssetListRange, [], {#start: start, #end: end}),
          returnValue:
              Future<List<_i52.AssetEntity>>.value(<_i52.AssetEntity>[])) as _i9
          .Future<List<_i52.AssetEntity>>);
  @override
  _i9.Future<List<_i52.AssetPathEntity>> getSubPathList() =>
      (super.noSuchMethod(Invocation.method(#getSubPathList, []),
              returnValue: Future<List<_i52.AssetPathEntity>>.value(
                  <_i52.AssetPathEntity>[]))
          as _i9.Future<List<_i52.AssetPathEntity>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Batch].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatch extends _i1.Mock implements _i53.Batch {
  MockBatch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<List<Object?>> commit(
          {bool? exclusive, bool? noResult, bool? continueOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#commit, [], {
                #exclusive: exclusive,
                #noResult: noResult,
                #continueOnError: continueOnError
              }),
              returnValue: Future<List<Object?>>.value(<Object?>[]))
          as _i9.Future<List<Object?>>);
  @override
  void rawInsert(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawInsert, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void insert(String? table, Map<String, Object?>? values,
          {String? nullColumnHack,
          _i53.ConflictAlgorithm? conflictAlgorithm}) =>
      super.noSuchMethod(
          Invocation.method(#insert, [
            table,
            values
          ], {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValueForMissingStub: null);
  @override
  void rawUpdate(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawUpdate, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void update(String? table, Map<String, Object?>? values,
          {String? where,
          List<Object?>? whereArgs,
          _i53.ConflictAlgorithm? conflictAlgorithm}) =>
      super.noSuchMethod(
          Invocation.method(#update, [
            table,
            values
          ], {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValueForMissingStub: null);
  @override
  void rawDelete(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawDelete, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void delete(String? table, {String? where, List<Object?>? whereArgs}) =>
      super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValueForMissingStub: null);
  @override
  void execute(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#execute, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void query(String? table,
          {bool? distinct,
          List<String>? columns,
          String? where,
          List<Object?>? whereArgs,
          String? groupBy,
          String? having,
          String? orderBy,
          int? limit,
          int? offset}) =>
      super.noSuchMethod(
          Invocation.method(#query, [
            table
          ], {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset
          }),
          returnValueForMissingStub: null);
  @override
  void rawQuery(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawQuery, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference extends _i1.Mock
    implements _i46.CollectionReference {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i46.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_66()) as _i46.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i9.Future<_i46.DocumentReference> add(Map<String, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#add, [data]),
              returnValue: Future<_i46.DocumentReference>.value(
                  _FakeDocumentReference_56()))
          as _i9.Future<_i46.DocumentReference>);
  @override
  _i46.DocumentReference doc([String? path]) =>
      (super.noSuchMethod(Invocation.method(#doc, [path]),
          returnValue: _FakeDocumentReference_56()) as _i46.DocumentReference);
  @override
  String toString() => super.toString();
  @override
  _i46.Query endAtDocument(_i46.DocumentSnapshot? documentSnapshot) =>
      (super.noSuchMethod(Invocation.method(#endAtDocument, [documentSnapshot]),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i46.Query endAt(List<dynamic>? values) =>
      (super.noSuchMethod(Invocation.method(#endAt, [values]),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i46.Query endBeforeDocument(_i46.DocumentSnapshot? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#endBeforeDocument, [documentSnapshot]),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i46.Query endBefore(List<dynamic>? values) =>
      (super.noSuchMethod(Invocation.method(#endBefore, [values]),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i9.Future<_i46.QuerySnapshot> get([_i46.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue:
                  Future<_i46.QuerySnapshot>.value(_FakeQuerySnapshot_68()))
          as _i9.Future<_i46.QuerySnapshot>);
  @override
  _i46.Query limit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limit, [limit]),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i46.Query limitToLast(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limitToLast, [limit]),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i9.Stream<_i46.QuerySnapshot> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: Stream<_i46.QuerySnapshot>.empty())
          as _i9.Stream<_i46.QuerySnapshot>);
  @override
  _i46.Query orderBy(dynamic field, {bool? descending = false}) =>
      (super.noSuchMethod(
          Invocation.method(#orderBy, [field], {#descending: descending}),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i46.Query startAfterDocument(_i46.DocumentSnapshot? documentSnapshot) =>
      (super.noSuchMethod(
          Invocation.method(#startAfterDocument, [documentSnapshot]),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i46.Query startAfter(List<dynamic>? values) =>
      (super.noSuchMethod(Invocation.method(#startAfter, [values]),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i46.Query startAtDocument(_i46.DocumentSnapshot? documentSnapshot) => (super
      .noSuchMethod(Invocation.method(#startAtDocument, [documentSnapshot]),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i46.Query startAt(List<dynamic>? values) =>
      (super.noSuchMethod(Invocation.method(#startAt, [values]),
          returnValue: _FakeQuery_67()) as _i46.Query);
  @override
  _i46.Query where(dynamic field,
          {dynamic isEqualTo,
          dynamic isNotEqualTo,
          dynamic isLessThan,
          dynamic isLessThanOrEqualTo,
          dynamic isGreaterThan,
          dynamic isGreaterThanOrEqualTo,
          dynamic arrayContains,
          List<dynamic>? arrayContainsAny,
          List<dynamic>? whereIn,
          List<dynamic>? whereNotIn,
          bool? isNull}) =>
      (super.noSuchMethod(
          Invocation.method(#where, [
            field
          ], {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull
          }),
          returnValue: _FakeQuery_67()) as _i46.Query);
}

/// A class which mocks [Completer].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleter<T> extends _i1.Mock implements _i9.Completer<T> {
  MockCompleter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<T> get future => (super.noSuchMethod(Invocation.getter(#future),
      returnValue: Future<T>.value(null)) as _i9.Future<T>);
  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);
  @override
  void complete([_i9.FutureOr<T>? value]) =>
      super.noSuchMethod(Invocation.method(#complete, [value]),
          returnValueForMissingStub: null);
  @override
  void completeError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#completeError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DatabaseExecutor].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseExecutor extends _i1.Mock implements _i53.DatabaseExecutor {
  MockDatabaseExecutor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> execute(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#execute, [sql, arguments]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<int> rawInsert(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawInsert, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> insert(String? table, Map<String, Object?>? values,
          {String? nullColumnHack,
          _i53.ConflictAlgorithm? conflictAlgorithm}) =>
      (super.noSuchMethod(
          Invocation.method(#insert, [
            table,
            values
          ], {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<List<Map<String, Object?>>> query(String? table,
          {bool? distinct,
          List<String>? columns,
          String? where,
          List<Object?>? whereArgs,
          String? groupBy,
          String? having,
          String? orderBy,
          int? limit,
          int? offset}) =>
      (super.noSuchMethod(
              Invocation.method(#query, [
                table
              ], {
                #distinct: distinct,
                #columns: columns,
                #where: where,
                #whereArgs: whereArgs,
                #groupBy: groupBy,
                #having: having,
                #orderBy: orderBy,
                #limit: limit,
                #offset: offset
              }),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i9.Future<List<Map<String, Object?>>>);
  @override
  _i9.Future<List<Map<String, Object?>>> rawQuery(String? sql,
          [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawQuery, [sql, arguments]),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i9.Future<List<Map<String, Object?>>>);
  @override
  _i9.Future<int> rawUpdate(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawUpdate, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> update(String? table, Map<String, Object?>? values,
          {String? where,
          List<Object?>? whereArgs,
          _i53.ConflictAlgorithm? conflictAlgorithm}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [
            table,
            values
          ], {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> rawDelete(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawDelete, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<int> delete(String? table,
          {String? where, List<Object?>? whereArgs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i53.Batch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeBatch_69()) as _i53.Batch);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i48.Directory {
  MockDirectory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_70())
          as Uri);
  @override
  _i48.Directory get absolute =>
      (super.noSuchMethod(Invocation.getter(#absolute),
          returnValue: _FakeDirectory_58()) as _i48.Directory);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i48.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
      returnValue: _FakeDirectory_58()) as _i48.Directory);
  @override
  _i9.Future<_i48.Directory> create({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#create, [], {#recursive: recursive}),
              returnValue: Future<_i48.Directory>.value(_FakeDirectory_58()))
      as _i9.Future<_i48.Directory>);
  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#createSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i9.Future<_i48.Directory> createTemp([String? prefix]) =>
      (super.noSuchMethod(Invocation.method(#createTemp, [prefix]),
              returnValue: Future<_i48.Directory>.value(_FakeDirectory_58()))
          as _i9.Future<_i48.Directory>);
  @override
  _i48.Directory createTempSync([String? prefix]) =>
      (super.noSuchMethod(Invocation.method(#createTempSync, [prefix]),
          returnValue: _FakeDirectory_58()) as _i48.Directory);
  @override
  _i9.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i9.Future<_i48.Directory> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future<_i48.Directory>.value(_FakeDirectory_58()))
          as _i9.Future<_i48.Directory>);
  @override
  _i48.Directory renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeDirectory_58()) as _i48.Directory);
  @override
  _i9.Stream<_i48.FileSystemEntity> list(
          {bool? recursive = false, bool? followLinks = true}) =>
      (super.noSuchMethod(
              Invocation.method(#list, [],
                  {#recursive: recursive, #followLinks: followLinks}),
              returnValue: Stream<_i48.FileSystemEntity>.empty())
          as _i9.Stream<_i48.FileSystemEntity>);
  @override
  List<_i48.FileSystemEntity> listSync(
          {bool? recursive = false, bool? followLinks = true}) =>
      (super.noSuchMethod(
              Invocation.method(#listSync, [],
                  {#recursive: recursive, #followLinks: followLinks}),
              returnValue: <_i48.FileSystemEntity>[])
          as List<_i48.FileSystemEntity>);
  @override
  String toString() => super.toString();
  @override
  _i9.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i9.Future<_i48.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: Future<_i48.FileStat>.value(_FakeFileStat_71()))
          as _i9.Future<_i48.FileStat>);
  @override
  _i48.FileStat statSync() =>
      (super.noSuchMethod(Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_71()) as _i48.FileStat);
  @override
  _i9.Future<_i48.FileSystemEntity> delete({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
              returnValue: Future<_i48.FileSystemEntity>.value(
                  _FakeFileSystemEntity_72()))
      as _i9.Future<_i48.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i9.Stream<_i48.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: Stream<_i48.FileSystemEvent>.empty())
          as _i9.Stream<_i48.FileSystemEvent>);
}

/// A class which mocks [DocumentChange].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentChange extends _i1.Mock implements _i46.DocumentChange {
  MockDocumentChange() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i46.DocumentChangeType get type => (super.noSuchMethod(
      Invocation.getter(#type),
      returnValue: _i46.DocumentChangeType.added) as _i46.DocumentChangeType);
  @override
  int get oldIndex =>
      (super.noSuchMethod(Invocation.getter(#oldIndex), returnValue: 0) as int);
  @override
  int get newIndex =>
      (super.noSuchMethod(Invocation.getter(#newIndex), returnValue: 0) as int);
  @override
  _i46.DocumentSnapshot get doc => (super.noSuchMethod(Invocation.getter(#doc),
      returnValue: _FakeDocumentSnapshot_73()) as _i46.DocumentSnapshot);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentReference extends _i1.Mock implements _i46.DocumentReference {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i46.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_66()) as _i46.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i46.CollectionReference get parent => (super.noSuchMethod(
      Invocation.getter(#parent),
      returnValue: _FakeCollectionReference_55()) as _i46.CollectionReference);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i46.CollectionReference collection(String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_55())
          as _i46.CollectionReference);
  @override
  _i9.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i46.DocumentSnapshot> get([_i46.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: Future<_i46.DocumentSnapshot>.value(
                  _FakeDocumentSnapshot_73()))
          as _i9.Future<_i46.DocumentSnapshot>);
  @override
  _i9.Stream<_i46.DocumentSnapshot> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: Stream<_i46.DocumentSnapshot>.empty())
          as _i9.Stream<_i46.DocumentSnapshot>);
  @override
  _i9.Future<void> set(Map<String, dynamic>? data,
          [_i46.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> update(Map<String, dynamic>? data) =>
      (super.noSuchMethod(Invocation.method(#update, [data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot extends _i1.Mock implements _i46.DocumentSnapshot {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i46.DocumentReference get reference =>
      (super.noSuchMethod(Invocation.getter(#reference),
          returnValue: _FakeDocumentReference_56()) as _i46.DocumentReference);
  @override
  _i46.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata_74()) as _i46.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DownloadTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadTask extends _i1.Mock implements _i45.DownloadTask {
  MockDownloadTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i45.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_75()) as _i45.FirebaseStorage);
  @override
  _i9.Stream<_i45.TaskSnapshot> get snapshotEvents =>
      (super.noSuchMethod(Invocation.getter(#snapshotEvents),
              returnValue: Stream<_i45.TaskSnapshot>.empty())
          as _i9.Stream<_i45.TaskSnapshot>);
  @override
  _i45.TaskSnapshot get snapshot =>
      (super.noSuchMethod(Invocation.getter(#snapshot),
          returnValue: _FakeTaskSnapshot_76()) as _i45.TaskSnapshot);
  @override
  _i9.Future<bool> pause() => (super.noSuchMethod(Invocation.method(#pause, []),
      returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> resume() =>
      (super.noSuchMethod(Invocation.method(#resume, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> cancel() =>
      (super.noSuchMethod(Invocation.method(#cancel, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Stream<_i45.TaskSnapshot> asStream() =>
      (super.noSuchMethod(Invocation.method(#asStream, []),
              returnValue: Stream<_i45.TaskSnapshot>.empty())
          as _i9.Stream<_i45.TaskSnapshot>);
  @override
  _i9.Future<_i45.TaskSnapshot> catchError(Function? onError,
          {bool Function(Object)? test}) =>
      (super.noSuchMethod(
              Invocation.method(#catchError, [onError], {#test: test}),
              returnValue:
                  Future<_i45.TaskSnapshot>.value(_FakeTaskSnapshot_76()))
          as _i9.Future<_i45.TaskSnapshot>);
  @override
  _i9.Future<S> then<S>(_i9.FutureOr<S>? Function(_i45.TaskSnapshot)? onValue,
          {Function? onError}) =>
      (super.noSuchMethod(
          Invocation.method(#then, [onValue], {#onError: onError}),
          returnValue: Future<S>.value(null)) as _i9.Future<S>);
  @override
  _i9.Future<_i45.TaskSnapshot> whenComplete(
          _i9.FutureOr<dynamic>? Function()? action) =>
      (super.noSuchMethod(Invocation.method(#whenComplete, [action]),
              returnValue:
                  Future<_i45.TaskSnapshot>.value(_FakeTaskSnapshot_76()))
          as _i9.Future<_i45.TaskSnapshot>);
  @override
  _i9.Future<_i45.TaskSnapshot> timeout(Duration? timeLimit,
          {_i9.FutureOr<_i45.TaskSnapshot> Function()? onTimeout}) =>
      (super.noSuchMethod(
              Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
              returnValue:
                  Future<_i45.TaskSnapshot>.value(_FakeTaskSnapshot_76()))
          as _i9.Future<_i45.TaskSnapshot>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [EntitlementInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntitlementInfo extends _i1.Mock implements _i50.EntitlementInfo {
  MockEntitlementInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  bool get isActive =>
      (super.noSuchMethod(Invocation.getter(#isActive), returnValue: false)
          as bool);
  @override
  bool get willRenew =>
      (super.noSuchMethod(Invocation.getter(#willRenew), returnValue: false)
          as bool);
  @override
  _i50.PeriodType get periodType =>
      (super.noSuchMethod(Invocation.getter(#periodType),
          returnValue: _i50.PeriodType.intro) as _i50.PeriodType);
  @override
  String get latestPurchaseDate => (super
          .noSuchMethod(Invocation.getter(#latestPurchaseDate), returnValue: '')
      as String);
  @override
  String get originalPurchaseDate =>
      (super.noSuchMethod(Invocation.getter(#originalPurchaseDate),
          returnValue: '') as String);
  @override
  _i50.Store get store => (super.noSuchMethod(Invocation.getter(#store),
      returnValue: _i50.Store.appStore) as _i50.Store);
  @override
  String get productIdentifier => (super
          .noSuchMethod(Invocation.getter(#productIdentifier), returnValue: '')
      as String);
  @override
  bool get isSandbox =>
      (super.noSuchMethod(Invocation.getter(#isSandbox), returnValue: false)
          as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [EntitlementInfos].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntitlementInfos extends _i1.Mock implements _i50.EntitlementInfos {
  MockEntitlementInfos() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i50.EntitlementInfo> get all =>
      (super.noSuchMethod(Invocation.getter(#all),
              returnValue: <String, _i50.EntitlementInfo>{})
          as Map<String, _i50.EntitlementInfo>);
  @override
  Map<String, _i50.EntitlementInfo> get active =>
      (super.noSuchMethod(Invocation.getter(#active),
              returnValue: <String, _i50.EntitlementInfo>{})
          as Map<String, _i50.EntitlementInfo>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [EntityListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntityListener<T> extends _i1.Mock implements _i10.EntityListener<T> {
  MockEntityListener() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onAdd(void Function(T)? _onAdd) =>
      super.noSuchMethod(Invocation.setter(#onAdd, _onAdd),
          returnValueForMissingStub: null);
  @override
  set onDelete(void Function(T)? _onDelete) =>
      super.noSuchMethod(Invocation.setter(#onDelete, _onDelete),
          returnValueForMissingStub: null);
  @override
  set onUpdate(void Function(T)? _onUpdate) =>
      super.noSuchMethod(Invocation.setter(#onUpdate, _onUpdate),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FileSystemEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystemEntity extends _i1.Mock implements _i48.FileSystemEntity {
  MockFileSystemEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_70())
          as Uri);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i48.FileSystemEntity get absolute =>
      (super.noSuchMethod(Invocation.getter(#absolute),
          returnValue: _FakeFileSystemEntity_72()) as _i48.FileSystemEntity);
  @override
  _i48.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
      returnValue: _FakeDirectory_58()) as _i48.Directory);
  @override
  _i9.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i9.Future<_i48.FileSystemEntity> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future<_i48.FileSystemEntity>.value(
                  _FakeFileSystemEntity_72()))
          as _i9.Future<_i48.FileSystemEntity>);
  @override
  _i48.FileSystemEntity renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeFileSystemEntity_72()) as _i48.FileSystemEntity);
  @override
  _i9.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i9.Future<_i48.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: Future<_i48.FileStat>.value(_FakeFileStat_71()))
          as _i9.Future<_i48.FileStat>);
  @override
  _i48.FileStat statSync() =>
      (super.noSuchMethod(Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_71()) as _i48.FileStat);
  @override
  _i9.Future<_i48.FileSystemEntity> delete({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
              returnValue: Future<_i48.FileSystemEntity>.value(
                  _FakeFileSystemEntity_72()))
      as _i9.Future<_i48.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i9.Stream<_i48.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: Stream<_i48.FileSystemEvent>.empty())
          as _i9.Stream<_i48.FileSystemEvent>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FullMetadata].
///
/// See the documentation for Mockito's code generation for more information.
class MockFullMetadata extends _i1.Mock implements _i45.FullMetadata {
  MockFullMetadata() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get fullPath =>
      (super.noSuchMethod(Invocation.getter(#fullPath), returnValue: '')
          as String);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LegacyImporter].
///
/// See the documentation for Mockito's code generation for more information.
class MockLegacyImporter extends _i1.Mock implements _i61.LegacyImporter {
  MockLegacyImporter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> start() => (super.noSuchMethod(Invocation.method(#start, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MethodChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodChannel extends _i1.Mock implements _i51.MethodChannel {
  MockMethodChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i51.MethodCodec get codec => (super.noSuchMethod(Invocation.getter(#codec),
      returnValue: _FakeMethodCodec_77()) as _i51.MethodCodec);
  @override
  _i51.BinaryMessenger get binaryMessenger =>
      (super.noSuchMethod(Invocation.getter(#binaryMessenger),
          returnValue: _FakeBinaryMessenger_78()) as _i51.BinaryMessenger);
  @override
  _i9.Future<T?> invokeMethod<T>(String? method, [dynamic arguments]) =>
      (super.noSuchMethod(Invocation.method(#invokeMethod, [method, arguments]),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  _i9.Future<List<T>?> invokeListMethod<T>(String? method,
          [dynamic arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#invokeListMethod, [method, arguments]),
          returnValue: Future<List<T>?>.value()) as _i9.Future<List<T>?>);
  @override
  _i9.Future<Map<K, V>?> invokeMapMethod<K, V>(String? method,
          [dynamic arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#invokeMapMethod, [method, arguments]),
          returnValue: Future<Map<K, V>?>.value()) as _i9.Future<Map<K, V>?>);
  @override
  void setMethodCallHandler(
          _i9.Future<dynamic> Function(_i51.MethodCall)? handler) =>
      super.noSuchMethod(Invocation.method(#setMethodCallHandler, [handler]),
          returnValueForMissingStub: null);
  @override
  bool checkMethodCallHandler(
          _i9.Future<dynamic> Function(_i51.MethodCall)? handler) =>
      (super.noSuchMethod(Invocation.method(#checkMethodCallHandler, [handler]),
          returnValue: false) as bool);
  @override
  void setMockMethodCallHandler(
          _i9.Future<dynamic>? Function(_i51.MethodCall)? handler) =>
      super.noSuchMethod(
          Invocation.method(#setMockMethodCallHandler, [handler]),
          returnValueForMissingStub: null);
  @override
  bool checkMockMethodCallHandler(
          _i9.Future<dynamic> Function(_i51.MethodCall)? handler) =>
      (super.noSuchMethod(
          Invocation.method(#checkMockMethodCallHandler, [handler]),
          returnValue: false) as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NameValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockNameValidator extends _i1.Mock implements _i62.NameValidator {
  MockNameValidator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i62.ValidationCallback? run(_i43.BuildContext? context, String? newName) =>
      (super.noSuchMethod(Invocation.method(#run, [context, newName]))
          as _i62.ValidationCallback?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i43.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
          _i43.Route<dynamic>? route, _i43.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i43.Route<dynamic>? route, _i43.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i43.Route<dynamic>? route, _i43.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i43.Route<dynamic>? newRoute, _i43.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i43.Route<dynamic>? route, _i43.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Offering].
///
/// See the documentation for Mockito's code generation for more information.
class MockOffering extends _i1.Mock implements _i50.Offering {
  MockOffering() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  String get serverDescription => (super
          .noSuchMethod(Invocation.getter(#serverDescription), returnValue: '')
      as String);
  @override
  List<_i50.Package> get availablePackages =>
      (super.noSuchMethod(Invocation.getter(#availablePackages),
          returnValue: <_i50.Package>[]) as List<_i50.Package>);
  @override
  _i50.Package? getPackage(String? identifier) =>
      (super.noSuchMethod(Invocation.method(#getPackage, [identifier]))
          as _i50.Package?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Offerings].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfferings extends _i1.Mock implements _i50.Offerings {
  MockOfferings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i50.Offering> get all => (super.noSuchMethod(
      Invocation.getter(#all),
      returnValue: <String, _i50.Offering>{}) as Map<String, _i50.Offering>);
  @override
  _i50.Offering? getOffering(String? identifier) =>
      (super.noSuchMethod(Invocation.method(#getOffering, [identifier]))
          as _i50.Offering?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Package].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackage extends _i1.Mock implements _i50.Package {
  MockPackage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  _i50.PackageType get packageType =>
      (super.noSuchMethod(Invocation.getter(#packageType),
          returnValue: _i50.PackageType.unknown) as _i50.PackageType);
  @override
  _i50.Product get product => (super.noSuchMethod(Invocation.getter(#product),
      returnValue: _FakeProduct_79()) as _i50.Product);
  @override
  String get offeringIdentifier => (super
          .noSuchMethod(Invocation.getter(#offeringIdentifier), returnValue: '')
      as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Product].
///
/// See the documentation for Mockito's code generation for more information.
class MockProduct extends _i1.Mock implements _i50.Product {
  MockProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  String get description =>
      (super.noSuchMethod(Invocation.getter(#description), returnValue: '')
          as String);
  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  double get price =>
      (super.noSuchMethod(Invocation.getter(#price), returnValue: 0.0)
          as double);
  @override
  String get priceString =>
      (super.noSuchMethod(Invocation.getter(#priceString), returnValue: '')
          as String);
  @override
  String get currencyCode =>
      (super.noSuchMethod(Invocation.getter(#currencyCode), returnValue: '')
          as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PurchaserInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchaserInfo extends _i1.Mock implements _i50.PurchaserInfo {
  MockPurchaserInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i50.EntitlementInfos get entitlements =>
      (super.noSuchMethod(Invocation.getter(#entitlements),
          returnValue: _FakeEntitlementInfos_80()) as _i50.EntitlementInfos);
  @override
  Map<String, String?> get allExpirationDates =>
      (super.noSuchMethod(Invocation.getter(#allExpirationDates),
          returnValue: <String, String?>{}) as Map<String, String?>);
  @override
  Map<String, String> get allPurchaseDates =>
      (super.noSuchMethod(Invocation.getter(#allPurchaseDates),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  List<String> get activeSubscriptions =>
      (super.noSuchMethod(Invocation.getter(#activeSubscriptions),
          returnValue: <String>[]) as List<String>);
  @override
  List<String> get allPurchasedProductIdentifiers =>
      (super.noSuchMethod(Invocation.getter(#allPurchasedProductIdentifiers),
          returnValue: <String>[]) as List<String>);
  @override
  List<_i63.Transaction> get nonSubscriptionTransactions =>
      (super.noSuchMethod(Invocation.getter(#nonSubscriptionTransactions),
          returnValue: <_i63.Transaction>[]) as List<_i63.Transaction>);
  @override
  String get firstSeen =>
      (super.noSuchMethod(Invocation.getter(#firstSeen), returnValue: '')
          as String);
  @override
  String get originalAppUserId => (super
          .noSuchMethod(Invocation.getter(#originalAppUserId), returnValue: '')
      as String);
  @override
  String get requestDate =>
      (super.noSuchMethod(Invocation.getter(#requestDate), returnValue: '')
          as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot extends _i1.Mock implements _i46.QuerySnapshot {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i46.QueryDocumentSnapshot> get docs =>
      (super.noSuchMethod(Invocation.getter(#docs),
              returnValue: <_i46.QueryDocumentSnapshot>[])
          as List<_i46.QueryDocumentSnapshot>);
  @override
  List<_i46.DocumentChange> get docChanges =>
      (super.noSuchMethod(Invocation.getter(#docChanges),
          returnValue: <_i46.DocumentChange>[]) as List<_i46.DocumentChange>);
  @override
  _i46.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeSnapshotMetadata_74()) as _i46.SnapshotMetadata);
  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Reference].
///
/// See the documentation for Mockito's code generation for more information.
class MockReference extends _i1.Mock implements _i45.Reference {
  MockReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i45.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_75()) as _i45.FirebaseStorage);
  @override
  String get bucket =>
      (super.noSuchMethod(Invocation.getter(#bucket), returnValue: '')
          as String);
  @override
  String get fullPath =>
      (super.noSuchMethod(Invocation.getter(#fullPath), returnValue: '')
          as String);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i45.Reference get root => (super.noSuchMethod(Invocation.getter(#root),
      returnValue: _FakeReference_54()) as _i45.Reference);
  @override
  _i45.Reference child(String? path) =>
      (super.noSuchMethod(Invocation.method(#child, [path]),
          returnValue: _FakeReference_54()) as _i45.Reference);
  @override
  _i9.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<String> getDownloadURL() =>
      (super.noSuchMethod(Invocation.method(#getDownloadURL, []),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i45.FullMetadata> getMetadata() => (super.noSuchMethod(
          Invocation.method(#getMetadata, []),
          returnValue: Future<_i45.FullMetadata>.value(_FakeFullMetadata_81()))
      as _i9.Future<_i45.FullMetadata>);
  @override
  _i9.Future<_i45.ListResult> list([_i45.ListOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#list, [options]),
              returnValue: Future<_i45.ListResult>.value(_FakeListResult_82()))
          as _i9.Future<_i45.ListResult>);
  @override
  _i9.Future<_i45.ListResult> listAll() =>
      (super.noSuchMethod(Invocation.method(#listAll, []),
              returnValue: Future<_i45.ListResult>.value(_FakeListResult_82()))
          as _i9.Future<_i45.ListResult>);
  @override
  _i9.Future<_i57.Uint8List?> getData([int? maxSize = 10485760]) =>
      (super.noSuchMethod(Invocation.method(#getData, [maxSize]),
              returnValue: Future<_i57.Uint8List?>.value())
          as _i9.Future<_i57.Uint8List?>);
  @override
  _i45.UploadTask putData(_i57.Uint8List? data,
          [_i45.SettableMetadata? metadata]) =>
      (super.noSuchMethod(Invocation.method(#putData, [data, metadata]),
          returnValue: _FakeUploadTask_83()) as _i45.UploadTask);
  @override
  _i45.UploadTask putBlob(dynamic blob, [_i45.SettableMetadata? metadata]) =>
      (super.noSuchMethod(Invocation.method(#putBlob, [blob, metadata]),
          returnValue: _FakeUploadTask_83()) as _i45.UploadTask);
  @override
  _i45.UploadTask putFile(_i48.File? file, [_i45.SettableMetadata? metadata]) =>
      (super.noSuchMethod(Invocation.method(#putFile, [file, metadata]),
          returnValue: _FakeUploadTask_83()) as _i45.UploadTask);
  @override
  _i45.UploadTask putString(String? data,
          {_i45.PutStringFormat? format = _i45.PutStringFormat.raw,
          _i45.SettableMetadata? metadata}) =>
      (super.noSuchMethod(
          Invocation.method(
              #putString, [data], {#format: format, #metadata: metadata}),
          returnValue: _FakeUploadTask_83()) as _i45.UploadTask);
  @override
  _i9.Future<_i45.FullMetadata> updateMetadata(
          _i45.SettableMetadata? metadata) =>
      (super.noSuchMethod(Invocation.method(#updateMetadata, [metadata]),
              returnValue:
                  Future<_i45.FullMetadata>.value(_FakeFullMetadata_81()))
          as _i9.Future<_i45.FullMetadata>);
  @override
  _i45.DownloadTask writeToFile(_i48.File? file) =>
      (super.noSuchMethod(Invocation.method(#writeToFile, [file]),
          returnValue: _FakeDownloadTask_84()) as _i45.DownloadTask);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse extends _i1.Mock implements _i47.Response {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i57.Uint8List get bodyBytes =>
      (super.noSuchMethod(Invocation.getter(#bodyBytes),
          returnValue: _i57.Uint8List(0)) as _i57.Uint8List);
  @override
  String get body =>
      (super.noSuchMethod(Invocation.getter(#body), returnValue: '') as String);
  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [StreamSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSubscription<T> extends _i1.Mock
    implements _i9.StreamSubscription<T> {
  MockStreamSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);
  @override
  _i9.Future<void> cancel() =>
      (super.noSuchMethod(Invocation.method(#cancel, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void onData(void Function(T)? handleData) =>
      super.noSuchMethod(Invocation.method(#onData, [handleData]),
          returnValueForMissingStub: null);
  @override
  void onError(Function? handleError) =>
      super.noSuchMethod(Invocation.method(#onError, [handleError]),
          returnValueForMissingStub: null);
  @override
  void onDone(void Function()? handleDone) =>
      super.noSuchMethod(Invocation.method(#onDone, [handleDone]),
          returnValueForMissingStub: null);
  @override
  void pause([_i9.Future<void>? resumeSignal]) =>
      super.noSuchMethod(Invocation.method(#pause, [resumeSignal]),
          returnValueForMissingStub: null);
  @override
  void resume() => super.noSuchMethod(Invocation.method(#resume, []),
      returnValueForMissingStub: null);
  @override
  _i9.Future<E> asFuture<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#asFuture, [futureValue]),
          returnValue: Future<E>.value(null)) as _i9.Future<E>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TaskSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskSnapshot extends _i1.Mock implements _i45.TaskSnapshot {
  MockTaskSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i45.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_75()) as _i45.FirebaseStorage);
  @override
  int get bytesTransferred =>
      (super.noSuchMethod(Invocation.getter(#bytesTransferred), returnValue: 0)
          as int);
  @override
  _i45.Reference get ref => (super.noSuchMethod(Invocation.getter(#ref),
      returnValue: _FakeReference_54()) as _i45.Reference);
  @override
  _i45.TaskState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i45.TaskState.paused) as _i45.TaskState);
  @override
  int get totalBytes =>
      (super.noSuchMethod(Invocation.getter(#totalBytes), returnValue: 0)
          as int);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UploadTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadTask extends _i1.Mock implements _i45.UploadTask {
  MockUploadTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i45.FirebaseStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeFirebaseStorage_75()) as _i45.FirebaseStorage);
  @override
  _i9.Stream<_i45.TaskSnapshot> get snapshotEvents =>
      (super.noSuchMethod(Invocation.getter(#snapshotEvents),
              returnValue: Stream<_i45.TaskSnapshot>.empty())
          as _i9.Stream<_i45.TaskSnapshot>);
  @override
  _i45.TaskSnapshot get snapshot =>
      (super.noSuchMethod(Invocation.getter(#snapshot),
          returnValue: _FakeTaskSnapshot_76()) as _i45.TaskSnapshot);
  @override
  _i9.Future<bool> pause() => (super.noSuchMethod(Invocation.method(#pause, []),
      returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> resume() =>
      (super.noSuchMethod(Invocation.method(#resume, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Future<bool> cancel() =>
      (super.noSuchMethod(Invocation.method(#cancel, []),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  _i9.Stream<_i45.TaskSnapshot> asStream() =>
      (super.noSuchMethod(Invocation.method(#asStream, []),
              returnValue: Stream<_i45.TaskSnapshot>.empty())
          as _i9.Stream<_i45.TaskSnapshot>);
  @override
  _i9.Future<_i45.TaskSnapshot> catchError(Function? onError,
          {bool Function(Object)? test}) =>
      (super.noSuchMethod(
              Invocation.method(#catchError, [onError], {#test: test}),
              returnValue:
                  Future<_i45.TaskSnapshot>.value(_FakeTaskSnapshot_76()))
          as _i9.Future<_i45.TaskSnapshot>);
  @override
  _i9.Future<S> then<S>(_i9.FutureOr<S>? Function(_i45.TaskSnapshot)? onValue,
          {Function? onError}) =>
      (super.noSuchMethod(
          Invocation.method(#then, [onValue], {#onError: onError}),
          returnValue: Future<S>.value(null)) as _i9.Future<S>);
  @override
  _i9.Future<_i45.TaskSnapshot> whenComplete(
          _i9.FutureOr<dynamic>? Function()? action) =>
      (super.noSuchMethod(Invocation.method(#whenComplete, [action]),
              returnValue:
                  Future<_i45.TaskSnapshot>.value(_FakeTaskSnapshot_76()))
          as _i9.Future<_i45.TaskSnapshot>);
  @override
  _i9.Future<_i45.TaskSnapshot> timeout(Duration? timeLimit,
          {_i9.FutureOr<_i45.TaskSnapshot> Function()? onTimeout}) =>
      (super.noSuchMethod(
              Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
              returnValue:
                  Future<_i45.TaskSnapshot>.value(_FakeTaskSnapshot_76()))
          as _i9.Future<_i45.TaskSnapshot>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i44.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);
  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);
  @override
  _i44.UserMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeUserMetadata_85()) as _i44.UserMetadata);
  @override
  List<_i44.UserInfo> get providerData =>
      (super.noSuchMethod(Invocation.getter(#providerData),
          returnValue: <_i44.UserInfo>[]) as List<_i44.UserInfo>);
  @override
  String get uid =>
      (super.noSuchMethod(Invocation.getter(#uid), returnValue: '') as String);
  @override
  _i9.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<String> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdToken, [forceRefresh]),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i44.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdTokenResult, [forceRefresh]),
              returnValue:
                  Future<_i44.IdTokenResult>.value(_FakeIdTokenResult_86()))
          as _i9.Future<_i44.IdTokenResult>);
  @override
  _i9.Future<_i44.UserCredential> linkWithCredential(
          _i44.AuthCredential? credential) =>
      (super.noSuchMethod(Invocation.method(#linkWithCredential, [credential]),
              returnValue:
                  Future<_i44.UserCredential>.value(_FakeUserCredential_53()))
          as _i9.Future<_i44.UserCredential>);
  @override
  _i9.Future<_i44.ConfirmationResult> linkWithPhoneNumber(String? phoneNumber,
          [_i44.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: Future<_i44.ConfirmationResult>.value(
                  _FakeConfirmationResult_87()))
          as _i9.Future<_i44.ConfirmationResult>);
  @override
  _i9.Future<_i44.UserCredential> reauthenticateWithCredential(
          _i44.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#reauthenticateWithCredential, [credential]),
              returnValue:
                  Future<_i44.UserCredential>.value(_FakeUserCredential_53()))
          as _i9.Future<_i44.UserCredential>);
  @override
  _i9.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> sendEmailVerification(
          [_i44.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#sendEmailVerification, [actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i44.User> unlink(String? providerId) =>
      (super.noSuchMethod(Invocation.method(#unlink, [providerId]),
              returnValue: Future<_i44.User>.value(_FakeUser_88()))
          as _i9.Future<_i44.User>);
  @override
  _i9.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(Invocation.method(#updateEmail, [newEmail]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [newPassword]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updatePhoneNumber(
          _i44.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
          Invocation.method(#updatePhoneNumber, [phoneCredential]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
          Invocation.method(#updateProfile, [],
              {#displayName: displayName, #photoURL: photoURL}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> verifyBeforeUpdateEmail(String? newEmail,
          [_i44.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyBeforeUpdateEmail, [newEmail, actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i44.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}
