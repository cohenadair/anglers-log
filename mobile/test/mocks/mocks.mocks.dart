// ignore_for_file: directives_ordering,avoid_equals_and_hash_code_on_mutable_classes,lines_longer_than_80_chars,subtype_of_sealed_class,unnecessary_overrides,must_be_immutable,duplicate_ignore,invalid_implementation_override
// Mocks generated by Mockito 5.0.16 from annotations
// in mobile/test/mocks/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i55;
import 'dart:convert' as _i45;
import 'dart:io' as _i44;
import 'dart:math' as _i48;
import 'dart:typed_data' as _i60;
import 'dart:ui' as _i66;

import 'package:file_picker/file_picker.dart' as _i63;
import 'package:flutter/foundation.dart' as _i64;
import 'package:flutter/gestures.dart' as _i65;
import 'package:flutter/material.dart' as _i46;
import 'package:flutter/services.dart' as _i51;
import 'package:google_sign_in/google_sign_in.dart' as _i43;
import 'package:googleapis/drive/v3.dart' as _i42;
import 'package:googleapis/shared.dart' as _i61;
import 'package:googleapis_auth/googleapis_auth.dart' as _i59;
import 'package:googleapis_auth/src/access_credentials.dart' as _i40;
import 'package:http/http.dart' as _i41;
import 'package:mapbox_gl/mapbox_gl.dart' as _i47;
import 'package:mapbox_gl_platform_interface/mapbox_gl_platform_interface.dart'
    as _i57;
import 'package:mobile/angler_manager.dart' as _i6;
import 'package:mobile/app_manager.dart' as _i2;
import 'package:mobile/atmosphere_fetcher.dart' as _i58;
import 'package:mobile/backup_restore_manager.dart' as _i7;
import 'package:mobile/bait_category_manager.dart' as _i8;
import 'package:mobile/bait_manager.dart' as _i9;
import 'package:mobile/body_of_water_manager.dart' as _i10;
import 'package:mobile/catch_manager.dart' as _i11;
import 'package:mobile/custom_entity_manager.dart' as _i12;
import 'package:mobile/database/legacy_importer.dart' as _i67;
import 'package:mobile/entity_manager.dart' as _i5;
import 'package:mobile/fishing_spot_manager.dart' as _i13;
import 'package:mobile/image_manager.dart' as _i14;
import 'package:mobile/local_database_manager.dart' as _i3;
import 'package:mobile/location_monitor.dart' as _i15;
import 'package:mobile/method_manager.dart' as _i16;
import 'package:mobile/model/gen/anglerslog.pb.dart' as _i4;
import 'package:mobile/pages/manageable_list_page.dart' as _i71;
import 'package:mobile/preference_manager.dart' as _i62;
import 'package:mobile/properties_manager.dart' as _i17;
import 'package:mobile/report_manager.dart' as _i18;
import 'package:mobile/species_manager.dart' as _i19;
import 'package:mobile/subscription_manager.dart' as _i20;
import 'package:mobile/time_manager.dart' as _i21;
import 'package:mobile/trip_manager.dart' as _i22;
import 'package:mobile/user_preference_manager.dart' as _i23;
import 'package:mobile/utils/validator.dart' as _i68;
import 'package:mobile/water_clarity_manager.dart' as _i24;
import 'package:mobile/widgets/input_controller.dart' as _i54;
import 'package:mobile/widgets/quantity_picker_input.dart' as _i70;
import 'package:mobile/wrappers/drive_api_wrapper.dart' as _i25;
import 'package:mobile/wrappers/file_picker_wrapper.dart' as _i26;
import 'package:mobile/wrappers/google_sign_in_wrapper.dart' as _i27;
import 'package:mobile/wrappers/http_wrapper.dart' as _i28;
import 'package:mobile/wrappers/image_compress_wrapper.dart' as _i29;
import 'package:mobile/wrappers/image_picker_wrapper.dart' as _i30;
import 'package:mobile/wrappers/io_wrapper.dart' as _i31;
import 'package:mobile/wrappers/package_info_wrapper.dart' as _i32;
import 'package:mobile/wrappers/path_provider_wrapper.dart' as _i33;
import 'package:mobile/wrappers/permission_handler_wrapper.dart' as _i34;
import 'package:mobile/wrappers/photo_manager_wrapper.dart' as _i35;
import 'package:mobile/wrappers/purchases_wrapper.dart' as _i36;
import 'package:mobile/wrappers/services_wrapper.dart' as _i37;
import 'package:mobile/wrappers/shared_preferences_wrapper.dart' as _i38;
import 'package:mobile/wrappers/url_launcher_wrapper.dart' as _i39;
import 'package:mockito/mockito.dart' as _i1;
import 'package:package_info_plus/package_info_plus.dart' as _i49;
import 'package:photo_manager/photo_manager.dart' as _i52;
import 'package:protobuf/protobuf.dart' as _i56;
import 'package:purchases_flutter/purchases_flutter.dart' as _i50;
import 'package:purchases_flutter/transaction.dart' as _i69;
import 'package:sqflite/sqflite.dart' as _i53;

import 'mocks.dart' as _i72;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAppManager_0 extends _i1.Fake implements _i2.AppManager {}

class _FakeLocalDatabaseManager_1 extends _i1.Fake
    implements _i3.LocalDatabaseManager {}

class _FakeAngler_2 extends _i1.Fake implements _i4.Angler {}

class _FakeId_3 extends _i1.Fake implements _i4.Id {}

class _FakeEntityListener_4<T> extends _i1.Fake
    implements _i5.EntityListener<T> {}

class _FakeAnglerManager_5 extends _i1.Fake implements _i6.AnglerManager {}

class _FakeBackupRestoreManager_6 extends _i1.Fake
    implements _i7.BackupRestoreManager {}

class _FakeBaitCategoryManager_7 extends _i1.Fake
    implements _i8.BaitCategoryManager {}

class _FakeBaitManager_8 extends _i1.Fake implements _i9.BaitManager {}

class _FakeBodyOfWaterManager_9 extends _i1.Fake
    implements _i10.BodyOfWaterManager {}

class _FakeCatchManager_10 extends _i1.Fake implements _i11.CatchManager {}

class _FakeCustomEntityManager_11 extends _i1.Fake
    implements _i12.CustomEntityManager {}

class _FakeFishingSpotManager_12 extends _i1.Fake
    implements _i13.FishingSpotManager {}

class _FakeImageManager_13 extends _i1.Fake implements _i14.ImageManager {}

class _FakeLocationMonitor_14 extends _i1.Fake implements _i15.LocationMonitor {
}

class _FakeMethodManager_15 extends _i1.Fake implements _i16.MethodManager {}

class _FakePropertiesManager_16 extends _i1.Fake
    implements _i17.PropertiesManager {}

class _FakeReportManager_17 extends _i1.Fake implements _i18.ReportManager {}

class _FakeSpeciesManager_18 extends _i1.Fake implements _i19.SpeciesManager {}

class _FakeSubscriptionManager_19 extends _i1.Fake
    implements _i20.SubscriptionManager {}

class _FakeTimeManager_20 extends _i1.Fake implements _i21.TimeManager {}

class _FakeTripManager_21 extends _i1.Fake implements _i22.TripManager {}

class _FakeUserPreferenceManager_22 extends _i1.Fake
    implements _i23.UserPreferenceManager {}

class _FakeWaterClarityManager_23 extends _i1.Fake
    implements _i24.WaterClarityManager {}

class _FakeDriveApiWrapper_24 extends _i1.Fake implements _i25.DriveApiWrapper {
}

class _FakeFilePickerWrapper_25 extends _i1.Fake
    implements _i26.FilePickerWrapper {}

class _FakeGoogleSignInWrapper_26 extends _i1.Fake
    implements _i27.GoogleSignInWrapper {}

class _FakeHttpWrapper_27 extends _i1.Fake implements _i28.HttpWrapper {}

class _FakeImageCompressWrapper_28 extends _i1.Fake
    implements _i29.ImageCompressWrapper {}

class _FakeImagePickerWrapper_29 extends _i1.Fake
    implements _i30.ImagePickerWrapper {}

class _FakeIoWrapper_30 extends _i1.Fake implements _i31.IoWrapper {}

class _FakePackageInfoWrapper_31 extends _i1.Fake
    implements _i32.PackageInfoWrapper {}

class _FakePathProviderWrapper_32 extends _i1.Fake
    implements _i33.PathProviderWrapper {}

class _FakePermissionHandlerWrapper_33 extends _i1.Fake
    implements _i34.PermissionHandlerWrapper {}

class _FakePhotoManagerWrapper_34 extends _i1.Fake
    implements _i35.PhotoManagerWrapper {}

class _FakePurchasesWrapper_35 extends _i1.Fake
    implements _i36.PurchasesWrapper {}

class _FakeServicesWrapper_36 extends _i1.Fake implements _i37.ServicesWrapper {
}

class _FakeSharedPreferencesWrapper_37 extends _i1.Fake
    implements _i38.SharedPreferencesWrapper {}

class _FakeUrlLauncherWrapper_38 extends _i1.Fake
    implements _i39.UrlLauncherWrapper {}

class _FakeAccessCredentials_39 extends _i1.Fake
    implements _i40.AccessCredentials {}

class _FakeResponse_40 extends _i1.Fake implements _i41.Response {}

class _FakeStreamedResponse_41 extends _i1.Fake
    implements _i41.StreamedResponse {}

class _FakeBaitCategory_42 extends _i1.Fake implements _i4.BaitCategory {}

class _FakeBait_43 extends _i1.Fake implements _i4.Bait {}

class _FakeBodyOfWater_44 extends _i1.Fake implements _i4.BodyOfWater {}

class _FakeCatch_45 extends _i1.Fake implements _i4.Catch {}

class _FakeCustomEntity_46 extends _i1.Fake implements _i4.CustomEntity {}

class _FakeAboutResource_47 extends _i1.Fake implements _i42.AboutResource {}

class _FakeChangesResource_48 extends _i1.Fake implements _i42.ChangesResource {
}

class _FakeChannelsResource_49 extends _i1.Fake
    implements _i42.ChannelsResource {}

class _FakeCommentsResource_50 extends _i1.Fake
    implements _i42.CommentsResource {}

class _FakeDrivesResource_51 extends _i1.Fake implements _i42.DrivesResource {}

class _FakeFilesResource_52 extends _i1.Fake implements _i42.FilesResource {}

class _FakePermissionsResource_53 extends _i1.Fake
    implements _i42.PermissionsResource {}

class _FakeRepliesResource_54 extends _i1.Fake implements _i42.RepliesResource {
}

class _FakeRevisionsResource_55 extends _i1.Fake
    implements _i42.RevisionsResource {}

class _FakeTeamdrivesResource_56 extends _i1.Fake
    implements _i42.TeamdrivesResource {}

class _FakeFile_57 extends _i1.Fake implements _i42.File {}

class _FakeGeneratedIds_58 extends _i1.Fake implements _i42.GeneratedIds {}

class _FakeObject_59 extends _i1.Fake implements Object {}

class _FakeFileList_60 extends _i1.Fake implements _i42.FileList {}

class _FakeDriveApi_61 extends _i1.Fake implements _i42.DriveApi {}

class _FakeFishingSpot_62 extends _i1.Fake implements _i4.FishingSpot {}

class _FakeGoogleSignInAuthentication_63 extends _i1.Fake
    implements _i43.GoogleSignInAuthentication {}

class _FakeFile_64 extends _i1.Fake implements _i44.File {}

class _FakeEncoding_65 extends _i1.Fake implements _i45.Encoding {}

class _FakeMethod_66 extends _i1.Fake implements _i4.Method {}

class _FakeReport_67 extends _i1.Fake implements _i4.Report {}

class _FakeSpecies_68 extends _i1.Fake implements _i4.Species {}

class _FakeDateTime_69 extends _i1.Fake implements DateTime {}

class _FakeTimeOfDay_70 extends _i1.Fake implements _i46.TimeOfDay {}

class _FakeTrip_71 extends _i1.Fake implements _i4.Trip {}

class _FakeMeasurementSystem_72 extends _i1.Fake
    implements _i4.MeasurementSystem {}

class _FakeWaterClarity_73 extends _i1.Fake implements _i4.WaterClarity {}

class _FakeGoogleSignIn_74 extends _i1.Fake implements _i43.GoogleSignIn {}

class _FakeDirectory_75 extends _i1.Fake implements _i44.Directory {}

class _FakeArgumentCallbacks_76<T> extends _i1.Fake
    implements _i47.ArgumentCallbacks<T> {}

class _FakeWidget_77 extends _i1.Fake implements _i46.Widget {
  @override
  String toString(
          {_i46.DiagnosticLevel? minLevel = _i46.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeSymbol_78 extends _i1.Fake implements _i47.Symbol {}

class _FakeLatLng_79 extends _i1.Fake implements _i47.LatLng {}

class _FakeLine_80 extends _i1.Fake implements _i47.Line {}

class _FakeCircle_81 extends _i1.Fake implements _i47.Circle {}

class _FakeFill_82 extends _i1.Fake implements _i47.Fill {}

class _FakeLatLngBounds_83 extends _i1.Fake implements _i47.LatLngBounds {}

class _FakePoint_84<T extends num> extends _i1.Fake implements _i48.Point<T> {}

class _FakePackageInfo_85 extends _i1.Fake implements _i49.PackageInfo {}

class _FakeOfferings_86 extends _i1.Fake implements _i50.Offerings {}

class _FakePurchaserInfo_87 extends _i1.Fake implements _i50.PurchaserInfo {}

class _FakeLogInResult_88 extends _i1.Fake implements _i50.LogInResult {}

class _FakeMethodChannel_89 extends _i1.Fake implements _i51.MethodChannel {}

class _FakeFilterOptionGroup_90 extends _i1.Fake
    implements _i52.FilterOptionGroup {}

class _FakeRequestType_91 extends _i1.Fake implements _i52.RequestType {}

class _FakeBatch_92 extends _i1.Fake implements _i53.Batch {}

class _FakeUri_93 extends _i1.Fake implements Uri {}

class _FakeFileStat_94 extends _i1.Fake implements _i44.FileStat {}

class _FakeFileSystemEntity_95 extends _i1.Fake
    implements _i44.FileSystemEntity {}

class _FakeMethodCodec_96 extends _i1.Fake implements _i51.MethodCodec {}

class _FakeBinaryMessenger_97 extends _i1.Fake implements _i51.BinaryMessenger {
}

class _FakeProduct_98 extends _i1.Fake implements _i50.Product {}

class _FakeEntitlementInfos_99 extends _i1.Fake
    implements _i50.EntitlementInfos {}

class _FakeSetInputController_100<T> extends _i1.Fake
    implements _i54.SetInputController<T> {}

/// A class which mocks [AnglerManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnglerManager extends _i1.Mock implements _i6.AnglerManager {
  MockAnglerManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i4.Angler, _i4.Angler) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.Angler __p0, _i4.Angler __p1) => 0)
          as int Function(_i4.Angler, _i4.Angler));
  @override
  Map<_i4.Id, _i4.Angler> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i4.Id, _i4.Angler>{}) as Map<_i4.Id, _i4.Angler>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.Angler entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeAngler_2()) as _i4.Angler);
  @override
  _i4.Id id(_i4.Angler? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.Angler? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  int numberOfCatches(_i4.Id? anglerId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [anglerId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(_i46.BuildContext? context, _i4.Angler? angler) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, angler]),
          returnValue: '') as String);
  @override
  int Function(_i4.Angler, _i4.Angler) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.Angler __p0, _i4.Angler __p1) => 0)
          as int Function(_i4.Angler, _i4.Angler));
  @override
  List<_i4.Angler> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.Angler>[]) as List<_i4.Angler>);
  @override
  String displayName(_i46.BuildContext? context, _i4.Angler? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i4.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.Angler>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.Angler> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.Angler>[]) as List<_i4.Angler>);
  @override
  List<_i4.Angler> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.Angler>[]) as List<_i4.Angler>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> addOrUpdate(_i4.Angler? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.Angler>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.Angler>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.Angler? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.Angler? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.Angler? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.Angler> addTypedListener(
          {void Function(_i4.Angler)? onAdd,
          void Function(_i4.Angler)? onDelete,
          void Function(_i4.Angler)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.Angler>())
          as _i5.EntityListener<_i4.Angler>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppManager extends _i1.Mock implements _i2.AppManager {
  MockAppManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AnglerManager get anglerManager =>
      (super.noSuchMethod(Invocation.getter(#anglerManager),
          returnValue: _FakeAnglerManager_5()) as _i6.AnglerManager);
  @override
  _i7.BackupRestoreManager get backupRestoreManager => (super.noSuchMethod(
      Invocation.getter(#backupRestoreManager),
      returnValue: _FakeBackupRestoreManager_6()) as _i7.BackupRestoreManager);
  @override
  _i8.BaitCategoryManager get baitCategoryManager => (super.noSuchMethod(
      Invocation.getter(#baitCategoryManager),
      returnValue: _FakeBaitCategoryManager_7()) as _i8.BaitCategoryManager);
  @override
  _i9.BaitManager get baitManager =>
      (super.noSuchMethod(Invocation.getter(#baitManager),
          returnValue: _FakeBaitManager_8()) as _i9.BaitManager);
  @override
  _i10.BodyOfWaterManager get bodyOfWaterManager =>
      (super.noSuchMethod(Invocation.getter(#bodyOfWaterManager),
          returnValue: _FakeBodyOfWaterManager_9()) as _i10.BodyOfWaterManager);
  @override
  _i11.CatchManager get catchManager =>
      (super.noSuchMethod(Invocation.getter(#catchManager),
          returnValue: _FakeCatchManager_10()) as _i11.CatchManager);
  @override
  _i12.CustomEntityManager get customEntityManager => (super.noSuchMethod(
      Invocation.getter(#customEntityManager),
      returnValue: _FakeCustomEntityManager_11()) as _i12.CustomEntityManager);
  @override
  _i13.FishingSpotManager get fishingSpotManager => (super.noSuchMethod(
      Invocation.getter(#fishingSpotManager),
      returnValue: _FakeFishingSpotManager_12()) as _i13.FishingSpotManager);
  @override
  _i14.ImageManager get imageManager =>
      (super.noSuchMethod(Invocation.getter(#imageManager),
          returnValue: _FakeImageManager_13()) as _i14.ImageManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  _i15.LocationMonitor get locationMonitor =>
      (super.noSuchMethod(Invocation.getter(#locationMonitor),
          returnValue: _FakeLocationMonitor_14()) as _i15.LocationMonitor);
  @override
  _i16.MethodManager get methodManager =>
      (super.noSuchMethod(Invocation.getter(#methodManager),
          returnValue: _FakeMethodManager_15()) as _i16.MethodManager);
  @override
  _i17.PropertiesManager get propertiesManager =>
      (super.noSuchMethod(Invocation.getter(#propertiesManager),
          returnValue: _FakePropertiesManager_16()) as _i17.PropertiesManager);
  @override
  _i18.ReportManager get reportManager =>
      (super.noSuchMethod(Invocation.getter(#reportManager),
          returnValue: _FakeReportManager_17()) as _i18.ReportManager);
  @override
  _i19.SpeciesManager get speciesManager =>
      (super.noSuchMethod(Invocation.getter(#speciesManager),
          returnValue: _FakeSpeciesManager_18()) as _i19.SpeciesManager);
  @override
  _i20.SubscriptionManager get subscriptionManager => (super.noSuchMethod(
      Invocation.getter(#subscriptionManager),
      returnValue: _FakeSubscriptionManager_19()) as _i20.SubscriptionManager);
  @override
  _i21.TimeManager get timeManager =>
      (super.noSuchMethod(Invocation.getter(#timeManager),
          returnValue: _FakeTimeManager_20()) as _i21.TimeManager);
  @override
  _i22.TripManager get tripManager =>
      (super.noSuchMethod(Invocation.getter(#tripManager),
          returnValue: _FakeTripManager_21()) as _i22.TripManager);
  @override
  _i23.UserPreferenceManager get userPreferenceManager =>
      (super.noSuchMethod(Invocation.getter(#userPreferenceManager),
              returnValue: _FakeUserPreferenceManager_22())
          as _i23.UserPreferenceManager);
  @override
  _i24.WaterClarityManager get waterClarityManager => (super.noSuchMethod(
      Invocation.getter(#waterClarityManager),
      returnValue: _FakeWaterClarityManager_23()) as _i24.WaterClarityManager);
  @override
  _i25.DriveApiWrapper get driveApiWrapper =>
      (super.noSuchMethod(Invocation.getter(#driveApiWrapper),
          returnValue: _FakeDriveApiWrapper_24()) as _i25.DriveApiWrapper);
  @override
  _i26.FilePickerWrapper get filePickerWrapper =>
      (super.noSuchMethod(Invocation.getter(#filePickerWrapper),
          returnValue: _FakeFilePickerWrapper_25()) as _i26.FilePickerWrapper);
  @override
  _i27.GoogleSignInWrapper get googleSignInWrapper => (super.noSuchMethod(
      Invocation.getter(#googleSignInWrapper),
      returnValue: _FakeGoogleSignInWrapper_26()) as _i27.GoogleSignInWrapper);
  @override
  _i28.HttpWrapper get httpWrapper =>
      (super.noSuchMethod(Invocation.getter(#httpWrapper),
          returnValue: _FakeHttpWrapper_27()) as _i28.HttpWrapper);
  @override
  _i29.ImageCompressWrapper get imageCompressWrapper =>
      (super.noSuchMethod(Invocation.getter(#imageCompressWrapper),
              returnValue: _FakeImageCompressWrapper_28())
          as _i29.ImageCompressWrapper);
  @override
  _i30.ImagePickerWrapper get imagePickerWrapper => (super.noSuchMethod(
      Invocation.getter(#imagePickerWrapper),
      returnValue: _FakeImagePickerWrapper_29()) as _i30.ImagePickerWrapper);
  @override
  _i31.IoWrapper get ioWrapper =>
      (super.noSuchMethod(Invocation.getter(#ioWrapper),
          returnValue: _FakeIoWrapper_30()) as _i31.IoWrapper);
  @override
  _i32.PackageInfoWrapper get packageInfoWrapper => (super.noSuchMethod(
      Invocation.getter(#packageInfoWrapper),
      returnValue: _FakePackageInfoWrapper_31()) as _i32.PackageInfoWrapper);
  @override
  _i33.PathProviderWrapper get pathProviderWrapper => (super.noSuchMethod(
      Invocation.getter(#pathProviderWrapper),
      returnValue: _FakePathProviderWrapper_32()) as _i33.PathProviderWrapper);
  @override
  _i34.PermissionHandlerWrapper get permissionHandlerWrapper =>
      (super.noSuchMethod(Invocation.getter(#permissionHandlerWrapper),
              returnValue: _FakePermissionHandlerWrapper_33())
          as _i34.PermissionHandlerWrapper);
  @override
  _i35.PhotoManagerWrapper get photoManagerWrapper => (super.noSuchMethod(
      Invocation.getter(#photoManagerWrapper),
      returnValue: _FakePhotoManagerWrapper_34()) as _i35.PhotoManagerWrapper);
  @override
  _i36.PurchasesWrapper get purchasesWrapper =>
      (super.noSuchMethod(Invocation.getter(#purchasesWrapper),
          returnValue: _FakePurchasesWrapper_35()) as _i36.PurchasesWrapper);
  @override
  _i37.ServicesWrapper get servicesWrapper =>
      (super.noSuchMethod(Invocation.getter(#servicesWrapper),
          returnValue: _FakeServicesWrapper_36()) as _i37.ServicesWrapper);
  @override
  _i38.SharedPreferencesWrapper get sharedPreferencesWrapper =>
      (super.noSuchMethod(Invocation.getter(#sharedPreferencesWrapper),
              returnValue: _FakeSharedPreferencesWrapper_37())
          as _i38.SharedPreferencesWrapper);
  @override
  _i39.UrlLauncherWrapper get urlLauncherWrapper => (super.noSuchMethod(
      Invocation.getter(#urlLauncherWrapper),
      returnValue: _FakeUrlLauncherWrapper_38()) as _i39.UrlLauncherWrapper);
  @override
  _i55.Future<void> initialize({bool? isStartup = true}) => (super.noSuchMethod(
      Invocation.method(#initialize, [], {#isStartup: isStartup}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ArgumentCallbacks].
///
/// See the documentation for Mockito's code generation for more information.
class MockArgumentCallbacks<T> extends _i1.Mock
    implements _i47.ArgumentCallbacks<T> {
  MockArgumentCallbacks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  void call(T? argument) =>
      super.noSuchMethod(Invocation.method(#call, [argument]),
          returnValueForMissingStub: null);
  @override
  void add(_i57.ArgumentCallback<T>? callback) =>
      super.noSuchMethod(Invocation.method(#add, [callback]),
          returnValueForMissingStub: null);
  @override
  void remove(_i57.ArgumentCallback<T>? callback) =>
      super.noSuchMethod(Invocation.method(#remove, [callback]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AtmosphereFetcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockAtmosphereFetcher extends _i1.Mock implements _i58.AtmosphereFetcher {
  MockAtmosphereFetcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  int get timestamp =>
      (super.noSuchMethod(Invocation.getter(#timestamp), returnValue: 0)
          as int);
  @override
  _i55.Future<_i4.Atmosphere?> fetch() =>
      (super.noSuchMethod(Invocation.method(#fetch, []),
              returnValue: Future<_i4.Atmosphere?>.value())
          as _i55.Future<_i4.Atmosphere?>);
  @override
  _i55.Future<Map<String, dynamic>?> get(String? elements) =>
      (super.noSuchMethod(Invocation.method(#get, [elements]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i55.Future<Map<String, dynamic>?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AuthClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthClient extends _i1.Mock implements _i59.AuthClient {
  MockAuthClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i40.AccessCredentials get credentials =>
      (super.noSuchMethod(Invocation.getter(#credentials),
          returnValue: _FakeAccessCredentials_39()) as _i40.AccessCredentials);
  @override
  String toString() => super.toString();
  @override
  _i55.Future<_i41.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i41.Response>.value(_FakeResponse_40()))
          as _i55.Future<_i41.Response>);
  @override
  _i55.Future<_i41.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i41.Response>.value(_FakeResponse_40()))
          as _i55.Future<_i41.Response>);
  @override
  _i55.Future<_i41.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i45.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i41.Response>.value(_FakeResponse_40()))
          as _i55.Future<_i41.Response>);
  @override
  _i55.Future<_i41.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i45.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i41.Response>.value(_FakeResponse_40()))
          as _i55.Future<_i41.Response>);
  @override
  _i55.Future<_i41.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i45.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i41.Response>.value(_FakeResponse_40()))
          as _i55.Future<_i41.Response>);
  @override
  _i55.Future<_i41.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i45.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i41.Response>.value(_FakeResponse_40()))
          as _i55.Future<_i41.Response>);
  @override
  _i55.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i55.Future<String>);
  @override
  _i55.Future<_i60.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i60.Uint8List>.value(_i60.Uint8List(0)))
          as _i55.Future<_i60.Uint8List>);
  @override
  _i55.Future<_i41.StreamedResponse> send(_i41.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i41.StreamedResponse>.value(
                  _FakeStreamedResponse_41()))
          as _i55.Future<_i41.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [BackupRestoreManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackupRestoreManager extends _i1.Mock
    implements _i7.BackupRestoreManager {
  MockBackupRestoreManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Stream<_i7.BackupRestoreAuthState> get authStream =>
      (super.noSuchMethod(Invocation.getter(#authStream),
              returnValue: Stream<_i7.BackupRestoreAuthState>.empty())
          as _i55.Stream<_i7.BackupRestoreAuthState>);
  @override
  _i55.Stream<_i7.BackupRestoreProgress> get progressStream =>
      (super.noSuchMethod(Invocation.getter(#progressStream),
              returnValue: Stream<_i7.BackupRestoreProgress>.empty())
          as _i55.Stream<_i7.BackupRestoreProgress>);
  @override
  bool get isSignedIn =>
      (super.noSuchMethod(Invocation.getter(#isSignedIn), returnValue: false)
          as bool);
  @override
  bool get isInProgress =>
      (super.noSuchMethod(Invocation.getter(#isInProgress), returnValue: false)
          as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> backup() => (super.noSuchMethod(
      Invocation.method(#backup, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> restore() => (super.noSuchMethod(
      Invocation.method(#restore, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BaitCategoryManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaitCategoryManager extends _i1.Mock
    implements _i8.BaitCategoryManager {
  MockBaitCategoryManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i4.BaitCategory, _i4.BaitCategory) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.BaitCategory __p0, _i4.BaitCategory __p1) => 0)
          as int Function(_i4.BaitCategory, _i4.BaitCategory));
  @override
  Map<_i4.Id, _i4.BaitCategory> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i4.Id, _i4.BaitCategory>{})
          as Map<_i4.Id, _i4.BaitCategory>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.BaitCategory entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeBaitCategory_42()) as _i4.BaitCategory);
  @override
  _i4.Id id(_i4.BaitCategory? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.BaitCategory? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  int numberOfBaits(_i4.Id? baitCategoryId) =>
      (super.noSuchMethod(Invocation.method(#numberOfBaits, [baitCategoryId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(
          _i46.BuildContext? context, _i4.BaitCategory? baitCategory) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMessage, [context, baitCategory]),
          returnValue: '') as String);
  @override
  int Function(_i4.BaitCategory, _i4.BaitCategory) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.BaitCategory __p0, _i4.BaitCategory __p1) => 0)
          as int Function(_i4.BaitCategory, _i4.BaitCategory));
  @override
  List<_i4.BaitCategory> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.BaitCategory>[]) as List<_i4.BaitCategory>);
  @override
  String displayName(_i46.BuildContext? context, _i4.BaitCategory? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i4.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.BaitCategory>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.BaitCategory> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.BaitCategory>[]) as List<_i4.BaitCategory>);
  @override
  List<_i4.BaitCategory> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.BaitCategory>[]) as List<_i4.BaitCategory>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> addOrUpdate(_i4.BaitCategory? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.BaitCategory>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.BaitCategory>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.BaitCategory? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.BaitCategory? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.BaitCategory? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.BaitCategory> addTypedListener(
          {void Function(_i4.BaitCategory)? onAdd,
          void Function(_i4.BaitCategory)? onDelete,
          void Function(_i4.BaitCategory)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.BaitCategory>())
          as _i5.EntityListener<_i4.BaitCategory>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BaitManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaitManager extends _i1.Mock implements _i9.BaitManager {
  MockBaitManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i4.BaitAttachment, _i4.BaitAttachment)
      get attachmentComparator =>
          (super.noSuchMethod(Invocation.getter(#attachmentComparator),
              returnValue: (_i4.BaitAttachment __p0, _i4.BaitAttachment __p1) =>
                  0) as int Function(_i4.BaitAttachment, _i4.BaitAttachment));
  @override
  int Function(_i4.Bait, _i4.Bait) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.Bait __p0, _i4.Bait __p1) => 0)
          as int Function(_i4.Bait, _i4.Bait));
  @override
  Map<_i4.Id, _i4.Bait> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i4.Id, _i4.Bait>{}) as Map<_i4.Id, _i4.Bait>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.Bait entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeBait_43()) as _i4.Bait);
  @override
  _i4.Id id(_i4.Bait? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.Bait? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  void setImageName(_i4.Bait? entity, String? imageName) =>
      super.noSuchMethod(Invocation.method(#setImageName, [entity, imageName]),
          returnValueForMissingStub: null);
  @override
  void clearImageName(_i4.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#clearImageName, [entity]),
          returnValueForMissingStub: null);
  @override
  bool matchesFilter(_i4.Id? id, String? filter,
          [_i46.BuildContext? context]) =>
      (super.noSuchMethod(
          Invocation.method(#matchesFilter, [id, filter, context]),
          returnValue: false) as bool);
  @override
  bool attachmentsMatchesFilter(Iterable<_i4.BaitAttachment>? attachments,
          String? filter, _i46.BuildContext? context) =>
      (super.noSuchMethod(
          Invocation.method(
              #attachmentsMatchesFilter, [attachments, filter, context]),
          returnValue: false) as bool);
  @override
  bool duplicate(_i4.Bait? rhs) =>
      (super.noSuchMethod(Invocation.method(#duplicate, [rhs]),
          returnValue: false) as bool);
  @override
  int numberOfCatches(_i4.Id? baitId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [baitId]),
          returnValue: 0) as int);
  @override
  int numberOfVariantCatches(_i4.Id? variantId) => (super.noSuchMethod(
      Invocation.method(#numberOfVariantCatches, [variantId]),
      returnValue: 0) as int);
  @override
  int numberOfCustomEntityValues(_i4.Id? customEntityId) => (super.noSuchMethod(
      Invocation.method(#numberOfCustomEntityValues, [customEntityId]),
      returnValue: 0) as int);
  @override
  List<_i4.BaitAttachment> attachmentList() =>
      (super.noSuchMethod(Invocation.method(#attachmentList, []),
          returnValue: <_i4.BaitAttachment>[]) as List<_i4.BaitAttachment>);
  @override
  _i4.BaitVariant? variant(_i4.Bait? bait, _i4.Id? variantId) =>
      (super.noSuchMethod(Invocation.method(#variant, [bait, variantId]))
          as _i4.BaitVariant?);
  @override
  _i4.BaitVariant? variantFromAttachment(_i4.BaitAttachment? attachment) =>
      (super.noSuchMethod(
              Invocation.method(#variantFromAttachment, [attachment]))
          as _i4.BaitVariant?);
  @override
  String? attachmentDisplayValue(
          _i46.BuildContext? context, _i4.BaitAttachment? attachment) =>
      (super.noSuchMethod(
              Invocation.method(#attachmentDisplayValue, [context, attachment]))
          as String?);
  @override
  List<String> attachmentsDisplayValues(_i46.BuildContext? context,
          Iterable<_i4.BaitAttachment>? attachments) =>
      (super.noSuchMethod(
          Invocation.method(#attachmentsDisplayValues, [context, attachments]),
          returnValue: <String>[]) as List<String>);
  @override
  String variantDisplayValue(
          _i46.BuildContext? context, _i4.BaitVariant? variant,
          {bool? includeCustomValues = false}) =>
      (super.noSuchMethod(
          Invocation.method(#variantDisplayValue, [context, variant],
              {#includeCustomValues: includeCustomValues}),
          returnValue: '') as String);
  @override
  String deleteMessage(_i46.BuildContext? context, _i4.Bait? bait) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, bait]),
          returnValue: '') as String);
  @override
  String deleteVariantMessage(
          _i46.BuildContext? context, _i4.BaitVariant? variant) =>
      (super.noSuchMethod(
          Invocation.method(#deleteVariantMessage, [context, variant]),
          returnValue: '') as String);
  @override
  _i55.Future<bool> addOrUpdate(_i4.Bait? entity,
          {_i44.File? imageFile,
          bool? compressImages = true,
          bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [
            entity
          ], {
            #imageFile: imageFile,
            #compressImages: compressImages,
            #notify: notify
          }),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int Function(_i4.Bait, _i4.Bait) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.Bait __p0, _i4.Bait __p1) => 0)
          as int Function(_i4.Bait, _i4.Bait));
  @override
  List<_i4.Bait> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.Bait>[]) as List<_i4.Bait>);
  @override
  String displayName(_i46.BuildContext? context, _i4.Bait? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.Bait>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.Bait> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.Bait>[]) as List<_i4.Bait>);
  @override
  List<_i4.Bait> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.Bait>[]) as List<_i4.Bait>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.Bait>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.Bait>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.Bait? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.Bait> addTypedListener(
          {void Function(_i4.Bait)? onAdd,
          void Function(_i4.Bait)? onDelete,
          void Function(_i4.Bait)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.Bait>())
          as _i5.EntityListener<_i4.Bait>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BodyOfWaterManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockBodyOfWaterManager extends _i1.Mock
    implements _i10.BodyOfWaterManager {
  MockBodyOfWaterManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i4.BodyOfWater, _i4.BodyOfWater) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.BodyOfWater __p0, _i4.BodyOfWater __p1) => 0)
          as int Function(_i4.BodyOfWater, _i4.BodyOfWater));
  @override
  Map<_i4.Id, _i4.BodyOfWater> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i4.Id, _i4.BodyOfWater>{})
          as Map<_i4.Id, _i4.BodyOfWater>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.BodyOfWater entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeBodyOfWater_44()) as _i4.BodyOfWater);
  @override
  _i4.Id id(_i4.BodyOfWater? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.BodyOfWater? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  int numberOfFishingSpots(_i4.Id? bodyOfWaterId) => (super.noSuchMethod(
      Invocation.method(#numberOfFishingSpots, [bodyOfWaterId]),
      returnValue: 0) as int);
  @override
  String deleteMessage(
          _i46.BuildContext? context, _i4.BodyOfWater? bodyOfWater) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMessage, [context, bodyOfWater]),
          returnValue: '') as String);
  @override
  int Function(_i4.BodyOfWater, _i4.BodyOfWater) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.BodyOfWater __p0, _i4.BodyOfWater __p1) => 0)
          as int Function(_i4.BodyOfWater, _i4.BodyOfWater));
  @override
  List<_i4.BodyOfWater> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.BodyOfWater>[]) as List<_i4.BodyOfWater>);
  @override
  String displayName(_i46.BuildContext? context, _i4.BodyOfWater? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i4.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.BodyOfWater>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.BodyOfWater> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.BodyOfWater>[]) as List<_i4.BodyOfWater>);
  @override
  List<_i4.BodyOfWater> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.BodyOfWater>[]) as List<_i4.BodyOfWater>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> addOrUpdate(_i4.BodyOfWater? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.BodyOfWater>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.BodyOfWater>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.BodyOfWater? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.BodyOfWater? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.BodyOfWater? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.BodyOfWater> addTypedListener(
          {void Function(_i4.BodyOfWater)? onAdd,
          void Function(_i4.BodyOfWater)? onDelete,
          void Function(_i4.BodyOfWater)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.BodyOfWater>())
          as _i5.EntityListener<_i4.BodyOfWater>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CatchManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCatchManager extends _i1.Mock implements _i11.CatchManager {
  MockCatchManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  Map<_i4.Id, _i4.Catch> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i4.Id, _i4.Catch>{}) as Map<_i4.Id, _i4.Catch>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.Catch entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeCatch_45()) as _i4.Catch);
  @override
  _i4.Id id(_i4.Catch? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String displayName(_i46.BuildContext? context, _i4.Catch? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i4.Id? id, String? filter,
          [_i46.BuildContext? context]) =>
      (super.noSuchMethod(
          Invocation.method(#matchesFilter, [id, filter, context]),
          returnValue: false) as bool);
  @override
  List<_i4.Catch> catches(_i46.BuildContext? context,
          {_i11.CatchSortOrder? sortOrder = _i11.CatchSortOrder.newestToOldest,
          String? filter,
          _i4.DateRange? dateRange,
          bool? isCatchAndReleaseOnly = false,
          bool? isFavoritesOnly = false,
          Set<_i4.Id>? anglerIds = const {},
          Set<_i4.BaitAttachment>? baits = const {},
          Set<_i4.Id>? catchIds = const {},
          Set<_i4.Id>? fishingSpotIds = const {},
          Set<_i4.Id>? bodyOfWaterIds = const {},
          Set<_i4.Id>? methodIds = const {},
          Set<_i4.Id>? speciesIds = const {},
          Set<_i4.Id>? waterClarityIds = const {},
          Set<_i4.Period>? periods = const {},
          Set<_i4.Season>? seasons = const {},
          Set<_i4.Direction>? windDirections = const {},
          Set<_i4.SkyCondition>? skyConditions = const {},
          Set<_i4.MoonPhase>? moonPhases = const {},
          Set<_i4.TideType>? tideTypes = const {},
          _i4.NumberFilter? waterDepthFilter,
          _i4.NumberFilter? waterTemperatureFilter,
          _i4.NumberFilter? lengthFilter,
          _i4.NumberFilter? weightFilter,
          _i4.NumberFilter? quantityFilter,
          _i4.NumberFilter? airTemperatureFilter,
          _i4.NumberFilter? airPressureFilter,
          _i4.NumberFilter? airHumidityFilter,
          _i4.NumberFilter? airVisibilityFilter,
          _i4.NumberFilter? windSpeedFilter}) =>
      (super.noSuchMethod(
          Invocation.method(#catches, [
            context
          ], {
            #sortOrder: sortOrder,
            #filter: filter,
            #dateRange: dateRange,
            #isCatchAndReleaseOnly: isCatchAndReleaseOnly,
            #isFavoritesOnly: isFavoritesOnly,
            #anglerIds: anglerIds,
            #baits: baits,
            #catchIds: catchIds,
            #fishingSpotIds: fishingSpotIds,
            #bodyOfWaterIds: bodyOfWaterIds,
            #methodIds: methodIds,
            #speciesIds: speciesIds,
            #waterClarityIds: waterClarityIds,
            #periods: periods,
            #seasons: seasons,
            #windDirections: windDirections,
            #skyConditions: skyConditions,
            #moonPhases: moonPhases,
            #tideTypes: tideTypes,
            #waterDepthFilter: waterDepthFilter,
            #waterTemperatureFilter: waterTemperatureFilter,
            #lengthFilter: lengthFilter,
            #weightFilter: weightFilter,
            #quantityFilter: quantityFilter,
            #airTemperatureFilter: airTemperatureFilter,
            #airPressureFilter: airPressureFilter,
            #airHumidityFilter: airHumidityFilter,
            #airVisibilityFilter: airVisibilityFilter,
            #windSpeedFilter: windSpeedFilter
          }),
          returnValue: <_i4.Catch>[]) as List<_i4.Catch>);
  @override
  List<String> imageNamesSortedByTimestamp(_i46.BuildContext? context) => (super
      .noSuchMethod(Invocation.method(#imageNamesSortedByTimestamp, [context]),
          returnValue: <String>[]) as List<String>);
  @override
  _i55.Future<bool> addOrUpdate(_i4.Catch? entity,
          {List<_i44.File>? imageFiles = const [],
          bool? compressImages = true,
          bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [
            entity
          ], {
            #imageFiles: imageFiles,
            #compressImages: compressImages,
            #notify: notify
          }),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  bool existsWith({_i4.Id? speciesId}) => (super.noSuchMethod(
      Invocation.method(#existsWith, [], {#speciesId: speciesId}),
      returnValue: false) as bool);
  @override
  String deleteMessage(_i46.BuildContext? context, _i4.Catch? cat) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, cat]),
          returnValue: '') as String);
  @override
  int numberOfCustomEntityValues(_i4.Id? customEntityId) => (super.noSuchMethod(
      Invocation.method(#numberOfCustomEntityValues, [customEntityId]),
      returnValue: 0) as int);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.Catch>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.Catch> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.Catch>[]) as List<_i4.Catch>);
  @override
  List<_i4.Catch> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.Catch>[]) as List<_i4.Catch>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.Catch>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.Catch>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.Catch? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.Catch? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.Catch? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.Catch> addTypedListener(
          {void Function(_i4.Catch)? onAdd,
          void Function(_i4.Catch)? onDelete,
          void Function(_i4.Catch)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.Catch>())
          as _i5.EntityListener<_i4.Catch>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CustomEntityManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomEntityManager extends _i1.Mock
    implements _i12.CustomEntityManager {
  MockCustomEntityManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i4.CustomEntity, _i4.CustomEntity) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.CustomEntity __p0, _i4.CustomEntity __p1) => 0)
          as int Function(_i4.CustomEntity, _i4.CustomEntity));
  @override
  Map<_i4.Id, _i4.CustomEntity> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i4.Id, _i4.CustomEntity>{})
          as Map<_i4.Id, _i4.CustomEntity>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.CustomEntity entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeCustomEntity_46()) as _i4.CustomEntity);
  @override
  _i4.Id id(_i4.CustomEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.CustomEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  String customValuesDisplayValue(
          List<_i4.CustomEntityValue>? values, _i46.BuildContext? context) =>
      (super.noSuchMethod(
          Invocation.method(#customValuesDisplayValue, [values, context]),
          returnValue: '') as String);
  @override
  int Function(_i4.CustomEntity, _i4.CustomEntity) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.CustomEntity __p0, _i4.CustomEntity __p1) => 0)
          as int Function(_i4.CustomEntity, _i4.CustomEntity));
  @override
  List<_i4.CustomEntity> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.CustomEntity>[]) as List<_i4.CustomEntity>);
  @override
  String displayName(_i46.BuildContext? context, _i4.CustomEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i4.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.CustomEntity>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.CustomEntity> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.CustomEntity>[]) as List<_i4.CustomEntity>);
  @override
  List<_i4.CustomEntity> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.CustomEntity>[]) as List<_i4.CustomEntity>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> addOrUpdate(_i4.CustomEntity? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.CustomEntity>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.CustomEntity>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.CustomEntity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.CustomEntity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.CustomEntity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.CustomEntity> addTypedListener(
          {void Function(_i4.CustomEntity)? onAdd,
          void Function(_i4.CustomEntity)? onDelete,
          void Function(_i4.CustomEntity)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.CustomEntity>())
          as _i5.EntityListener<_i4.CustomEntity>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DriveApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockDriveApi extends _i1.Mock implements _i42.DriveApi {
  MockDriveApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i42.AboutResource get about => (super.noSuchMethod(Invocation.getter(#about),
      returnValue: _FakeAboutResource_47()) as _i42.AboutResource);
  @override
  _i42.ChangesResource get changes =>
      (super.noSuchMethod(Invocation.getter(#changes),
          returnValue: _FakeChangesResource_48()) as _i42.ChangesResource);
  @override
  _i42.ChannelsResource get channels =>
      (super.noSuchMethod(Invocation.getter(#channels),
          returnValue: _FakeChannelsResource_49()) as _i42.ChannelsResource);
  @override
  _i42.CommentsResource get comments =>
      (super.noSuchMethod(Invocation.getter(#comments),
          returnValue: _FakeCommentsResource_50()) as _i42.CommentsResource);
  @override
  _i42.DrivesResource get drives =>
      (super.noSuchMethod(Invocation.getter(#drives),
          returnValue: _FakeDrivesResource_51()) as _i42.DrivesResource);
  @override
  _i42.FilesResource get files => (super.noSuchMethod(Invocation.getter(#files),
      returnValue: _FakeFilesResource_52()) as _i42.FilesResource);
  @override
  _i42.PermissionsResource get permissions => (super.noSuchMethod(
      Invocation.getter(#permissions),
      returnValue: _FakePermissionsResource_53()) as _i42.PermissionsResource);
  @override
  _i42.RepliesResource get replies =>
      (super.noSuchMethod(Invocation.getter(#replies),
          returnValue: _FakeRepliesResource_54()) as _i42.RepliesResource);
  @override
  _i42.RevisionsResource get revisions =>
      (super.noSuchMethod(Invocation.getter(#revisions),
          returnValue: _FakeRevisionsResource_55()) as _i42.RevisionsResource);
  @override
  _i42.TeamdrivesResource get teamdrives => (super.noSuchMethod(
      Invocation.getter(#teamdrives),
      returnValue: _FakeTeamdrivesResource_56()) as _i42.TeamdrivesResource);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FileList].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileList extends _i1.Mock implements _i42.FileList {
  MockFileList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set files(List<_i42.File>? _files) =>
      super.noSuchMethod(Invocation.setter(#files, _files),
          returnValueForMissingStub: null);
  @override
  set incompleteSearch(bool? _incompleteSearch) => super.noSuchMethod(
      Invocation.setter(#incompleteSearch, _incompleteSearch),
      returnValueForMissingStub: null);
  @override
  set kind(String? _kind) => super.noSuchMethod(Invocation.setter(#kind, _kind),
      returnValueForMissingStub: null);
  @override
  set nextPageToken(String? _nextPageToken) =>
      super.noSuchMethod(Invocation.setter(#nextPageToken, _nextPageToken),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FilesResource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilesResource extends _i1.Mock implements _i42.FilesResource {
  MockFilesResource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<_i42.File> copy(_i42.File? request, String? fileId,
          {bool? enforceSingleParent,
          bool? ignoreDefaultVisibility,
          String? includePermissionsForView,
          bool? keepRevisionForever,
          String? ocrLanguage,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(#copy, [
                request,
                fileId
              ], {
                #enforceSingleParent: enforceSingleParent,
                #ignoreDefaultVisibility: ignoreDefaultVisibility,
                #includePermissionsForView: includePermissionsForView,
                #keepRevisionForever: keepRevisionForever,
                #ocrLanguage: ocrLanguage,
                #supportsAllDrives: supportsAllDrives,
                #supportsTeamDrives: supportsTeamDrives,
                #$fields: $fields
              }),
              returnValue: Future<_i42.File>.value(_FakeFile_57()))
          as _i55.Future<_i42.File>);
  @override
  _i55.Future<_i42.File> create(_i42.File? request,
          {bool? enforceSingleParent,
          bool? ignoreDefaultVisibility,
          String? includePermissionsForView,
          bool? keepRevisionForever,
          String? ocrLanguage,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          bool? useContentAsIndexableText,
          String? $fields,
          _i42.UploadOptions? uploadOptions = _i42.UploadOptions.defaultOptions,
          _i42.Media? uploadMedia}) =>
      (super.noSuchMethod(
              Invocation.method(#create, [
                request
              ], {
                #enforceSingleParent: enforceSingleParent,
                #ignoreDefaultVisibility: ignoreDefaultVisibility,
                #includePermissionsForView: includePermissionsForView,
                #keepRevisionForever: keepRevisionForever,
                #ocrLanguage: ocrLanguage,
                #supportsAllDrives: supportsAllDrives,
                #supportsTeamDrives: supportsTeamDrives,
                #useContentAsIndexableText: useContentAsIndexableText,
                #$fields: $fields,
                #uploadOptions: uploadOptions,
                #uploadMedia: uploadMedia
              }),
              returnValue: Future<_i42.File>.value(_FakeFile_57()))
          as _i55.Future<_i42.File>);
  @override
  _i55.Future<void> delete(String? fileId,
          {bool? enforceSingleParent,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [
                fileId
              ], {
                #enforceSingleParent: enforceSingleParent,
                #supportsAllDrives: supportsAllDrives,
                #supportsTeamDrives: supportsTeamDrives,
                #$fields: $fields
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> emptyTrash({bool? enforceSingleParent, String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(#emptyTrash, [], {
                #enforceSingleParent: enforceSingleParent,
                #$fields: $fields
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<_i42.Media?> export(String? fileId, String? mimeType,
          {String? $fields,
          _i42.DownloadOptions? downloadOptions =
              _i42.DownloadOptions.metadata}) =>
      (super.noSuchMethod(
              Invocation.method(#export, [fileId, mimeType],
                  {#$fields: $fields, #downloadOptions: downloadOptions}),
              returnValue: Future<_i42.Media?>.value())
          as _i55.Future<_i42.Media?>);
  @override
  _i55.Future<_i42.GeneratedIds> generateIds(
          {int? count, String? space, String? type, String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(#generateIds, [], {
                #count: count,
                #space: space,
                #type: type,
                #$fields: $fields
              }),
              returnValue:
                  Future<_i42.GeneratedIds>.value(_FakeGeneratedIds_58()))
          as _i55.Future<_i42.GeneratedIds>);
  @override
  _i55.Future<Object> get(String? fileId,
          {bool? acknowledgeAbuse,
          String? includePermissionsForView,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields,
          _i42.DownloadOptions? downloadOptions =
              _i42.DownloadOptions.metadata}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [
                fileId
              ], {
                #acknowledgeAbuse: acknowledgeAbuse,
                #includePermissionsForView: includePermissionsForView,
                #supportsAllDrives: supportsAllDrives,
                #supportsTeamDrives: supportsTeamDrives,
                #$fields: $fields,
                #downloadOptions: downloadOptions
              }),
              returnValue: Future<Object>.value(_FakeObject_59()))
          as _i55.Future<Object>);
  @override
  _i55.Future<_i42.FileList> list(
          {String? corpora,
          String? corpus,
          String? driveId,
          bool? includeItemsFromAllDrives,
          String? includePermissionsForView,
          bool? includeTeamDriveItems,
          String? orderBy,
          int? pageSize,
          String? pageToken,
          String? q,
          String? spaces,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? teamDriveId,
          String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(#list, [], {
                #corpora: corpora,
                #corpus: corpus,
                #driveId: driveId,
                #includeItemsFromAllDrives: includeItemsFromAllDrives,
                #includePermissionsForView: includePermissionsForView,
                #includeTeamDriveItems: includeTeamDriveItems,
                #orderBy: orderBy,
                #pageSize: pageSize,
                #pageToken: pageToken,
                #q: q,
                #spaces: spaces,
                #supportsAllDrives: supportsAllDrives,
                #supportsTeamDrives: supportsTeamDrives,
                #teamDriveId: teamDriveId,
                #$fields: $fields
              }),
              returnValue: Future<_i42.FileList>.value(_FakeFileList_60()))
          as _i55.Future<_i42.FileList>);
  @override
  _i55.Future<_i42.File> update(_i42.File? request, String? fileId,
          {String? addParents,
          bool? enforceSingleParent,
          String? includePermissionsForView,
          bool? keepRevisionForever,
          String? ocrLanguage,
          String? removeParents,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          bool? useContentAsIndexableText,
          String? $fields,
          _i42.UploadOptions? uploadOptions = _i42.UploadOptions.defaultOptions,
          _i42.Media? uploadMedia}) =>
      (super.noSuchMethod(
              Invocation.method(#update, [
                request,
                fileId
              ], {
                #addParents: addParents,
                #enforceSingleParent: enforceSingleParent,
                #includePermissionsForView: includePermissionsForView,
                #keepRevisionForever: keepRevisionForever,
                #ocrLanguage: ocrLanguage,
                #removeParents: removeParents,
                #supportsAllDrives: supportsAllDrives,
                #supportsTeamDrives: supportsTeamDrives,
                #useContentAsIndexableText: useContentAsIndexableText,
                #$fields: $fields,
                #uploadOptions: uploadOptions,
                #uploadMedia: uploadMedia
              }),
              returnValue: Future<_i42.File>.value(_FakeFile_57()))
          as _i55.Future<_i42.File>);
  @override
  _i55.Future<Object> watch(_i61.$Channel? request, String? fileId,
          {bool? acknowledgeAbuse,
          String? includePermissionsForView,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields,
          _i42.DownloadOptions? downloadOptions =
              _i42.DownloadOptions.metadata}) =>
      (super.noSuchMethod(
              Invocation.method(#watch, [
                request,
                fileId
              ], {
                #acknowledgeAbuse: acknowledgeAbuse,
                #includePermissionsForView: includePermissionsForView,
                #supportsAllDrives: supportsAllDrives,
                #supportsTeamDrives: supportsTeamDrives,
                #$fields: $fields,
                #downloadOptions: downloadOptions
              }),
              returnValue: Future<Object>.value(_FakeObject_59()))
          as _i55.Future<Object>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DriveApiWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDriveApiWrapper extends _i1.Mock implements _i25.DriveApiWrapper {
  MockDriveApiWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i42.DriveApi newInstance(_i41.Client? client) =>
      (super.noSuchMethod(Invocation.method(#newInstance, [client]),
          returnValue: _FakeDriveApi_61()) as _i42.DriveApi);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FishingSpotManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFishingSpotManager extends _i1.Mock
    implements _i13.FishingSpotManager {
  MockFishingSpotManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i4.FishingSpot, _i4.FishingSpot) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.FishingSpot __p0, _i4.FishingSpot __p1) => 0)
          as int Function(_i4.FishingSpot, _i4.FishingSpot));
  @override
  Map<_i4.Id, _i4.FishingSpot> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i4.Id, _i4.FishingSpot>{})
          as Map<_i4.Id, _i4.FishingSpot>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.FishingSpot entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeFishingSpot_62()) as _i4.FishingSpot);
  @override
  _i4.Id id(_i4.FishingSpot? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.FishingSpot? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  String displayName(_i46.BuildContext? context, _i4.FishingSpot? entity,
          {bool? includeLatLngLabels = true,
          bool? includeBodyOfWater = false}) =>
      (super.noSuchMethod(
          Invocation.method(#displayName, [
            context,
            entity
          ], {
            #includeLatLngLabels: includeLatLngLabels,
            #includeBodyOfWater: includeBodyOfWater
          }),
          returnValue: '') as String);
  @override
  void setImageName(_i4.FishingSpot? entity, String? imageName) =>
      super.noSuchMethod(Invocation.method(#setImageName, [entity, imageName]),
          returnValueForMissingStub: null);
  @override
  void clearImageName(_i4.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#clearImageName, [entity]),
          returnValueForMissingStub: null);
  @override
  bool matchesFilter(_i4.Id? id, String? filter,
          [_i46.BuildContext? context]) =>
      (super.noSuchMethod(
          Invocation.method(#matchesFilter, [id, filter, context]),
          returnValue: false) as bool);
  @override
  List<_i4.FishingSpot> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.FishingSpot>[]) as List<_i4.FishingSpot>);
  @override
  _i4.FishingSpot? withinRadius(_i47.LatLng? latLng, [int? meters = 30]) =>
      (super.noSuchMethod(Invocation.method(#withinRadius, [latLng, meters]))
          as _i4.FishingSpot?);
  @override
  int numberOfCatches(_i4.Id? fishingSpotId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [fishingSpotId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(
          _i46.BuildContext? context, _i4.FishingSpot? fishingSpot) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMessage, [context, fishingSpot]),
          returnValue: '') as String);
  @override
  _i55.Future<bool> addOrUpdate(_i4.FishingSpot? entity,
          {_i44.File? imageFile,
          bool? compressImages = true,
          bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [
            entity
          ], {
            #imageFile: imageFile,
            #compressImages: compressImages,
            #notify: notify
          }),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int Function(_i4.FishingSpot, _i4.FishingSpot) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.FishingSpot __p0, _i4.FishingSpot __p1) => 0)
          as int Function(_i4.FishingSpot, _i4.FishingSpot));
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.FishingSpot>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.FishingSpot> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.FishingSpot>[]) as List<_i4.FishingSpot>);
  @override
  List<_i4.FishingSpot> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.FishingSpot>[]) as List<_i4.FishingSpot>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.FishingSpot>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.FishingSpot>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.FishingSpot? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.FishingSpot> addTypedListener(
          {void Function(_i4.FishingSpot)? onAdd,
          void Function(_i4.FishingSpot)? onDelete,
          void Function(_i4.FishingSpot)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.FishingSpot>())
          as _i5.EntityListener<_i4.FishingSpot>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GoogleSignIn].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignIn extends _i1.Mock implements _i43.GoogleSignIn {
  MockGoogleSignIn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i43.SignInOption get signInOption =>
      (super.noSuchMethod(Invocation.getter(#signInOption),
          returnValue: _i43.SignInOption.standard) as _i43.SignInOption);
  @override
  List<String> get scopes =>
      (super.noSuchMethod(Invocation.getter(#scopes), returnValue: <String>[])
          as List<String>);
  @override
  _i55.Stream<_i43.GoogleSignInAccount?> get onCurrentUserChanged =>
      (super.noSuchMethod(Invocation.getter(#onCurrentUserChanged),
              returnValue: Stream<_i43.GoogleSignInAccount?>.empty())
          as _i55.Stream<_i43.GoogleSignInAccount?>);
  @override
  _i55.Future<_i43.GoogleSignInAccount?> signInSilently(
          {bool? suppressErrors = true, bool? reAuthenticate = false}) =>
      (super.noSuchMethod(
              Invocation.method(#signInSilently, [], {
                #suppressErrors: suppressErrors,
                #reAuthenticate: reAuthenticate
              }),
              returnValue: Future<_i43.GoogleSignInAccount?>.value())
          as _i55.Future<_i43.GoogleSignInAccount?>);
  @override
  _i55.Future<bool> isSignedIn() =>
      (super.noSuchMethod(Invocation.method(#isSignedIn, []),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<_i43.GoogleSignInAccount?> signIn() =>
      (super.noSuchMethod(Invocation.method(#signIn, []),
              returnValue: Future<_i43.GoogleSignInAccount?>.value())
          as _i55.Future<_i43.GoogleSignInAccount?>);
  @override
  _i55.Future<_i43.GoogleSignInAccount?> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: Future<_i43.GoogleSignInAccount?>.value())
          as _i55.Future<_i43.GoogleSignInAccount?>);
  @override
  _i55.Future<_i43.GoogleSignInAccount?> disconnect() =>
      (super.noSuchMethod(Invocation.method(#disconnect, []),
              returnValue: Future<_i43.GoogleSignInAccount?>.value())
          as _i55.Future<_i43.GoogleSignInAccount?>);
  @override
  _i55.Future<bool> requestScopes(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#requestScopes, [scopes]),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GoogleSignInAccount].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInAccount extends _i1.Mock
    implements _i43.GoogleSignInAccount {
  MockGoogleSignInAccount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get email =>
      (super.noSuchMethod(Invocation.getter(#email), returnValue: '')
          as String);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i55.Future<_i43.GoogleSignInAuthentication> get authentication =>
      (super.noSuchMethod(Invocation.getter(#authentication),
              returnValue: Future<_i43.GoogleSignInAuthentication>.value(
                  _FakeGoogleSignInAuthentication_63()))
          as _i55.Future<_i43.GoogleSignInAuthentication>);
  @override
  _i55.Future<Map<String, String>> get authHeaders => (super.noSuchMethod(
          Invocation.getter(#authHeaders),
          returnValue: Future<Map<String, String>>.value(<String, String>{}))
      as _i55.Future<Map<String, String>>);
  @override
  _i55.Future<void> clearAuthCache() => (super.noSuchMethod(
      Invocation.method(#clearAuthCache, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ImageManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageManager extends _i1.Mock implements _i14.ImageManager {
  MockImageManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<List<String>> get imageFiles =>
      (super.noSuchMethod(Invocation.getter(#imageFiles),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i55.Future<List<String>>);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i44.File imageFile(String? name) =>
      (super.noSuchMethod(Invocation.method(#imageFile, [name]),
          returnValue: _FakeFile_64()) as _i44.File);
  @override
  _i55.Future<_i60.Uint8List?> image(_i46.BuildContext? context,
          {String? fileName, double? size}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #image, [context], {#fileName: fileName, #size: size}),
              returnValue: Future<_i60.Uint8List?>.value())
          as _i55.Future<_i60.Uint8List?>);
  @override
  _i55.Future<Map<_i44.File, _i60.Uint8List>> images(_i46.BuildContext? context,
          {List<String>? imageNames, double? size}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #images, [context], {#imageNames: imageNames, #size: size}),
              returnValue: Future<Map<_i44.File, _i60.Uint8List>>.value(
                  <_i44.File, _i60.Uint8List>{}))
          as _i55.Future<Map<_i44.File, _i60.Uint8List>>);
  @override
  _i55.Future<List<String>> save(List<_i44.File>? files,
          {bool? compress = true}) =>
      (super.noSuchMethod(
              Invocation.method(#save, [files], {#compress: compress}),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i55.Future<List<String>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IOSink].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOSink extends _i1.Mock implements _i44.IOSink {
  MockIOSink() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i45.Encoding get encoding =>
      (super.noSuchMethod(Invocation.getter(#encoding),
          returnValue: _FakeEncoding_65()) as _i45.Encoding);
  @override
  set encoding(_i45.Encoding? _encoding) =>
      super.noSuchMethod(Invocation.setter(#encoding, _encoding),
          returnValueForMissingStub: null);
  @override
  _i55.Future<dynamic> get done => (super.noSuchMethod(Invocation.getter(#done),
      returnValue: Future<dynamic>.value()) as _i55.Future<dynamic>);
  @override
  void add(List<int>? data) =>
      super.noSuchMethod(Invocation.method(#add, [data]),
          returnValueForMissingStub: null);
  @override
  void write(Object? object) =>
      super.noSuchMethod(Invocation.method(#write, [object]),
          returnValueForMissingStub: null);
  @override
  void writeAll(Iterable<dynamic>? objects, [String? separator = r'']) =>
      super.noSuchMethod(Invocation.method(#writeAll, [objects, separator]),
          returnValueForMissingStub: null);
  @override
  void writeln([Object? object = r'']) =>
      super.noSuchMethod(Invocation.method(#writeln, [object]),
          returnValueForMissingStub: null);
  @override
  void writeCharCode(int? charCode) =>
      super.noSuchMethod(Invocation.method(#writeCharCode, [charCode]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i55.Future<dynamic> addStream(_i55.Stream<List<int>>? stream) =>
      (super.noSuchMethod(Invocation.method(#addStream, [stream]),
          returnValue: Future<dynamic>.value()) as _i55.Future<dynamic>);
  @override
  _i55.Future<dynamic> flush() =>
      (super.noSuchMethod(Invocation.method(#flush, []),
          returnValue: Future<dynamic>.value()) as _i55.Future<dynamic>);
  @override
  _i55.Future<dynamic> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future<dynamic>.value()) as _i55.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocalDatabaseManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabaseManager extends _i1.Mock
    implements _i3.LocalDatabaseManager {
  MockLocalDatabaseManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<void> initialize({_i53.Database? database}) => (super
      .noSuchMethod(Invocation.method(#initialize, [], {#database: database}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i55
      .Future<void>);
  @override
  String databasePath() =>
      (super.noSuchMethod(Invocation.method(#databasePath, []), returnValue: '')
          as String);
  @override
  _i55.Future<List<dynamic>> commitBatch(void Function(_i53.Batch)? execute) =>
      (super.noSuchMethod(Invocation.method(#commitBatch, [execute]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i55.Future<List<dynamic>>);
  @override
  _i55.Future<bool> insert(String? tableName, Map<String, dynamic>? values) =>
      (super.noSuchMethod(Invocation.method(#insert, [tableName, values]),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> insertOrReplace(
          String? tableName, Map<String, dynamic>? values,
          [_i53.Batch? batch]) =>
      (super.noSuchMethod(
          Invocation.method(#insertOrReplace, [tableName, values, batch]),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> delete(String? table,
          {String? where, List<dynamic>? whereArgs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<List<Map<String, dynamic>>> query(String? sql,
          [List<dynamic>? args]) =>
      (super.noSuchMethod(Invocation.method(#query, [sql, args]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i55.Future<List<Map<String, dynamic>>>);
  @override
  _i55.Future<bool> rawExists(String? query, [List<dynamic>? args]) =>
      (super.noSuchMethod(Invocation.method(#rawExists, [query, args]),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> rawUpdate(String? query, [List<dynamic>? args]) =>
      (super.noSuchMethod(Invocation.method(#rawUpdate, [query, args]),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> deleteEntity(_i4.Id? entityId, String? tableName,
          [_i53.Batch? batch]) =>
      (super.noSuchMethod(
          Invocation.method(#deleteEntity, [entityId, tableName, batch]),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<List<Map<String, dynamic>>> fetchAll(String? tableName) =>
      (super.noSuchMethod(Invocation.method(#fetchAll, [tableName]),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i55.Future<List<Map<String, dynamic>>>);
  @override
  _i55.Future<void> replaceRows(
          String? tableName, List<Map<String, dynamic>>? newRows) =>
      (super.noSuchMethod(Invocation.method(#replaceRows, [tableName, newRows]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> commitTransaction(void Function(_i53.Batch)? updateBatch) =>
      (super.noSuchMethod(Invocation.method(#commitTransaction, [updateBatch]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocationMonitor].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationMonitor extends _i1.Mock implements _i15.LocationMonitor {
  MockLocationMonitor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get distanceFilterMeters =>
      (super.noSuchMethod(Invocation.getter(#distanceFilterMeters),
          returnValue: 0) as int);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MethodManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodManager extends _i1.Mock implements _i16.MethodManager {
  MockMethodManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i4.Method, _i4.Method) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.Method __p0, _i4.Method __p1) => 0)
          as int Function(_i4.Method, _i4.Method));
  @override
  Map<_i4.Id, _i4.Method> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i4.Id, _i4.Method>{}) as Map<_i4.Id, _i4.Method>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.Method entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeMethod_66()) as _i4.Method);
  @override
  _i4.Id id(_i4.Method? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.Method? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  int numberOfCatches(_i4.Id? methodId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [methodId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(_i46.BuildContext? context, _i4.Method? method) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, method]),
          returnValue: '') as String);
  @override
  int Function(_i4.Method, _i4.Method) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.Method __p0, _i4.Method __p1) => 0)
          as int Function(_i4.Method, _i4.Method));
  @override
  List<_i4.Method> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.Method>[]) as List<_i4.Method>);
  @override
  String displayName(_i46.BuildContext? context, _i4.Method? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i4.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.Method>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.Method> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.Method>[]) as List<_i4.Method>);
  @override
  List<_i4.Method> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.Method>[]) as List<_i4.Method>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> addOrUpdate(_i4.Method? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.Method>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.Method>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.Method? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.Method? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.Method? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.Method> addTypedListener(
          {void Function(_i4.Method)? onAdd,
          void Function(_i4.Method)? onDelete,
          void Function(_i4.Method)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.Method>())
          as _i5.EntityListener<_i4.Method>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PreferenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreferenceManager extends _i1.Mock implements _i62.PreferenceManager {
  MockPreferenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, dynamic> get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  _i55.Stream<void> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
          returnValue: Stream<void>.empty()) as _i55.Stream<void>);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> put(String? key, dynamic value) => (super.noSuchMethod(
      Invocation.method(#put, [key, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  void putLocal(String? key, dynamic value) =>
      super.noSuchMethod(Invocation.method(#putLocal, [key, value]),
          returnValueForMissingStub: null);
  @override
  void putStringList(String? key, List<String>? value) =>
      super.noSuchMethod(Invocation.method(#putStringList, [key, value]),
          returnValueForMissingStub: null);
  @override
  List<String> stringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#stringList, [key]),
          returnValue: <String>[]) as List<String>);
  @override
  _i55.Future<void> putId(String? key, _i4.Id? value) => (super.noSuchMethod(
      Invocation.method(#putId, [key, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i4.Id? id(String? key) =>
      (super.noSuchMethod(Invocation.method(#id, [key])) as _i4.Id?);
  @override
  _i55.Future<void> putIdCollection(String? key, Iterable<_i4.Id>? value) =>
      (super.noSuchMethod(Invocation.method(#putIdCollection, [key, value]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  List<_i4.Id> idList(String? key) =>
      (super.noSuchMethod(Invocation.method(#idList, [key]),
          returnValue: <_i4.Id>[]) as List<_i4.Id>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PropertiesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropertiesManager extends _i1.Mock implements _i17.PropertiesManager {
  MockPropertiesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get clientSenderEmail => (super
          .noSuchMethod(Invocation.getter(#clientSenderEmail), returnValue: '')
      as String);
  @override
  String get supportEmail =>
      (super.noSuchMethod(Invocation.getter(#supportEmail), returnValue: '')
          as String);
  @override
  String get sendGridApiKey =>
      (super.noSuchMethod(Invocation.getter(#sendGridApiKey), returnValue: '')
          as String);
  @override
  String get revenueCatApiKey =>
      (super.noSuchMethod(Invocation.getter(#revenueCatApiKey), returnValue: '')
          as String);
  @override
  String get visualCrossingApiKey =>
      (super.noSuchMethod(Invocation.getter(#visualCrossingApiKey),
          returnValue: '') as String);
  @override
  String get mapboxApiKey =>
      (super.noSuchMethod(Invocation.getter(#mapboxApiKey), returnValue: '')
          as String);
  @override
  String get feedbackTemplate =>
      (super.noSuchMethod(Invocation.getter(#feedbackTemplate), returnValue: '')
          as String);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ReportManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportManager extends _i1.Mock implements _i18.ReportManager {
  MockReportManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  List<_i4.Report> get defaultReports =>
      (super.noSuchMethod(Invocation.getter(#defaultReports),
          returnValue: <_i4.Report>[]) as List<_i4.Report>);
  @override
  _i4.Report get defaultReport =>
      (super.noSuchMethod(Invocation.getter(#defaultReport),
          returnValue: _FakeReport_67()) as _i4.Report);
  @override
  int Function(_i4.Report, _i4.Report) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.Report __p0, _i4.Report __p1) => 0)
          as int Function(_i4.Report, _i4.Report));
  @override
  Map<_i4.Id, _i4.Report> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i4.Id, _i4.Report>{}) as Map<_i4.Id, _i4.Report>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.Report entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeReport_67()) as _i4.Report);
  @override
  _i4.Id id(_i4.Report? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.Report? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  String displayName(_i46.BuildContext? context, _i4.Report? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  int Function(_i4.Report, _i4.Report) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.Report __p0, _i4.Report __p1) => 0)
          as int Function(_i4.Report, _i4.Report));
  @override
  List<_i4.Report> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.Report>[]) as List<_i4.Report>);
  @override
  bool matchesFilter(_i4.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.Report>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.Report> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.Report>[]) as List<_i4.Report>);
  @override
  List<_i4.Report> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.Report>[]) as List<_i4.Report>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> addOrUpdate(_i4.Report? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.Report>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.Report>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.Report? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.Report? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.Report? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.Report> addTypedListener(
          {void Function(_i4.Report)? onAdd,
          void Function(_i4.Report)? onDelete,
          void Function(_i4.Report)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.Report>())
          as _i5.EntityListener<_i4.Report>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SpeciesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpeciesManager extends _i1.Mock implements _i19.SpeciesManager {
  MockSpeciesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i4.Species, _i4.Species) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.Species __p0, _i4.Species __p1) => 0)
          as int Function(_i4.Species, _i4.Species));
  @override
  Map<_i4.Id, _i4.Species> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i4.Id, _i4.Species>{}) as Map<_i4.Id, _i4.Species>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.Species entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeSpecies_68()) as _i4.Species);
  @override
  _i4.Id id(_i4.Species? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.Species? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOfCatches(_i4.Id? speciesId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [speciesId]),
          returnValue: 0) as int);
  @override
  int Function(_i4.Species, _i4.Species) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.Species __p0, _i4.Species __p1) => 0)
          as int Function(_i4.Species, _i4.Species));
  @override
  List<_i4.Species> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.Species>[]) as List<_i4.Species>);
  @override
  String displayName(_i46.BuildContext? context, _i4.Species? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i4.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.Species>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.Species> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.Species>[]) as List<_i4.Species>);
  @override
  List<_i4.Species> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.Species>[]) as List<_i4.Species>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> addOrUpdate(_i4.Species? entity, {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.Species>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.Species>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.Species? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.Species? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.Species? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.Species> addTypedListener(
          {void Function(_i4.Species)? onAdd,
          void Function(_i4.Species)? onDelete,
          void Function(_i4.Species)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.Species>())
          as _i5.EntityListener<_i4.Species>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SubscriptionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionManager extends _i1.Mock
    implements _i20.SubscriptionManager {
  MockSubscriptionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isFree =>
      (super.noSuchMethod(Invocation.getter(#isFree), returnValue: false)
          as bool);
  @override
  bool get isPro =>
      (super.noSuchMethod(Invocation.getter(#isPro), returnValue: false)
          as bool);
  @override
  _i55.Stream<void> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
          returnValue: Stream<void>.empty()) as _i55.Stream<void>);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> purchaseSubscription(_i20.Subscription? sub) =>
      (super.noSuchMethod(Invocation.method(#purchaseSubscription, [sub]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<_i20.RestoreSubscriptionResult> restoreSubscription() =>
      (super.noSuchMethod(Invocation.method(#restoreSubscription, []),
              returnValue: Future<_i20.RestoreSubscriptionResult>.value(
                  _i20.RestoreSubscriptionResult.noSubscriptionsFound))
          as _i55.Future<_i20.RestoreSubscriptionResult>);
  @override
  _i55.Future<_i20.Subscriptions?> subscriptions() =>
      (super.noSuchMethod(Invocation.method(#subscriptions, []),
              returnValue: Future<_i20.Subscriptions?>.value())
          as _i55.Future<_i20.Subscriptions?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TimeManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeManager extends _i1.Mock implements _i21.TimeManager {
  MockTimeManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime get currentDateTime =>
      (super.noSuchMethod(Invocation.getter(#currentDateTime),
          returnValue: _FakeDateTime_69()) as DateTime);
  @override
  _i46.TimeOfDay get currentTime =>
      (super.noSuchMethod(Invocation.getter(#currentTime),
          returnValue: _FakeTimeOfDay_70()) as _i46.TimeOfDay);
  @override
  int get msSinceEpoch =>
      (super.noSuchMethod(Invocation.getter(#msSinceEpoch), returnValue: 0)
          as int);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TripManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripManager extends _i1.Mock implements _i22.TripManager {
  MockTripManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i4.Trip, _i4.Trip) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.Trip __p0, _i4.Trip __p1) => 0)
          as int Function(_i4.Trip, _i4.Trip));
  @override
  Map<_i4.Id, _i4.Trip> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
          returnValue: <_i4.Id, _i4.Trip>{}) as Map<_i4.Id, _i4.Trip>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.Trip entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeTrip_71()) as _i4.Trip);
  @override
  _i4.Id id(_i4.Trip? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.Trip? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  String displayName(_i46.BuildContext? context, _i4.Trip? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  List<_i4.Trip> trips(
          {_i46.BuildContext? context,
          String? filter,
          _i4.DateRange? dateRange,
          Iterable<_i4.Id>? tripIds = const {}}) =>
      (super.noSuchMethod(
          Invocation.method(#trips, [], {
            #context: context,
            #filter: filter,
            #dateRange: dateRange,
            #tripIds: tripIds
          }),
          returnValue: <_i4.Trip>[]) as List<_i4.Trip>);
  @override
  _i55.Future<bool> addOrUpdate(_i4.Trip? entity,
          {List<_i44.File>? imageFiles = const [], bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity],
              {#imageFiles: imageFiles, #notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  bool matchesFilter(_i4.Id? id, String? filter,
          [_i46.BuildContext? context]) =>
      (super.noSuchMethod(
          Invocation.method(#matchesFilter, [id, filter, context]),
          returnValue: false) as bool);
  @override
  String deleteMessage(_i46.BuildContext? context, _i4.Trip? trip) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, trip]),
          returnValue: '') as String);
  @override
  int numberOfCatches(_i4.Trip? trip) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [trip]),
          returnValue: 0) as int);
  @override
  List<String> allImageNames(_i4.Trip? trip) =>
      (super.noSuchMethod(Invocation.method(#allImageNames, [trip]),
          returnValue: <String>[]) as List<String>);
  @override
  bool isCatchIdInTrip(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#isCatchIdInTrip, [id]),
          returnValue: false) as bool);
  @override
  int Function(_i4.Trip, _i4.Trip) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.Trip __p0, _i4.Trip __p1) => 0)
          as int Function(_i4.Trip, _i4.Trip));
  @override
  List<_i4.Trip> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.Trip>[]) as List<_i4.Trip>);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.Trip>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.Trip> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.Trip>[]) as List<_i4.Trip>);
  @override
  List<_i4.Trip> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.Trip>[]) as List<_i4.Trip>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.Trip>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.Trip>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.Trip? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.Trip? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.Trip? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.Trip> addTypedListener(
          {void Function(_i4.Trip)? onAdd,
          void Function(_i4.Trip)? onDelete,
          void Function(_i4.Trip)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.Trip>())
          as _i5.EntityListener<_i4.Trip>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserPreferenceManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPreferenceManager extends _i1.Mock
    implements _i23.UserPreferenceManager {
  MockUserPreferenceManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  List<_i4.Id> get atmosphereFieldIds =>
      (super.noSuchMethod(Invocation.getter(#atmosphereFieldIds),
          returnValue: <_i4.Id>[]) as List<_i4.Id>);
  @override
  List<_i4.Id> get baitVariantFieldIds =>
      (super.noSuchMethod(Invocation.getter(#baitVariantFieldIds),
          returnValue: <_i4.Id>[]) as List<_i4.Id>);
  @override
  List<_i4.Id> get catchFieldIds =>
      (super.noSuchMethod(Invocation.getter(#catchFieldIds),
          returnValue: <_i4.Id>[]) as List<_i4.Id>);
  @override
  List<_i4.Id> get tripFieldIds =>
      (super.noSuchMethod(Invocation.getter(#tripFieldIds),
          returnValue: <_i4.Id>[]) as List<_i4.Id>);
  @override
  _i4.MeasurementSystem get catchLengthSystem =>
      (super.noSuchMethod(Invocation.getter(#catchLengthSystem),
          returnValue: _FakeMeasurementSystem_72()) as _i4.MeasurementSystem);
  @override
  _i4.MeasurementSystem get catchWeightSystem =>
      (super.noSuchMethod(Invocation.getter(#catchWeightSystem),
          returnValue: _FakeMeasurementSystem_72()) as _i4.MeasurementSystem);
  @override
  _i4.MeasurementSystem get waterDepthSystem =>
      (super.noSuchMethod(Invocation.getter(#waterDepthSystem),
          returnValue: _FakeMeasurementSystem_72()) as _i4.MeasurementSystem);
  @override
  _i4.MeasurementSystem get waterTemperatureSystem =>
      (super.noSuchMethod(Invocation.getter(#waterTemperatureSystem),
          returnValue: _FakeMeasurementSystem_72()) as _i4.MeasurementSystem);
  @override
  _i4.MeasurementSystem get airTemperatureSystem =>
      (super.noSuchMethod(Invocation.getter(#airTemperatureSystem),
          returnValue: _FakeMeasurementSystem_72()) as _i4.MeasurementSystem);
  @override
  _i4.MeasurementSystem get airPressureSystem =>
      (super.noSuchMethod(Invocation.getter(#airPressureSystem),
          returnValue: _FakeMeasurementSystem_72()) as _i4.MeasurementSystem);
  @override
  _i4.MeasurementSystem get airVisibilitySystem =>
      (super.noSuchMethod(Invocation.getter(#airVisibilitySystem),
          returnValue: _FakeMeasurementSystem_72()) as _i4.MeasurementSystem);
  @override
  _i4.MeasurementSystem get windSpeedSystem =>
      (super.noSuchMethod(Invocation.getter(#windSpeedSystem),
          returnValue: _FakeMeasurementSystem_72()) as _i4.MeasurementSystem);
  @override
  bool get autoFetchAtmosphere =>
      (super.noSuchMethod(Invocation.getter(#autoFetchAtmosphere),
          returnValue: false) as bool);
  @override
  bool get didRateApp =>
      (super.noSuchMethod(Invocation.getter(#didRateApp), returnValue: false)
          as bool);
  @override
  bool get didOnboard =>
      (super.noSuchMethod(Invocation.getter(#didOnboard), returnValue: false)
          as bool);
  @override
  bool get didSetupBackup => (super
          .noSuchMethod(Invocation.getter(#didSetupBackup), returnValue: false)
      as bool);
  @override
  bool get autoBackup =>
      (super.noSuchMethod(Invocation.getter(#autoBackup), returnValue: false)
          as bool);
  @override
  bool get isTrackingMoonPhases =>
      (super.noSuchMethod(Invocation.getter(#isTrackingMoonPhases),
          returnValue: false) as bool);
  @override
  bool get isTrackingAnglers =>
      (super.noSuchMethod(Invocation.getter(#isTrackingAnglers),
          returnValue: false) as bool);
  @override
  bool get isTrackingBaits => (super
          .noSuchMethod(Invocation.getter(#isTrackingBaits), returnValue: false)
      as bool);
  @override
  bool get isTrackingFishingSpots =>
      (super.noSuchMethod(Invocation.getter(#isTrackingFishingSpots),
          returnValue: false) as bool);
  @override
  bool get isTrackingImages =>
      (super.noSuchMethod(Invocation.getter(#isTrackingImages),
          returnValue: false) as bool);
  @override
  bool get isTrackingSpecies =>
      (super.noSuchMethod(Invocation.getter(#isTrackingSpecies),
          returnValue: false) as bool);
  @override
  bool get isTrackingLength =>
      (super.noSuchMethod(Invocation.getter(#isTrackingLength),
          returnValue: false) as bool);
  @override
  bool get isTrackingWeight =>
      (super.noSuchMethod(Invocation.getter(#isTrackingWeight),
          returnValue: false) as bool);
  @override
  bool get isTrackingMethods =>
      (super.noSuchMethod(Invocation.getter(#isTrackingMethods),
          returnValue: false) as bool);
  @override
  bool get isTrackingSeasons =>
      (super.noSuchMethod(Invocation.getter(#isTrackingSeasons),
          returnValue: false) as bool);
  @override
  bool get isTrackingTides => (super
          .noSuchMethod(Invocation.getter(#isTrackingTides), returnValue: false)
      as bool);
  @override
  bool get isTrackingPeriods =>
      (super.noSuchMethod(Invocation.getter(#isTrackingPeriods),
          returnValue: false) as bool);
  @override
  bool get isTrackingWaterClarities =>
      (super.noSuchMethod(Invocation.getter(#isTrackingWaterClarities),
          returnValue: false) as bool);
  @override
  Map<String, dynamic> get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i55.Stream<void> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
          returnValue: Stream<void>.empty()) as _i55.Stream<void>);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  _i55.Future<void> setAtmosphereFieldIds(List<_i4.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setAtmosphereFieldIds, [ids]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setBaitVariantFieldIds(List<_i4.Id>? ids) =>
      (super.noSuchMethod(Invocation.method(#setBaitVariantFieldIds, [ids]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setCatchFieldIds(List<_i4.Id>? ids) => (super.noSuchMethod(
      Invocation.method(#setCatchFieldIds, [ids]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setTripFieldIds(List<_i4.Id>? ids) => (super.noSuchMethod(
      Invocation.method(#setTripFieldIds, [ids]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setCatchLengthSystem(_i4.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setCatchLengthSystem, [system]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setCatchWeightSystem(_i4.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setCatchWeightSystem, [system]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setWaterDepthSystem(_i4.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setWaterDepthSystem, [system]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setWaterTemperatureSystem(_i4.MeasurementSystem? system) =>
      (super.noSuchMethod(
              Invocation.method(#setWaterTemperatureSystem, [system]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setAirTemperatureSystem(_i4.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setAirTemperatureSystem, [system]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setAirPressureSystem(_i4.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setAirPressureSystem, [system]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setAirVisibilitySystem(_i4.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setAirVisibilitySystem, [system]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setWindSpeedSystem(_i4.MeasurementSystem? system) =>
      (super.noSuchMethod(Invocation.method(#setWindSpeedSystem, [system]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setAutoFetchAtmosphere(bool? autoFetch) => (super
          .noSuchMethod(Invocation.method(#setAutoFetchAtmosphere, [autoFetch]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i55.Future<void>);
  @override
  _i55.Future<void> setRateTimerStartedAt(int? timestamp) => (super
          .noSuchMethod(Invocation.method(#setRateTimerStartedAt, [timestamp]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i55.Future<void>);
  @override
  _i55.Future<void> setDidRateApp(bool? rated) => (super.noSuchMethod(
      Invocation.method(#setDidRateApp, [rated]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setDidOnboard(bool? onboarded) => (super.noSuchMethod(
      Invocation.method(#setDidOnboard, [onboarded]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setDidSetupBackup(bool? setupBackup) => (super.noSuchMethod(
      Invocation.method(#setDidSetupBackup, [setupBackup]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setLastBackupAt(int? lastBackupAt) => (super.noSuchMethod(
      Invocation.method(#setLastBackupAt, [lastBackupAt]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setAutoBackup(bool? auto) => (super.noSuchMethod(
      Invocation.method(#setAutoBackup, [auto]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setSelectedReportId(_i4.Id? id) => (super.noSuchMethod(
      Invocation.method(#setSelectedReportId, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setMapType(String? type) => (super.noSuchMethod(
      Invocation.method(#setMapType, [type]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setUserEmail(String? email) => (super.noSuchMethod(
      Invocation.method(#setUserEmail, [email]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setUserName(String? name) => (super.noSuchMethod(
      Invocation.method(#setUserName, [name]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> put(String? key, dynamic value) => (super.noSuchMethod(
      Invocation.method(#put, [key, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  void putLocal(String? key, dynamic value) =>
      super.noSuchMethod(Invocation.method(#putLocal, [key, value]),
          returnValueForMissingStub: null);
  @override
  void putStringList(String? key, List<String>? value) =>
      super.noSuchMethod(Invocation.method(#putStringList, [key, value]),
          returnValueForMissingStub: null);
  @override
  List<String> stringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#stringList, [key]),
          returnValue: <String>[]) as List<String>);
  @override
  _i55.Future<void> putId(String? key, _i4.Id? value) => (super.noSuchMethod(
      Invocation.method(#putId, [key, value]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i4.Id? id(String? key) =>
      (super.noSuchMethod(Invocation.method(#id, [key])) as _i4.Id?);
  @override
  _i55.Future<void> putIdCollection(String? key, Iterable<_i4.Id>? value) =>
      (super.noSuchMethod(Invocation.method(#putIdCollection, [key, value]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  List<_i4.Id> idList(String? key) =>
      (super.noSuchMethod(Invocation.method(#idList, [key]),
          returnValue: <_i4.Id>[]) as List<_i4.Id>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [WaterClarityManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockWaterClarityManager extends _i1.Mock
    implements _i24.WaterClarityManager {
  MockWaterClarityManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(Invocation.getter(#tableName), returnValue: '')
          as String);
  @override
  int Function(_i4.WaterClarity, _i4.WaterClarity) get nameComparator =>
      (super.noSuchMethod(Invocation.getter(#nameComparator),
              returnValue: (_i4.WaterClarity __p0, _i4.WaterClarity __p1) => 0)
          as int Function(_i4.WaterClarity, _i4.WaterClarity));
  @override
  Map<_i4.Id, _i4.WaterClarity> get entities =>
      (super.noSuchMethod(Invocation.getter(#entities),
              returnValue: <_i4.Id, _i4.WaterClarity>{})
          as Map<_i4.Id, _i4.WaterClarity>);
  @override
  _i2.AppManager get appManager =>
      (super.noSuchMethod(Invocation.getter(#appManager),
          returnValue: _FakeAppManager_0()) as _i2.AppManager);
  @override
  _i3.LocalDatabaseManager get localDatabaseManager => (super.noSuchMethod(
      Invocation.getter(#localDatabaseManager),
      returnValue: _FakeLocalDatabaseManager_1()) as _i3.LocalDatabaseManager);
  @override
  int get entityCount =>
      (super.noSuchMethod(Invocation.getter(#entityCount), returnValue: 0)
          as int);
  @override
  bool get hasEntities =>
      (super.noSuchMethod(Invocation.getter(#hasEntities), returnValue: false)
          as bool);
  @override
  _i4.WaterClarity entityFromBytes(List<int>? bytes) =>
      (super.noSuchMethod(Invocation.method(#entityFromBytes, [bytes]),
          returnValue: _FakeWaterClarity_73()) as _i4.WaterClarity);
  @override
  _i4.Id id(_i4.WaterClarity? entity) =>
      (super.noSuchMethod(Invocation.method(#id, [entity]),
          returnValue: _FakeId_3()) as _i4.Id);
  @override
  String name(_i4.WaterClarity? entity) =>
      (super.noSuchMethod(Invocation.method(#name, [entity]), returnValue: '')
          as String);
  @override
  int numberOfCatches(_i4.Id? clarityId) =>
      (super.noSuchMethod(Invocation.method(#numberOfCatches, [clarityId]),
          returnValue: 0) as int);
  @override
  String deleteMessage(_i46.BuildContext? context, _i4.WaterClarity? clarity) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [context, clarity]),
          returnValue: '') as String);
  @override
  int Function(_i4.WaterClarity, _i4.WaterClarity) displayNameComparator(
          _i46.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#displayNameComparator, [context]),
              returnValue: (_i4.WaterClarity __p0, _i4.WaterClarity __p1) => 0)
          as int Function(_i4.WaterClarity, _i4.WaterClarity));
  @override
  List<_i4.WaterClarity> listSortedByName(
          {String? filter, Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(
              #listSortedByName, [], {#filter: filter, #ids: ids}),
          returnValue: <_i4.WaterClarity>[]) as List<_i4.WaterClarity>);
  @override
  String displayName(_i46.BuildContext? context, _i4.WaterClarity? entity) =>
      (super.noSuchMethod(Invocation.method(#displayName, [context, entity]),
          returnValue: '') as String);
  @override
  bool matchesFilter(_i4.Id? id, String? filter) =>
      (super.noSuchMethod(Invocation.method(#matchesFilter, [id, filter]),
          returnValue: false) as bool);
  @override
  bool nameExists(String? name) =>
      (super.noSuchMethod(Invocation.method(#nameExists, [name]),
          returnValue: false) as bool);
  @override
  _i55.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  bool idsMatchesFilter(List<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchesFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  Set<_i4.Id> idSet(
          {Iterable<_i4.WaterClarity>? entities = const [],
          Iterable<_i4.Id>? ids = const []}) =>
      (super.noSuchMethod(
          Invocation.method(#idSet, [], {#entities: entities, #ids: ids}),
          returnValue: <_i4.Id>{}) as Set<_i4.Id>);
  @override
  List<_i4.WaterClarity> list([Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#list, [ids]),
          returnValue: <_i4.WaterClarity>[]) as List<_i4.WaterClarity>);
  @override
  List<_i4.WaterClarity> filteredList(String? filter,
          [Iterable<_i4.Id>? ids = const []]) =>
      (super.noSuchMethod(Invocation.method(#filteredList, [filter, ids]),
          returnValue: <_i4.WaterClarity>[]) as List<_i4.WaterClarity>);
  @override
  bool idsMatchFilter(Iterable<_i4.Id>? ids, String? filter) =>
      (super.noSuchMethod(Invocation.method(#idsMatchFilter, [ids, filter]),
          returnValue: false) as bool);
  @override
  bool entityExists(_i4.Id? id) =>
      (super.noSuchMethod(Invocation.method(#entityExists, [id]),
          returnValue: false) as bool);
  @override
  _i55.Future<bool> addOrUpdate(_i4.WaterClarity? entity,
          {bool? notify = true}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrUpdate, [entity], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> delete(_i4.Id? entityId, {bool? notify = true}) => (super
      .noSuchMethod(Invocation.method(#delete, [entityId], {#notify: notify}),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  int numberOf<E extends _i56.GeneratedMessage>(
          _i4.Id? id, List<E>? items, bool Function(E)? matches) =>
      (super.noSuchMethod(Invocation.method(#numberOf, [id, items, matches]),
          returnValue: 0) as int);
  @override
  void addListener(_i5.EntityListener<_i4.WaterClarity>? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i5.EntityListener<_i4.WaterClarity>? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyOnAdd(_i4.WaterClarity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnAdd, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnDelete(_i4.WaterClarity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnDelete, [entity]),
          returnValueForMissingStub: null);
  @override
  void notifyOnUpdate(_i4.WaterClarity? entity) =>
      super.noSuchMethod(Invocation.method(#notifyOnUpdate, [entity]),
          returnValueForMissingStub: null);
  @override
  _i5.EntityListener<_i4.WaterClarity> addTypedListener(
          {void Function(_i4.WaterClarity)? onAdd,
          void Function(_i4.WaterClarity)? onDelete,
          void Function(_i4.WaterClarity)? onUpdate,
          void Function()? onReset}) =>
      (super.noSuchMethod(
              Invocation.method(#addTypedListener, [], {
                #onAdd: onAdd,
                #onDelete: onDelete,
                #onUpdate: onUpdate,
                #onReset: onReset
              }),
              returnValue: _FakeEntityListener_4<_i4.WaterClarity>())
          as _i5.EntityListener<_i4.WaterClarity>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FilePickerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePickerWrapper extends _i1.Mock implements _i26.FilePickerWrapper {
  MockFilePickerWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<_i63.FilePickerResult?> pickFiles(
          {_i63.FileType? type = _i63.FileType.any,
          List<String>? allowedExtensions,
          bool? allowMultiple = false}) =>
      (super.noSuchMethod(
              Invocation.method(#pickFiles, [], {
                #type: type,
                #allowedExtensions: allowedExtensions,
                #allowMultiple: allowMultiple
              }),
              returnValue: Future<_i63.FilePickerResult?>.value())
          as _i55.Future<_i63.FilePickerResult?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GlobalKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalKey<T extends _i46.State<_i46.StatefulWidget>> extends _i1.Mock
    implements _i46.GlobalKey<T> {
  MockGlobalKey() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}

/// A class which mocks [GoogleSignInWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInWrapper extends _i1.Mock
    implements _i27.GoogleSignInWrapper {
  MockGoogleSignInWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i43.GoogleSignIn newInstance(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#newInstance, [scopes]),
          returnValue: _FakeGoogleSignIn_74()) as _i43.GoogleSignIn);
  @override
  _i55.Future<_i59.AuthClient?> authenticatedClient(
          _i43.GoogleSignIn? googleSignIn) =>
      (super.noSuchMethod(
              Invocation.method(#authenticatedClient, [googleSignIn]),
              returnValue: Future<_i59.AuthClient?>.value())
          as _i55.Future<_i59.AuthClient?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [HttpWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpWrapper extends _i1.Mock implements _i28.HttpWrapper {
  MockHttpWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<_i41.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i45.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i41.Response>.value(_FakeResponse_40()))
          as _i55.Future<_i41.Response>);
  @override
  _i55.Future<_i41.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i41.Response>.value(_FakeResponse_40()))
          as _i55.Future<_i41.Response>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ImageCompressWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageCompressWrapper extends _i1.Mock
    implements _i29.ImageCompressWrapper {
  MockImageCompressWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<_i60.Uint8List?> compress(
          String? path, int? quality, int? size) =>
      (super.noSuchMethod(Invocation.method(#compress, [path, quality, size]),
              returnValue: Future<_i60.Uint8List?>.value())
          as _i55.Future<_i60.Uint8List?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockIoWrapper extends _i1.Mock implements _i31.IoWrapper {
  MockIoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAndroid =>
      (super.noSuchMethod(Invocation.getter(#isAndroid), returnValue: false)
          as bool);
  @override
  bool get isIOS =>
      (super.noSuchMethod(Invocation.getter(#isIOS), returnValue: false)
          as bool);
  @override
  _i44.Directory directory(String? path) =>
      (super.noSuchMethod(Invocation.method(#directory, [path]),
          returnValue: _FakeDirectory_75()) as _i44.Directory);
  @override
  _i44.File file(String? path) =>
      (super.noSuchMethod(Invocation.method(#file, [path]),
          returnValue: _FakeFile_64()) as _i44.File);
  @override
  _i55.Future<bool> isConnected() =>
      (super.noSuchMethod(Invocation.method(#isConnected, []),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MapboxMapController].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapboxMapController extends _i1.Mock
    implements _i47.MapboxMapController {
  MockMapboxMapController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i47.ArgumentCallbacks<_i47.Symbol> get onSymbolTapped =>
      (super.noSuchMethod(Invocation.getter(#onSymbolTapped),
              returnValue: _FakeArgumentCallbacks_76<_i47.Symbol>())
          as _i47.ArgumentCallbacks<_i47.Symbol>);
  @override
  _i47.ArgumentCallbacks<_i47.Circle> get onCircleTapped =>
      (super.noSuchMethod(Invocation.getter(#onCircleTapped),
              returnValue: _FakeArgumentCallbacks_76<_i47.Circle>())
          as _i47.ArgumentCallbacks<_i47.Circle>);
  @override
  _i47.ArgumentCallbacks<_i47.Fill> get onFillTapped =>
      (super.noSuchMethod(Invocation.getter(#onFillTapped),
              returnValue: _FakeArgumentCallbacks_76<_i47.Fill>())
          as _i47.ArgumentCallbacks<_i47.Fill>);
  @override
  _i47.ArgumentCallbacks<_i47.Symbol> get onInfoWindowTapped =>
      (super.noSuchMethod(Invocation.getter(#onInfoWindowTapped),
              returnValue: _FakeArgumentCallbacks_76<_i47.Symbol>())
          as _i47.ArgumentCallbacks<_i47.Symbol>);
  @override
  _i47.ArgumentCallbacks<_i47.Line> get onLineTapped =>
      (super.noSuchMethod(Invocation.getter(#onLineTapped),
              returnValue: _FakeArgumentCallbacks_76<_i47.Line>())
          as _i47.ArgumentCallbacks<_i47.Line>);
  @override
  Set<_i47.Symbol> get symbols =>
      (super.noSuchMethod(Invocation.getter(#symbols),
          returnValue: <_i47.Symbol>{}) as Set<_i47.Symbol>);
  @override
  Set<_i47.Line> get lines =>
      (super.noSuchMethod(Invocation.getter(#lines), returnValue: <_i47.Line>{})
          as Set<_i47.Line>);
  @override
  Set<_i47.Circle> get circles =>
      (super.noSuchMethod(Invocation.getter(#circles),
          returnValue: <_i47.Circle>{}) as Set<_i47.Circle>);
  @override
  Set<_i47.Fill> get fills =>
      (super.noSuchMethod(Invocation.getter(#fills), returnValue: <_i47.Fill>{})
          as Set<_i47.Fill>);
  @override
  bool get isCameraMoving => (super
          .noSuchMethod(Invocation.getter(#isCameraMoving), returnValue: false)
      as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i46.Widget buildView(
          Map<String, dynamic>? creationParams,
          _i57.OnPlatformViewCreatedCallback? onPlatformViewCreated,
          Set<_i64.Factory<_i65.OneSequenceGestureRecognizer>>?
              gestureRecognizers) =>
      (super.noSuchMethod(
          Invocation.method(#buildView,
              [creationParams, onPlatformViewCreated, gestureRecognizers]),
          returnValue: _FakeWidget_77()) as _i46.Widget);
  @override
  _i55.Future<bool?> animateCamera(_i47.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#animateCamera, [cameraUpdate]),
          returnValue: Future<bool?>.value()) as _i55.Future<bool?>);
  @override
  _i55.Future<bool?> moveCamera(_i47.CameraUpdate? cameraUpdate) =>
      (super.noSuchMethod(Invocation.method(#moveCamera, [cameraUpdate]),
          returnValue: Future<bool?>.value()) as _i55.Future<bool?>);
  @override
  _i55.Future<void> updateMyLocationTrackingMode(
          _i47.MyLocationTrackingMode? myLocationTrackingMode) =>
      (super.noSuchMethod(
              Invocation.method(
                  #updateMyLocationTrackingMode, [myLocationTrackingMode]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> matchMapLanguageWithDeviceDefault() => (super.noSuchMethod(
      Invocation.method(#matchMapLanguageWithDeviceDefault, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> updateContentInsets(_i46.EdgeInsets? insets,
          [bool? animated = false]) =>
      (super.noSuchMethod(
              Invocation.method(#updateContentInsets, [insets, animated]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setMapLanguage(String? language) => (super.noSuchMethod(
      Invocation.method(#setMapLanguage, [language]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> setTelemetryEnabled(bool? enabled) => (super.noSuchMethod(
      Invocation.method(#setTelemetryEnabled, [enabled]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<bool> getTelemetryEnabled() =>
      (super.noSuchMethod(Invocation.method(#getTelemetryEnabled, []),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<_i47.Symbol> addSymbol(_i47.SymbolOptions? options,
          [Map<dynamic, dynamic>? data]) =>
      (super.noSuchMethod(Invocation.method(#addSymbol, [options, data]),
              returnValue: Future<_i47.Symbol>.value(_FakeSymbol_78()))
          as _i55.Future<_i47.Symbol>);
  @override
  _i55.Future<List<_i47.Symbol>> addSymbols(List<_i47.SymbolOptions>? options,
          [List<Map<dynamic, dynamic>>? data]) =>
      (super.noSuchMethod(Invocation.method(#addSymbols, [options, data]),
              returnValue: Future<List<_i47.Symbol>>.value(<_i47.Symbol>[]))
          as _i55.Future<List<_i47.Symbol>>);
  @override
  _i55.Future<void> updateSymbol(
          _i47.Symbol? symbol, _i47.SymbolOptions? changes) =>
      (super.noSuchMethod(Invocation.method(#updateSymbol, [symbol, changes]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<_i47.LatLng> getSymbolLatLng(_i47.Symbol? symbol) =>
      (super.noSuchMethod(Invocation.method(#getSymbolLatLng, [symbol]),
              returnValue: Future<_i47.LatLng>.value(_FakeLatLng_79()))
          as _i55.Future<_i47.LatLng>);
  @override
  _i55.Future<void> removeSymbol(_i47.Symbol? symbol) => (super.noSuchMethod(
      Invocation.method(#removeSymbol, [symbol]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> removeSymbols(Iterable<_i47.Symbol>? symbols) =>
      (super.noSuchMethod(Invocation.method(#removeSymbols, [symbols]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> clearSymbols() => (super.noSuchMethod(
      Invocation.method(#clearSymbols, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<_i47.Line> addLine(_i47.LineOptions? options,
          [Map<dynamic, dynamic>? data]) =>
      (super.noSuchMethod(Invocation.method(#addLine, [options, data]),
              returnValue: Future<_i47.Line>.value(_FakeLine_80()))
          as _i55.Future<_i47.Line>);
  @override
  _i55.Future<List<_i47.Line>> addLines(List<_i47.LineOptions>? options,
          [List<Map<dynamic, dynamic>>? data]) =>
      (super.noSuchMethod(Invocation.method(#addLines, [options, data]),
              returnValue: Future<List<_i47.Line>>.value(<_i47.Line>[]))
          as _i55.Future<List<_i47.Line>>);
  @override
  _i55.Future<void> updateLine(_i47.Line? line, _i47.LineOptions? changes) =>
      (super.noSuchMethod(Invocation.method(#updateLine, [line, changes]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<List<_i47.LatLng>> getLineLatLngs(_i47.Line? line) =>
      (super.noSuchMethod(Invocation.method(#getLineLatLngs, [line]),
              returnValue: Future<List<_i47.LatLng>>.value(<_i47.LatLng>[]))
          as _i55.Future<List<_i47.LatLng>>);
  @override
  _i55.Future<void> removeLine(_i47.Line? line) => (super.noSuchMethod(
      Invocation.method(#removeLine, [line]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> removeLines(Iterable<_i47.Line>? lines) =>
      (super.noSuchMethod(Invocation.method(#removeLines, [lines]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> clearLines() => (super.noSuchMethod(
      Invocation.method(#clearLines, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<_i47.Circle> addCircle(_i47.CircleOptions? options,
          [Map<dynamic, dynamic>? data]) =>
      (super.noSuchMethod(Invocation.method(#addCircle, [options, data]),
              returnValue: Future<_i47.Circle>.value(_FakeCircle_81()))
          as _i55.Future<_i47.Circle>);
  @override
  _i55.Future<List<_i47.Circle>> addCircles(List<_i47.CircleOptions>? options,
          [List<Map<dynamic, dynamic>>? data]) =>
      (super.noSuchMethod(Invocation.method(#addCircles, [options, data]),
              returnValue: Future<List<_i47.Circle>>.value(<_i47.Circle>[]))
          as _i55.Future<List<_i47.Circle>>);
  @override
  _i55.Future<void> updateCircle(
          _i47.Circle? circle, _i47.CircleOptions? changes) =>
      (super.noSuchMethod(Invocation.method(#updateCircle, [circle, changes]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<_i47.LatLng> getCircleLatLng(_i47.Circle? circle) =>
      (super.noSuchMethod(Invocation.method(#getCircleLatLng, [circle]),
              returnValue: Future<_i47.LatLng>.value(_FakeLatLng_79()))
          as _i55.Future<_i47.LatLng>);
  @override
  _i55.Future<void> removeCircle(_i47.Circle? circle) => (super.noSuchMethod(
      Invocation.method(#removeCircle, [circle]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> removeCircles(Iterable<_i47.Circle>? circles) =>
      (super.noSuchMethod(Invocation.method(#removeCircles, [circles]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> clearCircles() => (super.noSuchMethod(
      Invocation.method(#clearCircles, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<_i47.Fill> addFill(_i47.FillOptions? options,
          [Map<dynamic, dynamic>? data]) =>
      (super.noSuchMethod(Invocation.method(#addFill, [options, data]),
              returnValue: Future<_i47.Fill>.value(_FakeFill_82()))
          as _i55.Future<_i47.Fill>);
  @override
  _i55.Future<List<_i47.Fill>> addFills(List<_i47.FillOptions>? options,
          [List<Map<dynamic, dynamic>>? data]) =>
      (super.noSuchMethod(Invocation.method(#addFills, [options, data]),
              returnValue: Future<List<_i47.Fill>>.value(<_i47.Fill>[]))
          as _i55.Future<List<_i47.Fill>>);
  @override
  _i55.Future<void> updateFill(_i47.Fill? fill, _i47.FillOptions? changes) =>
      (super.noSuchMethod(Invocation.method(#updateFill, [fill, changes]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> clearFills() => (super.noSuchMethod(
      Invocation.method(#clearFills, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> removeFill(_i47.Fill? fill) => (super.noSuchMethod(
      Invocation.method(#removeFill, [fill]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<void> removeFills(Iterable<_i47.Fill>? fills) =>
      (super.noSuchMethod(Invocation.method(#removeFills, [fills]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<List<dynamic>> queryRenderedFeatures(_i48.Point<double>? point,
          List<String>? layerIds, List<Object>? filter) =>
      (super.noSuchMethod(
          Invocation.method(#queryRenderedFeatures, [point, layerIds, filter]),
          returnValue:
              Future<List<dynamic>>.value(<dynamic>[])) as _i55
          .Future<List<dynamic>>);
  @override
  _i55.Future<List<dynamic>> queryRenderedFeaturesInRect(
          _i66.Rect? rect, List<String>? layerIds, String? filter) =>
      (super.noSuchMethod(
              Invocation.method(
                  #queryRenderedFeaturesInRect, [rect, layerIds, filter]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i55.Future<List<dynamic>>);
  @override
  _i55.Future<dynamic> invalidateAmbientCache() =>
      (super.noSuchMethod(Invocation.method(#invalidateAmbientCache, []),
          returnValue: Future<dynamic>.value()) as _i55.Future<dynamic>);
  @override
  _i55.Future<_i47.LatLng?> requestMyLocationLatLng() => (super.noSuchMethod(
      Invocation.method(#requestMyLocationLatLng, []),
      returnValue: Future<_i47.LatLng?>.value()) as _i55.Future<_i47.LatLng?>);
  @override
  _i55.Future<_i47.LatLngBounds> getVisibleRegion() => (super.noSuchMethod(
          Invocation.method(#getVisibleRegion, []),
          returnValue: Future<_i47.LatLngBounds>.value(_FakeLatLngBounds_83()))
      as _i55.Future<_i47.LatLngBounds>);
  @override
  _i55.Future<void> addImage(String? name, _i60.Uint8List? bytes,
          [bool? sdf = false]) =>
      (super.noSuchMethod(Invocation.method(#addImage, [name, bytes, sdf]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setSymbolIconAllowOverlap(bool? enable) => (super
          .noSuchMethod(Invocation.method(#setSymbolIconAllowOverlap, [enable]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i55.Future<void>);
  @override
  _i55.Future<void> setSymbolIconIgnorePlacement(bool? enable) =>
      (super.noSuchMethod(
              Invocation.method(#setSymbolIconIgnorePlacement, [enable]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> setSymbolTextAllowOverlap(bool? enable) => (super
          .noSuchMethod(Invocation.method(#setSymbolTextAllowOverlap, [enable]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i55.Future<void>);
  @override
  _i55.Future<void> setSymbolTextIgnorePlacement(bool? enable) =>
      (super.noSuchMethod(
              Invocation.method(#setSymbolTextIgnorePlacement, [enable]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> addImageSource(String? imageSourceId, _i60.Uint8List? bytes,
          _i47.LatLngQuad? coordinates) =>
      (super.noSuchMethod(
              Invocation.method(
                  #addImageSource, [imageSourceId, bytes, coordinates]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> removeImageSource(String? imageSourceId) => (super
          .noSuchMethod(Invocation.method(#removeImageSource, [imageSourceId]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i55.Future<void>);
  @override
  _i55.Future<void> addLayer(String? imageLayerId, String? imageSourceId) =>
      (super.noSuchMethod(
              Invocation.method(#addLayer, [imageLayerId, imageSourceId]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> addLayerBelow(
          String? imageLayerId, String? imageSourceId, String? belowLayerId) =>
      (super.noSuchMethod(
              Invocation.method(
                  #addLayerBelow, [imageLayerId, imageSourceId, belowLayerId]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<void> removeLayer(String? imageLayerId) => (super.noSuchMethod(
      Invocation.method(#removeLayer, [imageLayerId]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<_i48.Point<num>> toScreenLocation(_i47.LatLng? latLng) =>
      (super.noSuchMethod(Invocation.method(#toScreenLocation, [latLng]),
              returnValue: Future<_i48.Point<num>>.value(_FakePoint_84<num>()))
          as _i55.Future<_i48.Point<num>>);
  @override
  _i55.Future<List<_i48.Point<num>>> toScreenLocationBatch(
          Iterable<_i47.LatLng>? latLngs) =>
      (super.noSuchMethod(Invocation.method(#toScreenLocationBatch, [latLngs]),
              returnValue:
                  Future<List<_i48.Point<num>>>.value(<_i48.Point<num>>[]))
          as _i55.Future<List<_i48.Point<num>>>);
  @override
  _i55.Future<_i47.LatLng> toLatLng(_i48.Point<num>? screenLocation) =>
      (super.noSuchMethod(Invocation.method(#toLatLng, [screenLocation]),
              returnValue: Future<_i47.LatLng>.value(_FakeLatLng_79()))
          as _i55.Future<_i47.LatLng>);
  @override
  _i55.Future<double> getMetersPerPixelAtLatitude(double? latitude) => (super
      .noSuchMethod(Invocation.method(#getMetersPerPixelAtLatitude, [latitude]),
          returnValue: Future<double>.value(0.0)) as _i55.Future<double>);
  @override
  void addListener(_i66.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i66.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PackageInfoWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfoWrapper extends _i1.Mock
    implements _i32.PackageInfoWrapper {
  MockPackageInfoWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<_i49.PackageInfo> fromPlatform() => (super.noSuchMethod(
          Invocation.method(#fromPlatform, []),
          returnValue: Future<_i49.PackageInfo>.value(_FakePackageInfo_85()))
      as _i55.Future<_i49.PackageInfo>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PathProviderWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProviderWrapper extends _i1.Mock
    implements _i33.PathProviderWrapper {
  MockPathProviderWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<String> get appDocumentsPath =>
      (super.noSuchMethod(Invocation.getter(#appDocumentsPath),
          returnValue: Future<String>.value('')) as _i55.Future<String>);
  @override
  _i55.Future<String> get temporaryPath =>
      (super.noSuchMethod(Invocation.getter(#temporaryPath),
          returnValue: Future<String>.value('')) as _i55.Future<String>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PermissionHandlerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionHandlerWrapper extends _i1.Mock
    implements _i34.PermissionHandlerWrapper {
  MockPermissionHandlerWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<bool> get isLocationGranted =>
      (super.noSuchMethod(Invocation.getter(#isLocationGranted),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> requestLocation() =>
      (super.noSuchMethod(Invocation.method(#requestLocation, []),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> requestPhotos() =>
      (super.noSuchMethod(Invocation.method(#requestPhotos, []),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> openSettings() =>
      (super.noSuchMethod(Invocation.method(#openSettings, []),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PhotoManagerWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoManagerWrapper extends _i1.Mock
    implements _i35.PhotoManagerWrapper {
  MockPhotoManagerWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<_i52.AssetPathEntity?> getAllAssetPathEntity(
          _i52.RequestType? type) =>
      (super.noSuchMethod(Invocation.method(#getAllAssetPathEntity, [type]),
              returnValue: Future<_i52.AssetPathEntity?>.value())
          as _i55.Future<_i52.AssetPathEntity?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PurchasesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchasesWrapper extends _i1.Mock implements _i36.PurchasesWrapper {
  MockPurchasesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<bool> get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  void addPurchaserInfoUpdateListener(
          dynamic Function(_i50.PurchaserInfo)? listener) =>
      super.noSuchMethod(
          Invocation.method(#addPurchaserInfoUpdateListener, [listener]),
          returnValueForMissingStub: null);
  @override
  _i55.Future<void> setup(String? apiKey) => (super.noSuchMethod(
      Invocation.method(#setup, [apiKey]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  void setDebugEnabled(bool? enabled) =>
      super.noSuchMethod(Invocation.method(#setDebugEnabled, [enabled]),
          returnValueForMissingStub: null);
  @override
  _i55.Future<_i50.Offerings> getOfferings() =>
      (super.noSuchMethod(Invocation.method(#getOfferings, []),
              returnValue: Future<_i50.Offerings>.value(_FakeOfferings_86()))
          as _i55.Future<_i50.Offerings>);
  @override
  _i55.Future<_i50.PurchaserInfo> getPurchaserInfo() =>
      (super.noSuchMethod(Invocation.method(#getPurchaserInfo, []),
              returnValue:
                  Future<_i50.PurchaserInfo>.value(_FakePurchaserInfo_87()))
          as _i55.Future<_i50.PurchaserInfo>);
  @override
  _i55.Future<_i50.LogInResult> logIn(String? appUserId) => (super.noSuchMethod(
          Invocation.method(#logIn, [appUserId]),
          returnValue: Future<_i50.LogInResult>.value(_FakeLogInResult_88()))
      as _i55.Future<_i50.LogInResult>);
  @override
  _i55.Future<_i50.PurchaserInfo> purchasePackage(_i50.Package? package) =>
      (super.noSuchMethod(Invocation.method(#purchasePackage, [package]),
              returnValue:
                  Future<_i50.PurchaserInfo>.value(_FakePurchaserInfo_87()))
          as _i55.Future<_i50.PurchaserInfo>);
  @override
  _i55.Future<_i50.PurchaserInfo> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
              returnValue:
                  Future<_i50.PurchaserInfo>.value(_FakePurchaserInfo_87()))
          as _i55.Future<_i50.PurchaserInfo>);
  @override
  _i55.Future<_i50.PurchaserInfo> restoreTransactions() =>
      (super.noSuchMethod(Invocation.method(#restoreTransactions, []),
              returnValue:
                  Future<_i50.PurchaserInfo>.value(_FakePurchaserInfo_87()))
          as _i55.Future<_i50.PurchaserInfo>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ServicesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockServicesWrapper extends _i1.Mock implements _i37.ServicesWrapper {
  MockServicesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i51.MethodChannel methodChannel(String? name) =>
      (super.noSuchMethod(Invocation.method(#methodChannel, [name]),
          returnValue: _FakeMethodChannel_89()) as _i51.MethodChannel);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SharedPreferencesWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesWrapper extends _i1.Mock
    implements _i38.SharedPreferencesWrapper {
  MockSharedPreferencesWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> remove(String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UrlLauncherWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherWrapper extends _i1.Mock
    implements _i39.UrlLauncherWrapper {
  MockUrlLauncherWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<bool> canLaunch(String? url) =>
      (super.noSuchMethod(Invocation.method(#canLaunch, [url]),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  _i55.Future<bool> launch(String? url) =>
      (super.noSuchMethod(Invocation.method(#launch, [url]),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AssetPathEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetPathEntity extends _i1.Mock implements _i52.AssetPathEntity {
  MockAssetPathEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  set id(String? _id) => super.noSuchMethod(Invocation.setter(#id, _id),
      returnValueForMissingStub: null);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  set name(String? _name) => super.noSuchMethod(Invocation.setter(#name, _name),
      returnValueForMissingStub: null);
  @override
  int get assetCount =>
      (super.noSuchMethod(Invocation.getter(#assetCount), returnValue: 0)
          as int);
  @override
  set assetCount(int? _assetCount) =>
      super.noSuchMethod(Invocation.setter(#assetCount, _assetCount),
          returnValueForMissingStub: null);
  @override
  int get albumType =>
      (super.noSuchMethod(Invocation.getter(#albumType), returnValue: 0)
          as int);
  @override
  set albumType(int? _albumType) =>
      super.noSuchMethod(Invocation.setter(#albumType, _albumType),
          returnValueForMissingStub: null);
  @override
  _i52.FilterOptionGroup get filterOption =>
      (super.noSuchMethod(Invocation.getter(#filterOption),
          returnValue: _FakeFilterOptionGroup_90()) as _i52.FilterOptionGroup);
  @override
  set filterOption(_i52.FilterOptionGroup? _filterOption) =>
      super.noSuchMethod(Invocation.setter(#filterOption, _filterOption),
          returnValueForMissingStub: null);
  @override
  set lastModified(DateTime? _lastModified) =>
      super.noSuchMethod(Invocation.setter(#lastModified, _lastModified),
          returnValueForMissingStub: null);
  @override
  bool get isAll =>
      (super.noSuchMethod(Invocation.getter(#isAll), returnValue: false)
          as bool);
  @override
  set isAll(bool? _isAll) =>
      super.noSuchMethod(Invocation.setter(#isAll, _isAll),
          returnValueForMissingStub: null);
  @override
  _i52.RequestType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _FakeRequestType_91()) as _i52.RequestType);
  @override
  set type(_i52.RequestType? type) =>
      super.noSuchMethod(Invocation.setter(#type, type),
          returnValueForMissingStub: null);
  @override
  int get typeInt =>
      (super.noSuchMethod(Invocation.getter(#typeInt), returnValue: 0) as int);
  @override
  set typeInt(int? typeInt) =>
      super.noSuchMethod(Invocation.setter(#typeInt, typeInt),
          returnValueForMissingStub: null);
  @override
  _i55.Future<List<_i52.AssetEntity>> get assetList =>
      (super.noSuchMethod(Invocation.getter(#assetList),
              returnValue:
                  Future<List<_i52.AssetEntity>>.value(<_i52.AssetEntity>[]))
          as _i55.Future<List<_i52.AssetEntity>>);
  @override
  _i55.Future<void> refreshPathProperties({bool? maxDateTimeToNow = true}) =>
      (super.noSuchMethod(
              Invocation.method(#refreshPathProperties, [],
                  {#maxDateTimeToNow: maxDateTimeToNow}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<List<_i52.AssetEntity>> getAssetListPaged(
          int? page, int? pageSize) =>
      (super.noSuchMethod(
              Invocation.method(#getAssetListPaged, [page, pageSize]),
              returnValue:
                  Future<List<_i52.AssetEntity>>.value(<_i52.AssetEntity>[]))
          as _i55.Future<List<_i52.AssetEntity>>);
  @override
  _i55.Future<List<_i52.AssetEntity>> getAssetListRange(
          {int? start, int? end}) =>
      (super.noSuchMethod(
          Invocation.method(#getAssetListRange, [], {#start: start, #end: end}),
          returnValue: Future<List<_i52.AssetEntity>>.value(
              <_i52.AssetEntity>[])) as _i55.Future<List<_i52.AssetEntity>>);
  @override
  _i55.Future<List<_i52.AssetPathEntity>> getSubPathList() =>
      (super.noSuchMethod(Invocation.method(#getSubPathList, []),
              returnValue: Future<List<_i52.AssetPathEntity>>.value(
                  <_i52.AssetPathEntity>[]))
          as _i55.Future<List<_i52.AssetPathEntity>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Batch].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatch extends _i1.Mock implements _i53.Batch {
  MockBatch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<List<Object?>> commit(
          {bool? exclusive, bool? noResult, bool? continueOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#commit, [], {
                #exclusive: exclusive,
                #noResult: noResult,
                #continueOnError: continueOnError
              }),
              returnValue: Future<List<Object?>>.value(<Object?>[]))
          as _i55.Future<List<Object?>>);
  @override
  void rawInsert(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawInsert, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void insert(String? table, Map<String, Object?>? values,
          {String? nullColumnHack,
          _i53.ConflictAlgorithm? conflictAlgorithm}) =>
      super.noSuchMethod(
          Invocation.method(#insert, [
            table,
            values
          ], {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValueForMissingStub: null);
  @override
  void rawUpdate(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawUpdate, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void update(String? table, Map<String, Object?>? values,
          {String? where,
          List<Object?>? whereArgs,
          _i53.ConflictAlgorithm? conflictAlgorithm}) =>
      super.noSuchMethod(
          Invocation.method(#update, [
            table,
            values
          ], {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValueForMissingStub: null);
  @override
  void rawDelete(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawDelete, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void delete(String? table, {String? where, List<Object?>? whereArgs}) =>
      super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValueForMissingStub: null);
  @override
  void execute(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#execute, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  void query(String? table,
          {bool? distinct,
          List<String>? columns,
          String? where,
          List<Object?>? whereArgs,
          String? groupBy,
          String? having,
          String? orderBy,
          int? limit,
          int? offset}) =>
      super.noSuchMethod(
          Invocation.method(#query, [
            table
          ], {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset
          }),
          returnValueForMissingStub: null);
  @override
  void rawQuery(String? sql, [List<Object?>? arguments]) =>
      super.noSuchMethod(Invocation.method(#rawQuery, [sql, arguments]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Completer].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleter<T> extends _i1.Mock implements _i55.Completer<T> {
  MockCompleter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<T> get future => (super.noSuchMethod(Invocation.getter(#future),
      returnValue: Future<T>.value(null)) as _i55.Future<T>);
  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);
  @override
  void complete([_i55.FutureOr<T>? value]) =>
      super.noSuchMethod(Invocation.method(#complete, [value]),
          returnValueForMissingStub: null);
  @override
  void completeError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#completeError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i53.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  _i55.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<T> transaction<T>(
          _i55.Future<T> Function(_i53.Transaction)? action,
          {bool? exclusive}) =>
      (super.noSuchMethod(
          Invocation.method(#transaction, [action], {#exclusive: exclusive}),
          returnValue: Future<T>.value(null)) as _i55.Future<T>);
  @override
  _i55.Future<int> getVersion() =>
      (super.noSuchMethod(Invocation.method(#getVersion, []),
          returnValue: Future<int>.value(0)) as _i55.Future<int>);
  @override
  _i55.Future<void> setVersion(int? version) => (super.noSuchMethod(
      Invocation.method(#setVersion, [version]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  _i55.Future<T> devInvokeMethod<T>(String? method, [dynamic arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#devInvokeMethod, [method, arguments]),
          returnValue: Future<T>.value(null)) as _i55.Future<T>);
  @override
  _i55.Future<T> devInvokeSqlMethod<T>(String? method, String? sql,
          [List<Object?>? arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#devInvokeSqlMethod, [method, sql, arguments]),
          returnValue: Future<T>.value(null)) as _i55.Future<T>);
  @override
  String toString() => super.toString();
  @override
  _i55.Future<void> execute(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#execute, [sql, arguments]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i55.Future<void>);
  @override
  _i55.Future<int> rawInsert(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawInsert, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i55.Future<int>);
  @override
  _i55.Future<int> insert(String? table, Map<String, Object?>? values,
          {String? nullColumnHack,
          _i53.ConflictAlgorithm? conflictAlgorithm}) =>
      (super.noSuchMethod(
          Invocation.method(#insert, [
            table,
            values
          ], {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValue: Future<int>.value(0)) as _i55.Future<int>);
  @override
  _i55.Future<List<Map<String, Object?>>> query(String? table,
          {bool? distinct,
          List<String>? columns,
          String? where,
          List<Object?>? whereArgs,
          String? groupBy,
          String? having,
          String? orderBy,
          int? limit,
          int? offset}) =>
      (super.noSuchMethod(
              Invocation.method(#query, [
                table
              ], {
                #distinct: distinct,
                #columns: columns,
                #where: where,
                #whereArgs: whereArgs,
                #groupBy: groupBy,
                #having: having,
                #orderBy: orderBy,
                #limit: limit,
                #offset: offset
              }),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i55.Future<List<Map<String, Object?>>>);
  @override
  _i55.Future<List<Map<String, Object?>>> rawQuery(String? sql,
          [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawQuery, [sql, arguments]),
              returnValue: Future<List<Map<String, Object?>>>.value(
                  <Map<String, Object?>>[]))
          as _i55.Future<List<Map<String, Object?>>>);
  @override
  _i55.Future<int> rawUpdate(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawUpdate, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i55.Future<int>);
  @override
  _i55.Future<int> update(String? table, Map<String, Object?>? values,
          {String? where,
          List<Object?>? whereArgs,
          _i53.ConflictAlgorithm? conflictAlgorithm}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [
            table,
            values
          ], {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm
          }),
          returnValue: Future<int>.value(0)) as _i55.Future<int>);
  @override
  _i55.Future<int> rawDelete(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(Invocation.method(#rawDelete, [sql, arguments]),
          returnValue: Future<int>.value(0)) as _i55.Future<int>);
  @override
  _i55.Future<int> delete(String? table,
          {String? where, List<Object?>? whereArgs}) =>
      (super.noSuchMethod(
          Invocation.method(
              #delete, [table], {#where: where, #whereArgs: whereArgs}),
          returnValue: Future<int>.value(0)) as _i55.Future<int>);
  @override
  _i53.Batch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
      returnValue: _FakeBatch_92()) as _i53.Batch);
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i44.Directory {
  MockDirectory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_93())
          as Uri);
  @override
  _i44.Directory get absolute =>
      (super.noSuchMethod(Invocation.getter(#absolute),
          returnValue: _FakeDirectory_75()) as _i44.Directory);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i44.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
      returnValue: _FakeDirectory_75()) as _i44.Directory);
  @override
  _i55.Future<_i44.Directory> create({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#create, [], {#recursive: recursive}),
              returnValue: Future<_i44.Directory>.value(_FakeDirectory_75()))
      as _i55.Future<_i44.Directory>);
  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#createSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i55.Future<_i44.Directory> createTemp([String? prefix]) =>
      (super.noSuchMethod(Invocation.method(#createTemp, [prefix]),
              returnValue: Future<_i44.Directory>.value(_FakeDirectory_75()))
          as _i55.Future<_i44.Directory>);
  @override
  _i44.Directory createTempSync([String? prefix]) =>
      (super.noSuchMethod(Invocation.method(#createTempSync, [prefix]),
          returnValue: _FakeDirectory_75()) as _i44.Directory);
  @override
  _i55.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future<String>.value('')) as _i55.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i55.Future<_i44.Directory> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future<_i44.Directory>.value(_FakeDirectory_75()))
          as _i55.Future<_i44.Directory>);
  @override
  _i44.Directory renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeDirectory_75()) as _i44.Directory);
  @override
  _i55.Stream<_i44.FileSystemEntity> list(
          {bool? recursive = false, bool? followLinks = true}) =>
      (super.noSuchMethod(
              Invocation.method(#list, [],
                  {#recursive: recursive, #followLinks: followLinks}),
              returnValue: Stream<_i44.FileSystemEntity>.empty())
          as _i55.Stream<_i44.FileSystemEntity>);
  @override
  List<_i44.FileSystemEntity> listSync(
          {bool? recursive = false, bool? followLinks = true}) =>
      (super.noSuchMethod(
              Invocation.method(#listSync, [],
                  {#recursive: recursive, #followLinks: followLinks}),
              returnValue: <_i44.FileSystemEntity>[])
          as List<_i44.FileSystemEntity>);
  @override
  String toString() => super.toString();
  @override
  _i55.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i55.Future<_i44.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: Future<_i44.FileStat>.value(_FakeFileStat_94()))
          as _i55.Future<_i44.FileStat>);
  @override
  _i44.FileStat statSync() =>
      (super.noSuchMethod(Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_94()) as _i44.FileStat);
  @override
  _i55.Future<_i44.FileSystemEntity> delete({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
              returnValue: Future<_i44.FileSystemEntity>.value(
                  _FakeFileSystemEntity_95()))
      as _i55.Future<_i44.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i55.Stream<_i44.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: Stream<_i44.FileSystemEvent>.empty())
          as _i55.Stream<_i44.FileSystemEvent>);
}

/// A class which mocks [EntitlementInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntitlementInfo extends _i1.Mock implements _i50.EntitlementInfo {
  MockEntitlementInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  bool get isActive =>
      (super.noSuchMethod(Invocation.getter(#isActive), returnValue: false)
          as bool);
  @override
  bool get willRenew =>
      (super.noSuchMethod(Invocation.getter(#willRenew), returnValue: false)
          as bool);
  @override
  _i50.PeriodType get periodType =>
      (super.noSuchMethod(Invocation.getter(#periodType),
          returnValue: _i50.PeriodType.intro) as _i50.PeriodType);
  @override
  String get latestPurchaseDate => (super
          .noSuchMethod(Invocation.getter(#latestPurchaseDate), returnValue: '')
      as String);
  @override
  String get originalPurchaseDate =>
      (super.noSuchMethod(Invocation.getter(#originalPurchaseDate),
          returnValue: '') as String);
  @override
  _i50.Store get store => (super.noSuchMethod(Invocation.getter(#store),
      returnValue: _i50.Store.appStore) as _i50.Store);
  @override
  String get productIdentifier => (super
          .noSuchMethod(Invocation.getter(#productIdentifier), returnValue: '')
      as String);
  @override
  bool get isSandbox =>
      (super.noSuchMethod(Invocation.getter(#isSandbox), returnValue: false)
          as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [EntitlementInfos].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntitlementInfos extends _i1.Mock implements _i50.EntitlementInfos {
  MockEntitlementInfos() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i50.EntitlementInfo> get all =>
      (super.noSuchMethod(Invocation.getter(#all),
              returnValue: <String, _i50.EntitlementInfo>{})
          as Map<String, _i50.EntitlementInfo>);
  @override
  Map<String, _i50.EntitlementInfo> get active =>
      (super.noSuchMethod(Invocation.getter(#active),
              returnValue: <String, _i50.EntitlementInfo>{})
          as Map<String, _i50.EntitlementInfo>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [EntityListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntityListener<T> extends _i1.Mock implements _i5.EntityListener<T> {
  MockEntityListener() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onAdd(void Function(T)? _onAdd) =>
      super.noSuchMethod(Invocation.setter(#onAdd, _onAdd),
          returnValueForMissingStub: null);
  @override
  set onDelete(void Function(T)? _onDelete) =>
      super.noSuchMethod(Invocation.setter(#onDelete, _onDelete),
          returnValueForMissingStub: null);
  @override
  set onUpdate(void Function(T)? _onUpdate) =>
      super.noSuchMethod(Invocation.setter(#onUpdate, _onUpdate),
          returnValueForMissingStub: null);
  @override
  set onReset(void Function()? _onReset) =>
      super.noSuchMethod(Invocation.setter(#onReset, _onReset),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FileSystemEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystemEntity extends _i1.Mock implements _i44.FileSystemEntity {
  MockFileSystemEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_93())
          as Uri);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  _i44.FileSystemEntity get absolute =>
      (super.noSuchMethod(Invocation.getter(#absolute),
          returnValue: _FakeFileSystemEntity_95()) as _i44.FileSystemEntity);
  @override
  _i44.Directory get parent => (super.noSuchMethod(Invocation.getter(#parent),
      returnValue: _FakeDirectory_75()) as _i44.Directory);
  @override
  _i55.Future<bool> exists() =>
      (super.noSuchMethod(Invocation.method(#exists, []),
          returnValue: Future<bool>.value(false)) as _i55.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(Invocation.method(#existsSync, []),
      returnValue: false) as bool);
  @override
  _i55.Future<_i44.FileSystemEntity> rename(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#rename, [newPath]),
              returnValue: Future<_i44.FileSystemEntity>.value(
                  _FakeFileSystemEntity_95()))
          as _i55.Future<_i44.FileSystemEntity>);
  @override
  _i44.FileSystemEntity renameSync(String? newPath) =>
      (super.noSuchMethod(Invocation.method(#renameSync, [newPath]),
          returnValue: _FakeFileSystemEntity_95()) as _i44.FileSystemEntity);
  @override
  _i55.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinks, []),
          returnValue: Future<String>.value('')) as _i55.Future<String>);
  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(Invocation.method(#resolveSymbolicLinksSync, []),
          returnValue: '') as String);
  @override
  _i55.Future<_i44.FileStat> stat() =>
      (super.noSuchMethod(Invocation.method(#stat, []),
              returnValue: Future<_i44.FileStat>.value(_FakeFileStat_94()))
          as _i55.Future<_i44.FileStat>);
  @override
  _i44.FileStat statSync() =>
      (super.noSuchMethod(Invocation.method(#statSync, []),
          returnValue: _FakeFileStat_94()) as _i44.FileStat);
  @override
  _i55.Future<_i44.FileSystemEntity> delete({bool? recursive = false}) => (super
          .noSuchMethod(Invocation.method(#delete, [], {#recursive: recursive}),
              returnValue: Future<_i44.FileSystemEntity>.value(
                  _FakeFileSystemEntity_95()))
      as _i55.Future<_i44.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
      Invocation.method(#deleteSync, [], {#recursive: recursive}),
      returnValueForMissingStub: null);
  @override
  _i55.Stream<_i44.FileSystemEvent> watch(
          {int? events = 15, bool? recursive = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #watch, [], {#events: events, #recursive: recursive}),
              returnValue: Stream<_i44.FileSystemEvent>.empty())
          as _i55.Stream<_i44.FileSystemEvent>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LegacyImporter].
///
/// See the documentation for Mockito's code generation for more information.
class MockLegacyImporter extends _i1.Mock implements _i67.LegacyImporter {
  MockLegacyImporter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i55.Future<void> start() => (super.noSuchMethod(
      Invocation.method(#start, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LogInResult].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogInResult extends _i1.Mock implements _i50.LogInResult {
  MockLogInResult() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get created =>
      (super.noSuchMethod(Invocation.getter(#created), returnValue: false)
          as bool);
  @override
  _i50.PurchaserInfo get purchaserInfo =>
      (super.noSuchMethod(Invocation.getter(#purchaserInfo),
          returnValue: _FakePurchaserInfo_87()) as _i50.PurchaserInfo);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MethodChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMethodChannel extends _i1.Mock implements _i51.MethodChannel {
  MockMethodChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i51.MethodCodec get codec => (super.noSuchMethod(Invocation.getter(#codec),
      returnValue: _FakeMethodCodec_96()) as _i51.MethodCodec);
  @override
  _i51.BinaryMessenger get binaryMessenger =>
      (super.noSuchMethod(Invocation.getter(#binaryMessenger),
          returnValue: _FakeBinaryMessenger_97()) as _i51.BinaryMessenger);
  @override
  _i55.Future<T?> invokeMethod<T>(String? method, [dynamic arguments]) =>
      (super.noSuchMethod(Invocation.method(#invokeMethod, [method, arguments]),
          returnValue: Future<T?>.value()) as _i55.Future<T?>);
  @override
  _i55.Future<List<T>?> invokeListMethod<T>(String? method,
          [dynamic arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#invokeListMethod, [method, arguments]),
          returnValue: Future<List<T>?>.value()) as _i55.Future<List<T>?>);
  @override
  _i55.Future<Map<K, V>?> invokeMapMethod<K, V>(String? method,
          [dynamic arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#invokeMapMethod, [method, arguments]),
          returnValue: Future<Map<K, V>?>.value()) as _i55.Future<Map<K, V>?>);
  @override
  void setMethodCallHandler(
          _i55.Future<dynamic> Function(_i51.MethodCall)? handler) =>
      super.noSuchMethod(Invocation.method(#setMethodCallHandler, [handler]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NameValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockNameValidator extends _i1.Mock implements _i68.NameValidator {
  MockNameValidator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i68.ValidationCallback? run(_i46.BuildContext? context, String? newName) =>
      (super.noSuchMethod(Invocation.method(#run, [context, newName]))
          as _i68.ValidationCallback?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i46.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
          _i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i46.Route<dynamic>? newRoute, _i46.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i46.Route<dynamic>? route, _i46.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Offering].
///
/// See the documentation for Mockito's code generation for more information.
class MockOffering extends _i1.Mock implements _i50.Offering {
  MockOffering() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  String get serverDescription => (super
          .noSuchMethod(Invocation.getter(#serverDescription), returnValue: '')
      as String);
  @override
  List<_i50.Package> get availablePackages =>
      (super.noSuchMethod(Invocation.getter(#availablePackages),
          returnValue: <_i50.Package>[]) as List<_i50.Package>);
  @override
  _i50.Package? getPackage(String? identifier) =>
      (super.noSuchMethod(Invocation.method(#getPackage, [identifier]))
          as _i50.Package?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Offerings].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfferings extends _i1.Mock implements _i50.Offerings {
  MockOfferings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i50.Offering> get all => (super.noSuchMethod(
      Invocation.getter(#all),
      returnValue: <String, _i50.Offering>{}) as Map<String, _i50.Offering>);
  @override
  _i50.Offering? getOffering(String? identifier) =>
      (super.noSuchMethod(Invocation.method(#getOffering, [identifier]))
          as _i50.Offering?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Package].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackage extends _i1.Mock implements _i50.Package {
  MockPackage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  _i50.PackageType get packageType =>
      (super.noSuchMethod(Invocation.getter(#packageType),
          returnValue: _i50.PackageType.unknown) as _i50.PackageType);
  @override
  _i50.Product get product => (super.noSuchMethod(Invocation.getter(#product),
      returnValue: _FakeProduct_98()) as _i50.Product);
  @override
  String get offeringIdentifier => (super
          .noSuchMethod(Invocation.getter(#offeringIdentifier), returnValue: '')
      as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Product].
///
/// See the documentation for Mockito's code generation for more information.
class MockProduct extends _i1.Mock implements _i50.Product {
  MockProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  String get description =>
      (super.noSuchMethod(Invocation.getter(#description), returnValue: '')
          as String);
  @override
  String get title =>
      (super.noSuchMethod(Invocation.getter(#title), returnValue: '')
          as String);
  @override
  double get price =>
      (super.noSuchMethod(Invocation.getter(#price), returnValue: 0.0)
          as double);
  @override
  String get priceString =>
      (super.noSuchMethod(Invocation.getter(#priceString), returnValue: '')
          as String);
  @override
  String get currencyCode =>
      (super.noSuchMethod(Invocation.getter(#currencyCode), returnValue: '')
          as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [PurchaserInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchaserInfo extends _i1.Mock implements _i50.PurchaserInfo {
  MockPurchaserInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i50.EntitlementInfos get entitlements =>
      (super.noSuchMethod(Invocation.getter(#entitlements),
          returnValue: _FakeEntitlementInfos_99()) as _i50.EntitlementInfos);
  @override
  Map<String, String?> get allExpirationDates =>
      (super.noSuchMethod(Invocation.getter(#allExpirationDates),
          returnValue: <String, String?>{}) as Map<String, String?>);
  @override
  Map<String, String> get allPurchaseDates =>
      (super.noSuchMethod(Invocation.getter(#allPurchaseDates),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  List<String> get activeSubscriptions =>
      (super.noSuchMethod(Invocation.getter(#activeSubscriptions),
          returnValue: <String>[]) as List<String>);
  @override
  List<String> get allPurchasedProductIdentifiers =>
      (super.noSuchMethod(Invocation.getter(#allPurchasedProductIdentifiers),
          returnValue: <String>[]) as List<String>);
  @override
  List<_i69.Transaction> get nonSubscriptionTransactions =>
      (super.noSuchMethod(Invocation.getter(#nonSubscriptionTransactions),
          returnValue: <_i69.Transaction>[]) as List<_i69.Transaction>);
  @override
  String get firstSeen =>
      (super.noSuchMethod(Invocation.getter(#firstSeen), returnValue: '')
          as String);
  @override
  String get originalAppUserId => (super
          .noSuchMethod(Invocation.getter(#originalAppUserId), returnValue: '')
      as String);
  @override
  String get requestDate =>
      (super.noSuchMethod(Invocation.getter(#requestDate), returnValue: '')
          as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [QuantityPickerInputDelegate].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockQuantityPickerInputDelegate<PickerType extends _i56.GeneratedMessage,
        InputType> extends _i1.Mock
    implements _i70.QuantityPickerInputDelegate<PickerType, InputType> {
  MockQuantityPickerInputDelegate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i54.SetInputController<InputType> get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
              returnValue: _FakeSetInputController_100<InputType>())
          as _i54.SetInputController<InputType>);
  @override
  Set<PickerType> get pickerTypeInitialValues =>
      (super.noSuchMethod(Invocation.getter(#pickerTypeInitialValues),
          returnValue: <PickerType>{}) as Set<PickerType>);
  @override
  _i46.Widget pickerPage(
          _i71.ManageableListPagePickerSettings<PickerType>? pickerSettings) =>
      (super.noSuchMethod(Invocation.method(#pickerPage, [pickerSettings]),
          returnValue: _FakeWidget_77()) as _i46.Widget);
  @override
  bool inputTypeEntityExists(InputType? item) =>
      (super.noSuchMethod(Invocation.method(#inputTypeEntityExists, [item]),
          returnValue: false) as bool);
  @override
  bool inputTypeHasValue(InputType? item) =>
      (super.noSuchMethod(Invocation.method(#inputTypeHasValue, [item]),
          returnValue: false) as bool);
  @override
  int? inputTypeValue(InputType? item) =>
      (super.noSuchMethod(Invocation.method(#inputTypeValue, [item])) as int?);
  @override
  String? inputTypeEntityDisplayName(
          _i46.BuildContext? context, InputType? item) =>
      (super.noSuchMethod(
              Invocation.method(#inputTypeEntityDisplayName, [context, item]))
          as String?);
  @override
  InputType newInputItem(PickerType? pickerItem) =>
      (super.noSuchMethod(Invocation.method(#newInputItem, [pickerItem]),
          returnValue: _i72.newInputItemShim(pickerItem)) as InputType);
  @override
  InputType? existingInputItem(PickerType? pickerItem) =>
      (super.noSuchMethod(Invocation.method(#existingInputItem, [pickerItem]))
          as InputType?);
  @override
  void updateValue(InputType? item, int? value) =>
      super.noSuchMethod(Invocation.method(#updateValue, [item, value]),
          returnValueForMissingStub: null);
  @override
  void clearValue(InputType? item) =>
      super.noSuchMethod(Invocation.method(#clearValue, [item]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse extends _i1.Mock implements _i41.Response {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i60.Uint8List get bodyBytes =>
      (super.noSuchMethod(Invocation.getter(#bodyBytes),
          returnValue: _i60.Uint8List(0)) as _i60.Uint8List);
  @override
  String get body =>
      (super.noSuchMethod(Invocation.getter(#body), returnValue: '') as String);
  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [StreamSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSubscription<T> extends _i1.Mock
    implements _i55.StreamSubscription<T> {
  MockStreamSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);
  @override
  _i55.Future<void> cancel() => (super.noSuchMethod(
      Invocation.method(#cancel, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i55.Future<void>);
  @override
  void onData(void Function(T)? handleData) =>
      super.noSuchMethod(Invocation.method(#onData, [handleData]),
          returnValueForMissingStub: null);
  @override
  void onError(Function? handleError) =>
      super.noSuchMethod(Invocation.method(#onError, [handleError]),
          returnValueForMissingStub: null);
  @override
  void onDone(void Function()? handleDone) =>
      super.noSuchMethod(Invocation.method(#onDone, [handleDone]),
          returnValueForMissingStub: null);
  @override
  void pause([_i55.Future<void>? resumeSignal]) =>
      super.noSuchMethod(Invocation.method(#pause, [resumeSignal]),
          returnValueForMissingStub: null);
  @override
  void resume() => super.noSuchMethod(Invocation.method(#resume, []),
      returnValueForMissingStub: null);
  @override
  _i55.Future<E> asFuture<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#asFuture, [futureValue]),
          returnValue: Future<E>.value(null)) as _i55.Future<E>);
  @override
  String toString() => super.toString();
}
